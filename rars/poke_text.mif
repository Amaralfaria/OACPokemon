DEPTH = 16384;
WIDTH = 32;
ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;
CONTENT
BEGIN
00000000 : 00001217;   % 224:  	la 	tp, ExceptionHandling	# carrega em tp o endereço base das rotinas do sistema ECALL %
00000001 : d5020213;   % 224:  %
00000002 : 00521073;   % 225:  	csrw 	tp, utvec 		# seta utvec para o endereço tp %
00000003 : 0000e073;   % 226:  	csrsi 	ustatus, 1 		# seta o bit de habilitação de interrupção em ustatus (reg 0)																																																				 %
00000004 : 00000413;   % 87:   	li s0, 0 # frame %
00000005 : 01900493;   % 88:     li s1,25 #linha %
00000006 : 01300913;   % 89:     li s2,19 #coluna %
00000007 : 00000993;   % 90:     li s3, 0 #direçao (0 = cima, 1 = baixo, 2 = direita, 3 = esquerda) %
00000008 : ff2002b7;   % 91:   	li t0, 0xFF200604 # troca o frame exibido para o frame qeu acabou de ser pintado  %
00000009 : 60428293;   % 91:  %
0000000a : 00828023;   % 92: 	sb s0, 0(t0) %
0000000b : 0ac000ef;   % 93:   	jal INTRODUCTION %
0000000c : 00144413;   % 94: 	xori s0, s0, 1	 %
0000000d : 00144413;   % 96: 	xori s0, s0, 1 %
0000000e : 00000513;   % 98: 	li a0,0 %
0000000f : 068050ef;   % 99: 	jal KEY2 %
00000010 : 02050e63;   % 101: 	beqz a0, GAME_PRINT %
00000011 : 07a00293;   % 103: 	li t0, 'z' %
00000012 : 04550c63;   % 104: 	beq a0, t0, INTERACTION %
00000013 : 03100293;   % 106: 	li t0, '1' %
00000014 : 04550063;   % 107: 	beq a0, t0, Use_Cheat1 %
00000015 : 03200293;   % 109: 	li t0, '2' %
00000016 : 04550063;   % 110: 	beq a0, t0, Use_Cheat2 %
00000017 : 06d00293;   % 112: 	li t0, 'm' %
00000018 : 00550c63;   % 113: 	beq a0, t0, PAUSE %
00000019 : 00a006b3;   % 115: 	mv a3,a0 #a3 = tecla %
0000001a : 00900533;   % 116: 	mv a0,s1 #linha %
0000001b : 012005b3;   % 117: 	mv a1,s2 #coluna %
0000001c : 571040ef;   % 118: 	jal MOVE %
0000001d : 0080006f;   % 120: 	j GAME_PRINT %
0000001e : 1f4000ef;   % 123: 	jal MENU %
0000001f : 00900533;   % 126:  	mv a0,s1 %
00000020 : 012005b3;   % 127: 	mv a1,s2 %
00000021 : 55c020ef;   % 128: 	jal ra, CARREGA_MAPA %
00000022 : 050050ef;   % 130:   jal PRINT_PLAYER %
00000023 : 0240006f;   % 132:   j GAME_LOOP.END %
00000024 : 654050ef;   % 135: 	jal CHEAT_ADD_MONEY %
00000025 : 01c0006f;   % 136: 	j GAME_LOOP.END %
00000026 : 678050ef;   % 139: 	jal CHEAT_LEVEL_UP %
00000027 : 0140006f;   % 140: 	j GAME_LOOP.END %
00000028 : 00900533;   % 143: 	mv a0, s1 %
00000029 : 012005b3;   % 144: 	mv a1, s2 %
0000002a : 01300633;   % 145: 	mv a2, s3 %
0000002b : 664020ef;   % 146: 	jal CHECK_DIALOG %
0000002c : 4c8050ef;   % 153: 	jal CHECK_BATTLE %
0000002d : 0fc27297;   % 155: 	la t0, WILL_BATTLE %
0000002e : 06628293;   % 155:  %
0000002f : 00000313;   % 156: 	li t1, 0 %
00000030 : 00628023;   % 157: 	sb t1, 0(t0) %
00000031 : 0e4000ef;   % 159: 	jal TOCA_MUSICA %
00000032 : ff2002b7;   % 161: 	li t0, 0xFF200604 # troca o frame exibido para o frame qeu acabou de ser pintado  %
00000033 : 60428293;   % 161:  %
00000034 : 00828023;   % 162: 	sb s0, 0(t0) %
00000035 : f61ff06f;   % 168: 	j GAME_LOOP %
00000036 : ffc10113;   % 3:     addi sp, sp, -4 %
00000037 : 00112023;   % 4:     sw ra, 0(sp) %
00000038 : 0fc1d517;   % 6:     la a0, lamar %
00000039 : e7050513;   % 6:  %
0000003a : 01400593;   % 7:     li a1, 20 %
0000003b : 06400613;   % 8:     li a2, 100 %
0000003c : 000006b3;   % 9:     mv a3, zero %
0000003d : 15c050ef;   % 10:     jal DRAW_IMAGE2 %
0000003e : 0fc27517;   % 12:     la a0, START0 %
0000003f : 94e50513;   % 12:  %
00000040 : 000005b3;   % 13:     mv a1, zero %
00000041 : 0fc27617;   % 14:     la a2, START1 %
00000042 : 96160613;   % 14:  %
00000043 : 250050ef;   % 15:     jal PRINT_TEXT_BOX %
00000044 : 0fc27517;   % 17:     la a0, START2 %
00000045 : 97a50513;   % 17:  %
00000046 : 000005b3;   % 18:     mv a1, zero %
00000047 : 0fc27617;   % 19:     la a2, START3 %
00000048 : 98d60613;   % 19:  %
00000049 : 238050ef;   % 20:     jal PRINT_TEXT_BOX %
0000004a : 0fc27517;   % 22:     la a0, START4 %
0000004b : 98f50513;   % 22:  %
0000004c : 000005b3;   % 23:     mv a1, zero %
0000004d : 0fc27617;   % 24:     la a2, START5 %
0000004e : 99d60613;   % 24:  %
0000004f : 220050ef;   % 25:     jal PRINT_TEXT_BOX %
00000050 : 0fc27517;   % 27:     la a0, START6 %
00000051 : 9ac50513;   % 27:  %
00000052 : 000005b3;   % 28:     mv a1, zero %
00000053 : 0fc27617;   % 29:     la a2, START7 %
00000054 : 9c160613;   % 29:  %
00000055 : 208050ef;   % 30:     jal PRINT_TEXT_BOX %
00000056 : 0fc27517;   % 32:     la a0, START8 %
00000057 : 9d750513;   % 32:  %
00000058 : 000005b3;   % 33:     mv a1, zero %
00000059 : 0fc27617;   % 34:     la a2, START9 %
0000005a : 9f060613;   % 34:  %
0000005b : 1f0050ef;   % 35:     jal PRINT_TEXT_BOX %
0000005c : 0fc27517;   % 37:     la a0, START10 %
0000005d : a0950513;   % 37:  %
0000005e : 000005b3;   % 38:     mv a1, zero %
0000005f : 00000633;   % 39:     mv a2, zero %
00000060 : 1dc050ef;   % 40:     jal PRINT_TEXT_BOX %
00000061 : 0fc27517;   % 42:     la a0, START12 %
00000062 : a1550513;   % 42:  %
00000063 : 000005b3;   % 43:     mv a1, zero %
00000064 : 0fc27617;   % 44:     la a2, START13 %
00000065 : a2b60613;   % 44:  %
00000066 : 1c4050ef;   % 45:     jal PRINT_TEXT_BOX %
00000067 : 00012083;   % 47:     lw ra, 0(sp) %
00000068 : 00410113;   % 48:     addi sp, sp, 4 %
00000069 : 00008067;   % 49:     ret %
0000006a : c01022f3;   % 13: 	csrr t0,3073 %
0000006b : 0fc27317;   % 14: 	la t1,TEMPO_ULTIMA_NOTA %
0000006c : 1b830313;   % 14:  %
0000006d : 00032303;   % 15: 	lw t1,0(t1) %
0000006e : 406282b3;   % 16: 	sub t0,t0,t1 %
0000006f : 0fc27317;   % 17: 	la t1,TEMPO_REST %
00000070 : 1ac30313;   % 17:  %
00000071 : 00032303;   % 18: 	lw t1,0(t1) %
00000072 : 0062f463;   % 20: 	bgeu t0,t1,TOCA_NOTA #verifica se já passou o tempo necessario para tocar a nota %
00000073 : 00008067;   % 21: 	ret %
00000074 : 0fc27297;   % 24: 	la t0,CONTADOR_NOTAS %
00000075 : 19028293;   % 24:  %
00000076 : 005003b3;   % 25: 	mv t2,t0 %
00000077 : 0fc27317;   % 26: 	la t1,TAMANHO	 %
00000078 : 19030313;   % 26:  %
00000079 : 0002a283;   % 27: 	lw t0,0(t0)	#t0 = contador de notas %
0000007a : 00032303;   % 28: 	lw t1,0(t1)	#t1 = tamanho %
0000007b : 00629463;   % 30: 	bne t0,t1,DIFERENTE #verifica se o contador já passou do tamanho da musica %
0000007c : 0003a023;   % 31: 	sw zero,0(t2) %
0000007d : 00800313;   % 34: 	li t1,8 %
0000007e : 02628333;   % 35: 	mul t1,t0,t1 #ajusta  aposicao da nota %
0000007f : 0fc27e17;   % 37: 	la t3,NOTAS %
00000080 : 174e0e13;   % 37:  %
00000081 : 006e0e33;   % 38: 	add t3,t3,t1 %
00000082 : ff810113;   % 40: 	addi sp,sp,-8 %
00000083 : 01c12023;   % 41: 	sw t3,0(sp) #guarda a posicao da nota %
00000084 : 00112223;   % 42: 	sw ra,4(sp) %
00000085 : 000e2503;   % 48: 	lw a0,0(t3) #pitch %
00000086 : 004e2583;   % 49: 	lw a1,4(t3) #duracao %
00000087 : 00a00613;   % 50: 	li a2,10 #instrumento %
00000088 : 06400693;   % 51: 	li a3,100 #volume %
00000089 : 1ed040ef;   % 56: 	jal MIDI_SAVE #nao funciona no rars %
0000008a : 00012e03;   % 60: 	lw t3,0(sp) %
0000008b : 00412083;   % 61: 	lw ra,4(sp) %
0000008c : 00810113;   % 62: 	addi sp,sp,8 %
0000008d : 004e2e83;   % 64: 	lw t4,4(t3) %
0000008e : 0fc27297;   % 65: 	la t0,TEMPO_REST %
0000008f : 13028293;   % 65:  %
00000090 : 01d2a023;   % 66: 	sw t4,0(t0) %
00000091 : c01022f3;   % 68: 	csrr t0,3073 %
00000092 : 0fc27317;   % 69: 	la t1,TEMPO_ULTIMA_NOTA %
00000093 : 11c30313;   % 69:  %
00000094 : 00532023;   % 70: 	sw t0,0(t1) %
00000095 : 0fc27317;   % 73: 	la t1,CONTADOR_NOTAS %
00000096 : 10c30313;   % 73:  %
00000097 : 00032383;   % 74: 	lw t2,0(t1) %
00000098 : 00138393;   % 75: 	addi t2,t2,1 %
00000099 : 00732023;   % 76: 	sw t2,0(t1) %
0000009a : 00008067;   % 78: 	ret %
0000009b : ffc10113;   % 3:     addi sp, sp, -4 %
0000009c : 00112023;   % 4:     sw ra, 0(sp) %
0000009d : 00144413;   % 6:     xori s0, s0, 1 %
0000009e : 00800533;   % 8:     mv a0, s0 %
0000009f : 194000ef;   % 9:     jal PRINT_MENU_BOX %
000000a0 : 0fc27517;   % 11:     la a0, P_PLAYER %
000000a1 : fe850513;   % 11:  %
000000a2 : 101030ef;   % 12:     jal GET_POKEMON_NAME %
000000a3 : 07800593;   % 14:     li a1, 120 %
000000a4 : 04100613;   % 15:     li a2, 65 %
000000a5 : 0000a6b7;   % 16:     li a3, 0x0000A3FF %
000000a6 : 3ff68693;   % 16:  %
000000a7 : 00800733;   % 17:     mv a4, s0 %
000000a8 : 235040ef;   % 18:     jal PRINT_STRING_SAVE %
000000a9 : 0fc27517;   % 20:     la a0, menu_lvl %
000000aa : 09b50513;   % 20:  %
000000ab : 04800593;   % 21:     li a1, 72 %
000000ac : 05a00613;   % 22:     li a2, 90 %
000000ad : 0000a6b7;   % 23:     li a3, 0x0000A3FF %
000000ae : 3ff68693;   % 23:  %
000000af : 00800733;   % 24:     mv a4, s0 %
000000b0 : 215040ef;   % 25:     jal PRINT_STRING_SAVE %
000000b1 : 0fc27517;   % 27:     la a0, P_PLAYER %
000000b2 : fa450513;   % 27:  %
000000b3 : 00200593;   % 28:     li a1, 0x02 %
000000b4 : 069030ef;   % 29:     jal GET_POKEMON_STAT  %
000000b5 : 07400593;   % 31:     li a1, 116 %
000000b6 : 05a00613;   % 32:     li a2, 90 %
000000b7 : 0000a6b7;   % 33:     li a3, 0x0000A3FF %
000000b8 : 3ff68693;   % 33:  %
000000b9 : 00800733;   % 34:     mv a4, s0 %
000000ba : 25d040ef;   % 35:     jal PRINT_INT_SAVE %
000000bb : 0fc27517;   % 37:     la a0, menu_exp %
000000bc : 05850513;   % 37:  %
000000bd : 04800593;   % 38:     li a1, 72 %
000000be : 07800613;   % 39:     li a2, 120 %
000000bf : 0000a6b7;   % 40:     li a3, 0x0000A3FF %
000000c0 : 3ff68693;   % 40:  %
000000c1 : 00800733;   % 41:     mv a4, s0 %
000000c2 : 1cd040ef;   % 42:     jal PRINT_STRING_SAVE %
000000c3 : 0fc27517;   % 44:     la a0, P_PLAYER %
000000c4 : f5c50513;   % 44:  %
000000c5 : 00400593;   % 45:     li a1, 0x04 %
000000c6 : 021030ef;   % 46:     jal GET_POKEMON_STAT  %
000000c7 : 07400593;   % 48:     li a1, 116 %
000000c8 : 07800613;   % 49:     li a2, 120 %
000000c9 : 0000a6b7;   % 50:     li a3, 0x0000A3FF %
000000ca : 3ff68693;   % 50:  %
000000cb : 00800733;   % 51:     mv a4, s0 %
000000cc : 215040ef;   % 52:     jal PRINT_INT_SAVE %
000000cd : 0fc27517;   % 54:     la a0, menu_dinheiro %
000000ce : 01550513;   % 54:  %
000000cf : 04800593;   % 55:     li a1, 72 %
000000d0 : 09600613;   % 56:     li a2, 150 %
000000d1 : 0000a6b7;   % 57:     li a3, 0x0000A3FF %
000000d2 : 3ff68693;   % 57:  %
000000d3 : 00800733;   % 58:     mv a4, s0 %
000000d4 : 185040ef;   % 59:     jal PRINT_STRING_SAVE %
000000d5 : 0fc27517;   % 61:     la a0, creditos %
000000d6 : f2050513;   % 61:  %
000000d7 : 00054503;   % 62:     lbu a0, 0(a0) %
000000d8 : 0c800593;   % 63:     li a1, 200 %
000000d9 : 09600613;   % 64:     li a2, 150 %
000000da : 0000a6b7;   % 65:     li a3, 0x0000A3FF %
000000db : 3ff68693;   % 65:  %
000000dc : 00800733;   % 66:     mv a4, s0 %
000000dd : 1d1040ef;   % 67:     jal PRINT_INT_SAVE %
000000de : 0fc27517;   % 69:     la a0, menu_cura %
000000df : fdc50513;   % 69:  %
000000e0 : 0b400593;   % 70:     li a1, 180 %
000000e1 : 05a00613;   % 71:     li a2, 90 %
000000e2 : 0000a6b7;   % 72:     li a3, 0x0000A3FF %
000000e3 : 3ff68693;   % 72:  %
000000e4 : 00800733;   % 73:     mv a4, s0 %
000000e5 : 141040ef;   % 74:     jal PRINT_STRING_SAVE %
000000e6 : 0fc27517;   % 76:     la a0, player_bag %
000000e7 : d5050513;   % 76:  %
000000e8 : 00452503;   % 77:     lw a0, 4(a0) %
000000e9 : 0f000593;   % 78:     li a1, 240 %
000000ea : 05a00613;   % 79:     li a2, 90 %
000000eb : 0000a6b7;   % 80:    li a3, 0x0000A3FF %
000000ec : 3ff68693;   % 80:  %
000000ed : 00800733;   % 81:     mv a4, s0 %
000000ee : 18d040ef;   % 82:     jal PRINT_INT_SAVE  %
000000ef : 0fc27517;   % 84:     la a0, menu_passe %
000000f0 : f9d50513;   % 84:  %
000000f1 : 0b400593;   % 85:     li a1, 180 %
000000f2 : 07800613;   % 86:     li a2, 120 %
000000f3 : 0000a6b7;   % 87:     li a3, 0x0000A3FF %
000000f4 : 3ff68693;   % 87:  %
000000f5 : 00800733;   % 88:     mv a4, s0 %
000000f6 : 0fd040ef;   % 89:     jal PRINT_STRING_SAVE %
000000f7 : 0fc27517;   % 91:     la a0, passe  %
000000f8 : f8350513;   % 91:  %
000000f9 : 00050503;   % 92:     lb a0, 0(a0) %
000000fa : 0f000593;   % 93:     li a1, 240 %
000000fb : 07800613;   % 94:     li a2, 120 %
000000fc : 0000a6b7;   % 95:     li a3, 0x0000A3FF %
000000fd : 3ff68693;   % 95:  %
000000fe : 00800733;   % 96:     mv a4, s0 %
000000ff : 149040ef;   % 97:     jal PRINT_INT_SAVE  %
00000100 : 1b5040ef;   % 100:     jal CONFIRM_DIALOG %
00000101 : 00012083;   % 102:     lw ra, 0(sp) %
00000102 : 00410113;   % 103:     addi sp, sp, 4 %
00000103 : 00008067;   % 104:     ret %
00000104 : fe010113;   % 108:     addi sp, sp, -32 %
00000105 : 00112e23;   % 109:     sw ra, 28(sp) %
00000106 : 01f12c23;   % 110:     sw t6, 24(sp) %
00000107 : 01e12a23;   % 111:     sw t5, 20(sp) %
00000108 : 01d12823;   % 112:     sw t4, 16(sp) %
00000109 : 01c12623;   % 113:     sw t3, 12(sp) %
0000010a : 00712423;   % 114:     sw t2, 8(sp) %
0000010b : 00612223;   % 115:     sw t1, 4(sp) %
0000010c : 00512023;   % 116:     sw t0, 0(sp) %
0000010d : 00a002b3;   % 118:     mv t0, a0 %
0000010e : 0fc25517;   % 120:     la a0, pause1 %
0000010f : 0e850513;   % 120:  %
00000110 : 03000593;   % 121:     li a1, 48 %
00000111 : 02800613;   % 122:     li a2, 40 %
00000112 : 005006b3;   % 123:     mv a3, t0 %
00000113 : 00000713;   % 124:     li a4, 0 %
00000114 : 511040ef;   % 125:     jal DRAW_IMAGE %
00000115 : 0fc25517;   % 127:     la a0, pause4 %
00000116 : 3e450513;   % 127:  %
00000117 : 04000593;   % 128:     li a1, 64 %
00000118 : 02800613;   % 129:     li a2, 40 %
00000119 : 005006b3;   % 130:     mv a3, t0 %
0000011a : 00500713;   % 131:     li a4, 5 %
0000011b : 174000ef;   % 132:     jal PRINT_SEQUENCE %
0000011c : 0fc25517;   % 134:     la a0, pause7 %
0000011d : 6e050513;   % 134:  %
0000011e : 09000593;   % 135:     li a1, 144 %
0000011f : 02800613;   % 136:     li a2, 40 %
00000120 : 005006b3;   % 137:     mv a3, t0 %
00000121 : 00000713;   % 138:     li a4, 0 %
00000122 : 4d9040ef;   % 139:     jal DRAW_IMAGE %
00000123 : 0fc25517;   % 141:     la a0, pause8 %
00000124 : 7cc50513;   % 141:  %
00000125 : 0a000593;   % 142:     li a1, 160 %
00000126 : 02800613;   % 143:     li a2, 40 %
00000127 : 005006b3;   % 144:     mv a3, t0 %
00000128 : 00000713;   % 145:     li a4, 0 %
00000129 : 4bd040ef;   % 146:     jal DRAW_IMAGE %
0000012a : 0fc25517;   % 148:     la a0, pause4 %
0000012b : 39050513;   % 148:  %
0000012c : 0b000593;   % 149:     li a1, 176 %
0000012d : 02800613;   % 150:     li a2, 40 %
0000012e : 005006b3;   % 151:     mv a3, t0 %
0000012f : 00500713;   % 152:     li a4, 5 %
00000130 : 120000ef;   % 153:     jal PRINT_SEQUENCE %
00000131 : 0fc25517;   % 155:     la a0, pause1 %
00000132 : 05c50513;   % 155:  %
00000133 : 10000593;   % 156:     li a1, 256 %
00000134 : 02800613;   % 157:     li a2, 40 %
00000135 : 005006b3;   % 158:     mv a3, t0 %
00000136 : 00100713;   % 159:     li a4, 1 %
00000137 : 485040ef;   % 160:     jal DRAW_IMAGE %
00000138 : 00000313;   % 163:     li t1, 0 %
00000139 : 00700393;   % 164:     li t2, 7 %
0000013a : 03800e13;   % 167:         li t3, 56 %
0000013b : 01000e93;   % 168:         li t4, 16 %
0000013c : 026e8eb3;   % 169:         mul t4, t4, t1 %
0000013d : 01de0eb3;   % 170:         add t4, t3, t4 %
0000013e : 0fc25517;   % 173:         la a0, pause3 %
0000013f : 23850513;   % 173:  %
00000140 : 03000593;   % 174:         li a1, 48 %
00000141 : 01d00633;   % 175:         mv a2, t4 %
00000142 : 005006b3;   % 176:         mv a3, t0 %
00000143 : 00000713;   % 177:         li a4, 0 %
00000144 : 451040ef;   % 178:         jal DRAW_IMAGE %
00000145 : 0fc25517;   % 180:         la a0, pause6 %
00000146 : 53450513;   % 180:  %
00000147 : 04000593;   % 181:         li a1, 64 %
00000148 : 01d00633;   % 182:         mv a2, t4 %
00000149 : 005006b3;   % 183:         mv a3, t0 %
0000014a : 00c00713;   % 184:         li a4, 12 %
0000014b : 0b4000ef;   % 185:         jal PRINT_SEQUENCE %
0000014c : 0fc25517;   % 187:         la a0, pause3 %
0000014d : 20050513;   % 187:  %
0000014e : 10000593;   % 188:         li a1, 256 %
0000014f : 01d00633;   % 189:         mv a2, t4 %
00000150 : 005006b3;   % 190:         mv a3, t0 %
00000151 : 00100713;   % 191:         li a4, 1 %
00000152 : 419040ef;   % 192:         jal DRAW_IMAGE %
00000153 : 00130313;   % 194:         addi t1, t1, 1 %
00000154 : f8734ce3;   % 195:         blt t1, t2, PRINT_MENU_BOX.MIOLO %
00000155 : 03800e13;   % 197:     li t3, 56 %
00000156 : 01000e93;   % 198:     li t4, 16 %
00000157 : 026e8eb3;   % 199:     mul t4, t4, t1 %
00000158 : 01de0eb3;   % 200:     add t4, t3, t4 %
00000159 : 0fc25517;   % 202:     la a0, pause2 %
0000015a : 0c450513;   % 202:  %
0000015b : 03000593;   % 203:     li a1, 48 %
0000015c : 01d00633;   % 204:     mv a2, t4 %
0000015d : 005006b3;   % 205:     mv a3, t0 %
0000015e : 00000713;   % 206:     li a4, 0 %
0000015f : 3e5040ef;   % 207:     jal DRAW_IMAGE %
00000160 : 0fc25517;   % 209:     la a0, pause5 %
00000161 : 3c050513;   % 209:  %
00000162 : 04000593;   % 210:     li a1, 64 %
00000163 : 01d00633;   % 211:     mv a2, t4 %
00000164 : 005006b3;   % 212:     mv a3, t0 %
00000165 : 00c00713;   % 213:     li a4, 12 %
00000166 : 048000ef;   % 214:     jal PRINT_SEQUENCE %
00000167 : 0fc25517;   % 216:     la a0, pause2 %
00000168 : 08c50513;   % 216:  %
00000169 : 10000593;   % 217:     li a1, 256 %
0000016a : 01d00633;   % 218:     mv a2, t4 %
0000016b : 005006b3;   % 219:     mv a3, t0 %
0000016c : 00100713;   % 220:     li a4, 1 %
0000016d : 3ad040ef;   % 221:     jal DRAW_IMAGE %
0000016e : 00012283;   % 223:     lw t0, 0(sp) %
0000016f : 00412303;   % 224:     lw t1, 4(sp) %
00000170 : 00812383;   % 225:     lw t2, 8(sp) %
00000171 : 00c12e03;   % 226:     lw t3, 12(sp) %
00000172 : 01012e83;   % 227:     lw t4, 16(sp) %
00000173 : 01412f03;   % 228:     lw t5, 20(sp) %
00000174 : 01812f83;   % 229:     lw t6, 24(sp) %
00000175 : 01c12083;   % 230:     lw ra, 28(sp) %
00000176 : 02010113;   % 231:     addi sp, sp, 32 %
00000177 : 00008067;   % 232:     ret %
00000178 : fe010113;   % 241:    addi sp, sp, -32 %
00000179 : 00112e23;   % 242:   sw ra, 28(sp) %
0000017a : 01f12c23;   % 243:   sw t6, 24(sp) %
0000017b : 01e12a23;   % 244:   sw t5, 20(sp) %
0000017c : 01d12823;   % 245:   sw t4, 16(sp) %
0000017d : 01c12623;   % 246:   sw t3, 12(sp) %
0000017e : 00712423;   % 247:   sw t2, 8(sp) %
0000017f : 00612223;   % 248:   sw t1, 4(sp) %
00000180 : 00512023;   % 249:   sw t0, 0(sp) %
00000181 : 00a002b3;   % 251:     mv t0, a0 %
00000182 : 00b00333;   % 253:     mv t1, a1 %
00000183 : 00c003b3;   % 254:     mv t2, a2  %
00000184 : 00000e13;   % 256:     li t3, 0 %
00000185 : 00e00eb3;   % 257:     mv t4, a4 %
00000186 : 00d00f33;   % 259:     mv t5, a3 %
00000187 : 0002af83;   % 262:         lw t6, 0(t0) %
00000188 : 03cf8fb3;   % 263:         mul t6, t6, t3  %
00000189 : 006f8fb3;   % 264:         add t6, t6, t1 %
0000018a : 00500533;   % 266:         mv a0, t0 %
0000018b : 01f005b3;   % 267:         mv a1, t6 %
0000018c : 00700633;   % 268:         mv a2, t2 %
0000018d : 01e006b3;   % 269:         mv a3, t5  %
0000018e : 00000713;   % 270:         li a4, 0 %
0000018f : 325040ef;   % 271:         jal DRAW_IMAGE %
00000190 : 001e0e13;   % 273:         addi t3, t3, 1 %
00000191 : fdde4ce3;   % 274:         blt t3, t4, PRINT_SEQUENCE.LOOP %
00000192 : 00012283;   % 276:     lw t0, 0(sp) %
00000193 : 00412303;   % 277:     lw t1, 4(sp) %
00000194 : 00812383;   % 278:     lw t2, 8(sp) %
00000195 : 00c12e03;   % 279:     lw t3, 12(sp) %
00000196 : 01012e83;   % 280:     lw t4, 16(sp) %
00000197 : 01412f03;   % 281:     lw t5, 20(sp) %
00000198 : 01812f83;   % 282:     lw t6, 24(sp) %
00000199 : 01c12083;   % 283:     lw ra, 28(sp) %
0000019a : 02010113;   % 284:     addi sp, sp, 32 %
0000019b : 00008067;   % 285:     ret %
0000019c : ffc10113;   % 3:     addi sp, sp, -4 %
0000019d : 00112023;   % 4:     sw ra, 0(sp) %
0000019e : 00144413;   % 6:     xori s0, s0, 1 %
0000019f : 0fc27517;   % 8:     la a0, CURA0 %
000001a0 : 9b950513;   % 8:  %
000001a1 : 008005b3;   % 9:     mv a1, s0 %
000001a2 : 0fc27617;   % 10:     la a2, CURA1 %
000001a3 : 9d160613;   % 10:  %
000001a4 : 4cd040ef;   % 11:     jal PRINT_TEXT_BOX %
000001a5 : 0fc27517;   % 13:     la a0, P_PLAYER %
000001a6 : bd450513;   % 13:  %
000001a7 : 01200593;   % 14:     li a1, 0x12 %
000001a8 : 498030ef;   % 15:     jal GET_POKEMON_STAT %
000001a9 : 00a00633;   % 17:     mv a2, a0 %
000001aa : 0fc27517;   % 18:     la a0, P_PLAYER %
000001ab : bc050513;   % 18:  %
000001ac : 01000593;   % 19:     li a1, 0x10 %
000001ad : 5e4030ef;   % 20:     jal SET_POKEMON_STAT %
000001ae : 00012083;   % 22:     lw ra, 0(sp) %
000001af : 00410113;   % 23:     addi sp, sp, 4 %
000001b0 : 00008067;   % 24:     ret %
000001b1 : ffc10113;   % 4:     addi sp, sp, -4 %
000001b2 : 00112023;   % 5:     sw ra, 0(sp) %
000001b3 : 00144413;   % 8:     xori s0, s0, 1 %
000001b4 : 0fc27517;   % 11:     la a0, LOJA0 %
000001b5 : 9a450513;   % 11:  %
000001b6 : 008005b3;   % 12:     mv a1, s0 %
000001b7 : 00000633;   % 13:     mv a2, zero %
000001b8 : 47d040ef;   % 14:     jal PRINT_TEXT_BOX %
000001b9 : 010000ef;   % 17:     jal VENDEDORA_MENU %
000001ba : 00012083;   % 20:     lw ra, 0(sp) %
000001bb : 00410113;   % 21:     addi sp, sp, 4 %
000001bc : 00008067;   % 24:     ret %
000001bd : fec10113;   % 29:     addi sp, sp, -20 %
000001be : 00112023;   % 30:     sw ra, 0(sp) %
000001bf : 00512223;   % 31:     sw t0, 4(sp) %
000001c0 : 00612423;   % 32:     sw t1, 8(sp) %
000001c1 : 00712623;   % 33:     sw t2, 12(sp) %
000001c2 : 01c12823;   % 34:     sw t3, 16(sp) %
000001c3 : 0fc27517;   % 37:     la a0, LOJA1 %
000001c4 : 98650513;   % 37:  %
000001c5 : 008005b3;   % 38:     mv a1, s0 %
000001c6 : 00000633;   % 39:     mv a2, zero %
000001c7 : 441040ef;   % 40:     jal PRINT_TEXT_BOX %
000001c8 : 0fc27517;   % 43:     la a0, sim %
000001c9 : c1750513;   % 43:  %
000001ca : 02000593;   % 44:     li a1, 32 %
000001cb : 0dc00613;   % 45:     li a2, 220 %
000001cc : 000106b7;   % 46:     li a3, 0x0000FF00 %
000001cd : f0068693;   % 46:  %
000001ce : 00800733;   % 47:     mv a4, s0 %
000001cf : 598040ef;   % 48:     jal PRINT_STRING_SAVE %
000001d0 : 0fc27517;   % 51:     la a0, nao %
000001d1 : bfb50513;   % 51:  %
000001d2 : 08000593;   % 52:     li a1, 128 %
000001d3 : 0dc00613;   % 53:     li a2, 220 %
000001d4 : 000106b7;   % 54:     li a3, 0x0000FF00 %
000001d5 : f0068693;   % 54:  %
000001d6 : 00800733;   % 55:     mv a4, s0 %
000001d7 : 578040ef;   % 56:     jal PRINT_STRING_SAVE %
000001d8 : 01600293;   % 59:     li t0, 22 %
000001d9 : 000003b3;   % 60:     mv t2, zero %
000001da : 00500533;   % 63:     mv a0, t0 %
000001db : 0dc00593;   % 64:     li a1, 220 %
000001dc : 00010637;   % 65:     li a2, 0x0000FF0F %
000001dd : f0f60613;   % 65:  %
000001de : 659030ef;   % 66:     jal DRAW_SETA %
000001df : 129040ef;   % 70:         jal KEY2 %
000001e0 : 06100313;   % 73:         li t1, 'a' %
000001e1 : 00650c63;   % 74:         beq a0, t1, Move_Seta_Left3 %
000001e2 : 06400313;   % 77:         li t1, 'd' %
000001e3 : 04650663;   % 78:         beq a0, t1, Move_Seta_Right3 %
000001e4 : 07a00313;   % 81:         li t1, 'z' %
000001e5 : 08650063;   % 82:         beq a0, t1, Comprar_Marmita %
000001e6 : fe5ff06f;   % 84:         j Vendedora_Menu_Loop %
000001e7 : 01600313;   % 88:             li t1, 22 %
000001e8 : fc628ee3;   % 89:             beq t0, t1, Vendedora_Menu_Loop %
000001e9 : 00500533;   % 92:             mv a0, t0 %
000001ea : 0dc00593;   % 93:             li a1, 220 %
000001eb : 00010637;   % 94:             li a2, 0x0000FFFF %
000001ec : fff60613;   % 94:  %
000001ed : 61d030ef;   % 95:             jal DRAW_SETA %
000001ee : 01600293;   % 97:             li t0, 22 %
000001ef : 00500533;   % 100:             mv a0, t0 %
000001f0 : 0dc00593;   % 101:             li a1, 220 %
000001f1 : 00010637;   % 102:             li a2, 0x0000FF0F %
000001f2 : f0f60613;   % 102:  %
000001f3 : 605030ef;   % 103:             jal DRAW_SETA %
000001f4 : 000003b3;   % 105:             mv t2, zero %
000001f5 : fa9ff06f;   % 106:             j Vendedora_Menu_Loop %
000001f6 : 07600313;   % 110:             li t1, 118 %
000001f7 : fa6280e3;   % 111:             beq t0, t1, Vendedora_Menu_Loop %
000001f8 : 00500533;   % 114:             mv a0, t0 %
000001f9 : 0dc00593;   % 115:             li a1, 220 %
000001fa : 00010637;   % 116:             li a2, 0x0000FFFF %
000001fb : fff60613;   % 116:  %
000001fc : 5e1030ef;   % 117:             jal DRAW_SETA %
000001fd : 07600293;   % 119:             li t0, 118 %
000001fe : 00500533;   % 121:             mv a0, t0 %
000001ff : 0dc00593;   % 122:             li a1, 220 %
00000200 : 00010637;   % 123:             li a2, 0x0000FF0F %
00000201 : f0f60613;   % 123:  %
00000202 : 5c9030ef;   % 124:             jal DRAW_SETA %
00000203 : 00100393;   % 126:             li t2, 1 %
00000204 : f6dff06f;   % 127:             j Vendedora_Menu_Loop %
00000205 : 04039663;   % 131:             bnez t2, End_Vendedora_Menu %
00000206 : 0fc27317;   % 134:             la t1, creditos %
00000207 : a5c30313;   % 134:  %
00000208 : 00034383;   % 135:             lbu t2, 0(t1) %
00000209 : 03200e13;   % 136:             li t3, 50 %
0000020a : 03c3c263;   % 137:             blt t2, t3, Creditos_Insuficientes %
0000020b : fce38393;   % 140:             addi t2, t2, -50 %
0000020c : 00730023;   % 141:             sb t2, 0(t1) %
0000020d : 0fc27297;   % 144:             la t0, player_bag %
0000020e : 8b428293;   % 144:  %
0000020f : 0042a303;   % 145:             lw t1, 4(t0) %
00000210 : 00130313;   % 146:             addi t1, t1, 1 %
00000211 : 0062a223;   % 147:             sw t1, 4(t0) %
00000212 : 0180006f;   % 150:             j End_Vendedora_Menu %
00000213 : 0fc27517;   % 154:             la a0, LOJA2 %
00000214 : 86850513;   % 154:  %
00000215 : 008005b3;   % 155:             mv a1, s0 %
00000216 : 00000633;   % 156:             mv a2, zero %
00000217 : 301040ef;   % 157:             jal PRINT_TEXT_BOX %
00000218 : 0fc27517;   % 161:         la a0, LOJA3 %
00000219 : 87a50513;   % 161:  %
0000021a : 008005b3;   % 162:         mv a1, s0 %
0000021b : 00000633;   % 163:         mv a2, zero %
0000021c : 2ed040ef;   % 164:         jal PRINT_TEXT_BOX     %
0000021d : 01012e03;   % 167:     lw t3, 16(sp) %
0000021e : 00c12383;   % 168:     lw t2, 12(sp) %
0000021f : 00812303;   % 169:     lw t1, 8(sp) %
00000220 : 00412283;   % 170:     lw t0, 4(sp) %
00000221 : 00012083;   % 171:     lw ra, 0(sp) %
00000222 : 01410113;   % 172:     addi sp, sp, 20 %
00000223 : 00008067;   % 174:     ret %
00000224 : ff410113;   % 8:     addi sp, sp, -12 %
00000225 : 00112023;   % 9:     sw ra, 0(sp) %
00000226 : 00512223;   % 10:     sw t0, 4(sp) %
00000227 : 00612423;   % 11:     sw t1, 8(sp) %
00000228 : 00144413;   % 14:     xori s0, s0, 1 %
00000229 : 0fc27297;   % 16:     la t0, estado_prof %
0000022a : c9c28293;   % 16:  %
0000022b : 00028283;   % 17:     lb t0, 0(t0) %
0000022c : 00028a63;   % 19:     beqz t0, Escolha_Pokemons %
0000022d : 00100313;   % 21:     li t1, 1 %
0000022e : 00628a63;   % 22:     beq t0, t1, Dialog_Passe %
0000022f : 00200313;   % 24:     li t1, 2 %
00000230 : 00628a63;   % 25:     beq t0, t1, Dialog_Padrao %
00000231 : 028000ef;   % 28:         jal ESCOLHA_POKEMONS_INICIAL %
00000232 : 0100006f;   % 29:         j End_Professor %
00000233 : 378000ef;   % 32:         jal DIALOGO_PASSE %
00000234 : 0080006f;   % 33:         j End_Professor %
00000235 : 434000ef;   % 36:         jal DIALOGO_PADRAO %
00000236 : 00812303;   % 39:     lw t1, 8(sp) %
00000237 : 00412283;   % 40:     lw t0, 4(sp) %
00000238 : 00012083;   % 41:     lw ra, 0(sp) %
00000239 : 00c10113;   % 42:     addi sp, sp, 12 %
0000023a : 00008067;   % 43:     ret %
0000023b : ffc10113;   % 49:     addi sp, sp -4 %
0000023c : 00112023;   % 50:     sw ra, 0(sp) %
0000023d : 0fc26517;   % 53:     la a0, LAMAR0 %
0000023e : 2cf50513;   % 53:  %
0000023f : 008005b3;   % 54:     mv a1, s0 %
00000240 : 00000633;   % 55:     mv a2, zero %
00000241 : 259040ef;   % 56:     jal PRINT_TEXT_BOX %
00000242 : 0fc26517;   % 59:     la a0, LAMAR2 %
00000243 : 2d250513;   % 59:  %
00000244 : 008005b3;   % 60:     mv a1, s0 %
00000245 : 00000633;   % 61:     mv a2, zero %
00000246 : 245040ef;   % 62:     jal PRINT_TEXT_BOX %
00000247 : 0fc26517;   % 65:     la a0, LAMAR4 %
00000248 : 2d650513;   % 65:  %
00000249 : 008005b3;   % 66:     mv a1, s0 %
0000024a : 0fc26617;   % 67:     la a2, LAMAR5 %
0000024b : 2ea60613;   % 67:  %
0000024c : 22d040ef;   % 68:     jal PRINT_TEXT_BOX %
0000024d : 0fc26517;   % 71:     la a0, LAMAR6 %
0000024e : 2f450513;   % 71:  %
0000024f : 008005b3;   % 72:     mv a1, s0 %
00000250 : 00000633;   % 73:     mv a2, zero %
00000251 : 219040ef;   % 74:     jal PRINT_TEXT_BOX %
00000252 : 0fc26517;   % 77:     la a0, LAMAR8 %
00000253 : 2f850513;   % 77:  %
00000254 : 008005b3;   % 78:     mv a1, s0 %
00000255 : 0fc26617;   % 79:     la a2, LAMAR9 %
00000256 : 31060613;   % 79:  %
00000257 : 201040ef;   % 80:     jal PRINT_TEXT_BOX %
00000258 : 0fc26517;   % 83:     la a0, LAMAR10 %
00000259 : 32850513;   % 83:  %
0000025a : 008005b3;   % 84:     mv a1, s0 %
0000025b : 00000633;   % 85:     mv a2, zero %
0000025c : 1ed040ef;   % 86:     jal PRINT_TEXT_BOX %
0000025d : 0fc26517;   % 89:     la a0, LAMAR12 %
0000025e : 33450513;   % 89:  %
0000025f : 008005b3;   % 90:     mv a1, s0 %
00000260 : 00000633;   % 91:     mv a2, zero %
00000261 : 1d9040ef;   % 92:     jal PRINT_TEXT_BOX %
00000262 : 0fc26517;   % 95:     la a0, LAMAR14 %
00000263 : 33950513;   % 95:  %
00000264 : 008005b3;   % 96:     mv a1, s0 %
00000265 : 0fc26617;   % 97:     la a2, LAMAR15 %
00000266 : 34c60613;   % 97:  %
00000267 : 1c1040ef;   % 98:     jal PRINT_TEXT_BOX %
00000268 : 0fc26517;   % 101:     la a0, LAMAR16 %
00000269 : 35050513;   % 101:  %
0000026a : 008005b3;   % 102:     mv a1, s0 %
0000026b : 00000633;   % 103:     mv a2, zero %
0000026c : 1ad040ef;   % 104:     jal PRINT_TEXT_BOX %
0000026d : 058000ef;   % 107:     jal MENU_ESCOLHA_POKEMONS_INICIAL %
0000026e : 0fc26517;   % 110:     la a0, LAMAR18 %
0000026f : 35350513;   % 110:  %
00000270 : 008005b3;   % 111:     mv a1, s0 %
00000271 : 0fc26617;   % 112:     la a2, LAMAR19 %
00000272 : 36760613;   % 112:  %
00000273 : 191040ef;   % 113:     jal PRINT_TEXT_BOX %
00000274 : 0fc26517;   % 116:     la a0, LAMAR20 %
00000275 : 37150513;   % 116:  %
00000276 : 008005b3;   % 117:     mv a1, s0 %
00000277 : 0fc26617;   % 118:     la a2, LAMAR21 %
00000278 : 38660613;   % 118:  %
00000279 : 179040ef;   % 119:     jal PRINT_TEXT_BOX %
0000027a : 0fc26517;   % 122:     la a0, LAMAR22 %
0000027b : 39850513;   % 122:  %
0000027c : 008005b3;   % 123:     mv a1, s0 %
0000027d : 0fc26617;   % 124:     la a2, LAMAR23 %
0000027e : 3aa60613;   % 124:  %
0000027f : 161040ef;   % 125:     jal PRINT_TEXT_BOX %
00000280 : 00012083;   % 128:     lw ra, 0(sp) %
00000281 : 00410113;   % 129:     addi sp, sp, 4 %
00000282 : 00008067;   % 132:     ret %
00000283 : fec10113;   % 138:     addi sp, sp, -20 %
00000284 : 00112023;   % 139:     sw ra, 0(sp) %
00000285 : 00512223;   % 140:     sw t0, 4(sp) %
00000286 : 00612423;   % 141:     sw t1, 8(sp) %
00000287 : 00712623;   % 142:     sw t2, 12(sp) %
00000288 : 01c12823;   % 143:     sw t3, 16(sp) %
00000289 : 00800533;   % 146:     mv a0, s0 %
0000028a : 1e5040ef;   % 147:     jal PRINT_BOX %
0000028b : 0fc2f517;   % 150:     la a0, n_squirtle %
0000028c : 90850513;   % 150:  %
0000028d : 02000593;   % 151:     li a1, 32 %
0000028e : 0cc00613;   % 152:     li a2, 204 %
0000028f : 000106b7;   % 153:     li a3, 0x0000FF00 %
00000290 : f0068693;   % 153:  %
00000291 : 00800733;   % 154:     mv a4, s0 %
00000292 : 28c040ef;   % 155:     jal PRINT_STRING_SAVE %
00000293 : 0fc2f517;   % 158:     la a0, n_bulbasaur %
00000294 : 8f450513;   % 158:  %
00000295 : 0c800593;   % 159:     li a1, 200 %
00000296 : 0cc00613;   % 160:     li a2, 204 %
00000297 : 000106b7;   % 161:     li a3, 0x0000FF00 %
00000298 : f0068693;   % 161:  %
00000299 : 00800733;   % 162:     mv a4, s0 %
0000029a : 26c040ef;   % 163:     jal PRINT_STRING_SAVE %
0000029b : 0fc2f517;   % 166:     la a0, n_vulpix %
0000029c : 8dd50513;   % 166:  %
0000029d : 02000593;   % 167:     li a1, 32 %
0000029e : 0dc00613;   % 168:     li a2, 220 %
0000029f : 000106b7;   % 169:     li a3, 0x0000FF00 %
000002a0 : f0068693;   % 169:  %
000002a1 : 00800733;   % 170:     mv a4, s0 %
000002a2 : 24c040ef;   % 171:     jal PRINT_STRING_SAVE %
000002a3 : 01600293;   % 174:     li t0, 22 %
000002a4 : 0cc00313;   % 175:     li t1, 204 %
000002a5 : 000003b3;   % 176:     mv t2, zero %
000002a6 : 00500533;   % 179:     mv a0, t0 %
000002a7 : 006005b3;   % 180:     mv a1, t1 %
000002a8 : 00010637;   % 181:     li a2, 0x0000FF0F %
000002a9 : f0f60613;   % 181:  %
000002aa : 329030ef;   % 182:     jal DRAW_SETA %
000002ab : 5f8040ef;   % 186:         jal KEY2 %
000002ac : 06100e13;   % 189:         li t3, 'a' %
000002ad : 03c50463;   % 190:         beq a0, t3, Move_Seta_Left4 %
000002ae : 06400e13;   % 193:         li t3, 'd' %
000002af : 05c50e63;   % 194:         beq a0, t3, Move_Seta_Right4 %
000002b0 : 07700e13;   % 197:         li t3, 'w' %
000002b1 : 09c50a63;   % 198:         beq a0, t3, Move_Seta_Up3 %
000002b2 : 07300e13;   % 201:         li t3, 's' %
000002b3 : 0dc50463;   % 202:         beq a0, t3, Move_Seta_Down3 %
000002b4 : 07a00e13;   % 205:         li t3, 'z' %
000002b5 : 11c50063;   % 206:         beq a0, t3, Escolher_Pokemon %
000002b6 : fd5ff06f;   % 208:         j Loop_Menu_Escolha_Pokemons_Inicial %
000002b7 : 01600e13;   % 212:             li t3, 22 %
000002b8 : fdc286e3;   % 213:             beq t0, t3, Loop_Menu_Escolha_Pokemons_Inicial %
000002b9 : 00500533;   % 216:             mv a0, t0 %
000002ba : 006005b3;   % 217:             mv a1, t1 %
000002bb : 00010637;   % 218:             li a2, 0x0000FFFF %
000002bc : fff60613;   % 218:  %
000002bd : 2dd030ef;   % 219:             jal DRAW_SETA %
000002be : 01600293;   % 221:             li t0, 22 %
000002bf : 00500533;   % 224:             mv a0, t0 %
000002c0 : 006005b3;   % 225:             mv a1, t1 %
000002c1 : 00010637;   % 226:             li a2, 0x0000FF0F %
000002c2 : f0f60613;   % 226:  %
000002c3 : 2c5030ef;   % 227:             jal DRAW_SETA %
000002c4 : fff38393;   % 229:             addi t2, t2, -1 %
000002c5 : f99ff06f;   % 230:             j Loop_Menu_Escolha_Pokemons_Inicial %
000002c6 : 0be00e13;   % 234:             li t3, 190 %
000002c7 : f9c288e3;   % 235:             beq t0, t3, Loop_Menu_Escolha_Pokemons_Inicial %
000002c8 : 00500533;   % 238:             mv a0, t0 %
000002c9 : 006005b3;   % 239:             mv a1, t1 %
000002ca : 00010637;   % 240:             li a2, 0x0000FFFF %
000002cb : fff60613;   % 240:  %
000002cc : 2a1030ef;   % 241:             jal DRAW_SETA %
000002cd : 0be00293;   % 243:             li t0, 190 %
000002ce : 0cc00313;   % 244:             li t1, 204 %
000002cf : 00500533;   % 246:             mv a0, t0 %
000002d0 : 006005b3;   % 247:             mv a1, t1 %
000002d1 : 00010637;   % 248:             li a2, 0x0000FF0F %
000002d2 : f0f60613;   % 248:  %
000002d3 : 285030ef;   % 249:             jal DRAW_SETA %
000002d4 : 00100393;   % 251:             li t2, 1 %
000002d5 : f59ff06f;   % 252:             j Loop_Menu_Escolha_Pokemons_Inicial %
000002d6 : 0cc00e13;   % 255:             li t3, 204 %
000002d7 : f5c308e3;   % 256:             beq t1, t3, Loop_Menu_Escolha_Pokemons_Inicial %
000002d8 : 00500533;   % 259:             mv a0, t0 %
000002d9 : 006005b3;   % 260:             mv a1, t1 %
000002da : 00010637;   % 261:             li a2, 0x0000FFFF %
000002db : fff60613;   % 261:  %
000002dc : 261030ef;   % 262:             jal DRAW_SETA %
000002dd : 0cc00313;   % 264:             li t1, 204 %
000002de : 00500533;   % 267:             mv a0, t0 %
000002df : 006005b3;   % 268:             mv a1, t1 %
000002e0 : 00010637;   % 269:             li a2, 0x0000FF0F %
000002e1 : f0f60613;   % 269:  %
000002e2 : 249030ef;   % 270:             jal DRAW_SETA %
000002e3 : 000003b3;   % 272:             mv t2, zero %
000002e4 : f1dff06f;   % 273:             j Loop_Menu_Escolha_Pokemons_Inicial %
000002e5 : 0dc00e13;   % 276:             li t3, 220 %
000002e6 : f1c30ae3;   % 277:             beq t1, t3, Loop_Menu_Escolha_Pokemons_Inicial %
000002e7 : 00500533;   % 280:             mv a0, t0 %
000002e8 : 006005b3;   % 281:             mv a1, t1 %
000002e9 : 00010637;   % 282:             li a2, 0x0000FFFF %
000002ea : fff60613;   % 282:  %
000002eb : 225030ef;   % 283:             jal DRAW_SETA %
000002ec : 01600293;   % 285:             li t0, 22 %
000002ed : 0dc00313;   % 286:             li t1, 220 %
000002ee : 00500533;   % 289:             mv a0, t0 %
000002ef : 006005b3;   % 290:             mv a1, t1 %
000002f0 : 00010637;   % 291:             li a2, 0x0000FF0F %
000002f1 : f0f60613;   % 291:  %
000002f2 : 209030ef;   % 292:             jal DRAW_SETA %
000002f3 : 00200393;   % 294:             li t2, 2 %
000002f4 : eddff06f;   % 295:             j Loop_Menu_Escolha_Pokemons_Inicial %
000002f5 : 00038a63;   % 299:             beqz t2, Escolher_Pedro_Sarue %
000002f6 : 00100e13;   % 302:             li t3, 1 %
000002f7 : 01c38e63;   % 303:             beq t2, t3, Escolher_Caramelo %
000002f8 : 00200e13;   % 306:             li t3, 2 %
000002f9 : 03c38263;   % 307:             beq t2, t3, Escolher_Pombo_Bebedouro %
000002fa : 0fc2e517;   % 311:             la a0, P_SARUE %
000002fb : 7a850513;   % 311:  %
000002fc : 098040ef;   % 312:             jal INIT_POKEMON_INICIAL %
000002fd : 0240006f;   % 313:             j End_Menu_Escolha_Pokemons_Inicial %
000002fe : 0fc2e517;   % 317:             la a0, P_CARAMELO %
000002ff : 7a450513;   % 317:  %
00000300 : 088040ef;   % 318:             jal INIT_POKEMON_INICIAL %
00000301 : 0140006f;   % 319:             j End_Menu_Escolha_Pokemons_Inicial %
00000302 : 0fc2e517;   % 323:             la a0, P_POMBO %
00000303 : 7ac50513;   % 323:  %
00000304 : 078040ef;   % 324:             jal INIT_POKEMON_INICIAL %
00000305 : 0040006f;   % 325:             j End_Menu_Escolha_Pokemons_Inicial %
00000306 : 0fc27297;   % 329:         la t0, estado_prof %
00000307 : 92828293;   % 329:  %
00000308 : 00100313;   % 330:         li t1, 1 %
00000309 : 00628023;   % 331:         sb t1, 0(t0) %
0000030a : 01012e03;   % 334:     lw t3, 16(sp) %
0000030b : 00c12383;   % 335:     lw t2, 12(sp) %
0000030c : 00812303;   % 336:     lw t1, 8(sp) %
0000030d : 00412283;   % 337:     lw t0, 4(sp) %
0000030e : 00012083;   % 338:     lw ra, 0(sp) %
0000030f : 01410113;   % 339:     addi sp, sp, 20 %
00000310 : 00008067;   % 341:     ret %
00000311 : ff410113;   % 347:     addi sp, sp, -12 %
00000312 : 00112023;   % 348:     sw ra, 0(sp) %
00000313 : 00512223;   % 349:     sw t0, 4(sp) %
00000314 : 00612423;   % 350:     sw t1, 8(sp) %
00000315 : 0fc26297;   % 353:     la t0, creditos %
00000316 : 62028293;   % 353:  %
00000317 : 0002c303;   % 354:     lbu t1, 0(t0) %
00000318 : 0c800393;   % 355:     li t2, 200 %
00000319 : 02735c63;   % 356:     bge t1, t2, Comprar_Passe %
0000031a : 0fc26517;   % 359:     la a0, LAMAR24 %
0000031b : 15250513;   % 359:  %
0000031c : 008005b3;   % 360:     mv a1, s0 %
0000031d : 0fc26617;   % 361:     la a2, LAMAR25 %
0000031e : 16a60613;   % 361:  %
0000031f : 6e0040ef;   % 362:     jal PRINT_TEXT_BOX %
00000320 : 0fc26517;   % 365:     la a0, LAMAR26 %
00000321 : 17550513;   % 365:  %
00000322 : 008005b3;   % 366:     mv a1, s0 %
00000323 : 0fc26617;   % 367:     la a2, LAMAR27 %
00000324 : 18e60613;   % 367:  %
00000325 : 6c8040ef;   % 368:     jal PRINT_TEXT_BOX %
00000326 : 05c0006f;   % 370:     j End_Dialogo_Passe %
00000327 : 0fc26517;   % 374:         la a0, LAMAR28 %
00000328 : 18950513;   % 374:  %
00000329 : 008005b3;   % 375:         mv a1, s0 %
0000032a : 0fc26617;   % 376:         la a2, LAMAR29 %
0000032b : 1a060613;   % 376:  %
0000032c : 6ac040ef;   % 377:         jal PRINT_TEXT_BOX %
0000032d : 0fc26517;   % 380:         la a0, LAMAR30 %
0000032e : 19d50513;   % 380:  %
0000032f : 008005b3;   % 381:         mv a1, s0 %
00000330 : 0fc26617;   % 382:         la a2, LAMAR31 %
00000331 : 1b360613;   % 382:  %
00000332 : 694040ef;   % 383:         jal PRINT_TEXT_BOX %
00000333 : f3830313;   % 386:         addi t1, t1, -200 %
00000334 : 00628023;   % 387:         sb t1, 0(t0) %
00000335 : 0fc26297;   % 390:         la t0, passe %
00000336 : 68b28293;   % 390:  %
00000337 : 00100313;   % 391:         li t1, 1 %
00000338 : 00628023;   % 392:         sb t1, 0(t0) %
00000339 : 0fc27297;   % 395:         la t0, estado_prof %
0000033a : 85c28293;   % 395:  %
0000033b : 00200313;   % 396:         li t1, 2 %
0000033c : 00628023;   % 397:         sb t1, 0(t0) %
0000033d : 00812303;   % 401:         lw t1, 8(sp) %
0000033e : 00412283;   % 402:         lw t0, 4(sp) %
0000033f : 00012083;   % 403:         lw ra, 0(sp) %
00000340 : 00c10113;   % 404:         addi sp, sp, 12 %
00000341 : 00008067;   % 407:         ret %
00000342 : ffc10113;   % 413:     addi sp, sp, -4 %
00000343 : 00112023;   % 414:     sw ra, 0(sp) %
00000344 : 0fc26517;   % 417:     la a0, LAMAR28 %
00000345 : 11550513;   % 417:  %
00000346 : 008005b3;   % 418:     mv a1, s0 %
00000347 : 0fc26617;   % 419:     la a2, LAMAR29 %
00000348 : 12c60613;   % 419:  %
00000349 : 638040ef;   % 420:     jal PRINT_TEXT_BOX %
0000034a : 0fc26517;   % 423:     la a0, LAMAR30 %
0000034b : 12950513;   % 423:  %
0000034c : 008005b3;   % 424:     mv a1, s0 %
0000034d : 0fc26617;   % 425:     la a2, LAMAR31 %
0000034e : 13f60613;   % 425:  %
0000034f : 620040ef;   % 426:     jal PRINT_TEXT_BOX %
00000350 : 00012083;   % 429:     lw ra, 0(sp) %
00000351 : 00410113;   % 430:     addi sp, sp, 4 %
00000352 : 00008067;   % 433:     ret %
00000353 : 0420d073;   % 107: 	csrwi ucause,1		# caso ocorra dropdown vai gerar exce��o de instru��o inv�lida %
00000354 : ff810113;   % 109: ExceptionHandling:	addi 	sp, sp, -8 	# salva 2 registradores utilizados para comparar ucause %
00000355 : 00512023;   % 110: 	sw 	t0, 0(sp) %
00000356 : 01a12223;   % 111: 	sw 	s10, 4(sp) %
00000357 : 04202d73;   % 113: 	csrr	s10,ucause     # le o ucause e salva em s10 %
00000358 : 00800293;   % 115: 	li 	t0, 8 %
00000359 : 01a29a63;   % 116: 	bne 	t0, s10, errorExceptions  	# N�o � ecall - nem precisa arrumar a pilha! %
0000035a : 00012283;   % 118: 	lw 	t0, 0(sp)			# � ecall %
0000035b : 00412d03;   % 119:     	lw 	s10, 4(sp)  			# recupera registradores usados %
0000035c : 00810113;   % 120:     	addi 	sp, sp, 8			 %
0000035d : 1e00006f;   % 121: 	j 	ecallException %
0000035e : 04302df3;   % 127: errorExceptions: csrr 	s11, utval      # le o utval da exce��o e salva em s11	 %
0000035f : 0c000513;   % 128: 	addi 	a0, zero, 0xc0 		## printa tela de azul %
00000360 : 00000593;   % 129: 	addi 	a1, zero, 0 %
00000361 : 09400893;   % 130: 	addi 	a7, zero, 148 %
00000362 : 2d8010ef;   % 131: 	jal 	clsCLS %
00000363 : 00000293;   % 134: End_Cause0:	li 	t0, 0 %
00000364 : 03a29263;   % 135: 		bne 	t0, s10, End_Cause1 %
00000365 : 0fc27517;   % 136: 		la 	a0, Cause0 %
00000366 : e1c50513;   % 136:  %
00000367 : 00000593;   % 137: 		li 	a1, 0 %
00000368 : 00100613;   % 138: 		li 	a2, 1 %
00000369 : 0000c6b7;   % 139: 		li 	a3, 0x0000c0ff %
0000036a : 0ff68693;   % 139:  %
0000036b : 109000ef;   % 140: 		jal	printString %
0000036c : 16c0006f;   % 141: 		j	End_uepc %
0000036d : 00100293;   % 144: End_Cause1:	li 	t0, 1 %
0000036e : 03a29263;   % 145: 		bne 	t0, s10, End_Cause2 %
0000036f : 0fc27517;   % 146: 		la 	a0, Cause1 %
00000370 : e1d50513;   % 146:  %
00000371 : 00000593;   % 147: 		li 	a1, 0 %
00000372 : 00100613;   % 148: 		li 	a2, 1 %
00000373 : 0000c6b7;   % 149: 		li 	a3, 0x0000c0ff %
00000374 : 0ff68693;   % 149:  %
00000375 : 0e1000ef;   % 150: 		jal 	printString	 %
00000376 : 1440006f;   % 151: 		j	End_uepc %
00000377 : 00200293;   % 154: End_Cause2:	li 	t0, 2 %
00000378 : 03a29663;   % 155: 		bne 	t0, s10, End_Cause4 %
00000379 : 0fc27517;   % 156: 		la 	a0, Cause2 %
0000037a : e1850513;   % 156:  %
0000037b : 00000593;   % 157: 		li 	a1, 0 %
0000037c : 00100613;   % 158: 		li 	a2, 1 %
0000037d : 0000c6b7;   % 159: 		li 	a3, 0x0000c0ff %
0000037e : 0ff68693;   % 159:  %
0000037f : 0b9000ef;   % 160: 		jal 	printString %
00000380 : 0fc27517;   % 162: 		la 	a0, Instr %
00000381 : ec250513;   % 162:  %
00000382 : 0e80006f;   % 163: 		j	End_utval %
00000383 : 00400293;   % 166: End_Cause4:	addi 	t0, zero, 4 %
00000384 : 03a29663;   % 167: 		bne	t0, s10, End_Cause5 %
00000385 : 0fc27517;   % 168: 		la 	a0, Cause4 %
00000386 : e0550513;   % 168:  %
00000387 : 00000593;   % 169: 		li 	a1, 0 %
00000388 : 00100613;   % 170: 		li 	a2, 1 %
00000389 : 0000c6b7;   % 171: 		li 	a3, 0x0000c0ff %
0000038a : 0ff68693;   % 171:  %
0000038b : 089000ef;   % 172: 		jal	printString %
0000038c : 0fc27517;   % 174: 		la 	a0, Addrs %
0000038d : e8a50513;   % 174:  %
0000038e : 0b80006f;   % 175: 		j	End_utval %
0000038f : 00500293;   % 178: End_Cause5:	li 	t0, 5 %
00000390 : 03a29663;   % 179: 		bne 	t0, s10, End_Cause6 %
00000391 : 0fc27517;   % 180: 		la 	a0, Cause5 %
00000392 : df750513;   % 180:  %
00000393 : 00000593;   % 181: 		li 	a1, 0 %
00000394 : 00100613;   % 182: 		li 	a2, 1 %
00000395 : 0000c6b7;   % 183: 		li 	a3, 0x0000c0ff %
00000396 : 0ff68693;   % 183:  %
00000397 : 059000ef;   % 184: 		jal 	printString	 %
00000398 : 0fc27517;   % 186: 		la 	a0, Addrs %
00000399 : e5a50513;   % 186:  %
0000039a : 0880006f;   % 187: 		j	End_utval %
0000039b : 00600293;   % 190: End_Cause6:	li 	t0, 6 %
0000039c : 03a29663;   % 191: 		bne 	t0, s10, End_Cause7 %
0000039d : 0fc27517;   % 192: 		la 	a0, Cause6 %
0000039e : de350513;   % 192:  %
0000039f : 00000593;   % 193: 		li 	a1, 0 %
000003a0 : 00100613;   % 194: 		li 	a2, 1 %
000003a1 : 0000c6b7;   % 195: 		li 	a3, 0x0000c0ff %
000003a2 : 0ff68693;   % 195:  %
000003a3 : 029000ef;   % 196: 		jal 	printString %
000003a4 : 0fc27517;   % 198: 		la 	a0, Addrs %
000003a5 : e2a50513;   % 198:  %
000003a6 : 0580006f;   % 199: 		j	End_utval %
000003a7 : 00700293;   % 202: End_Cause7:	li 	t0, 7 %
000003a8 : 03a29663;   % 203: 		bne 	t0, s10, End_CauseD %
000003a9 : 0fc27517;   % 204: 		la 	a0, Cause7 %
000003aa : dd650513;   % 204:  %
000003ab : 00000593;   % 205: 		li 	a1, 0 %
000003ac : 00100613;   % 206: 		li 	a2, 1 %
000003ad : 0000c6b7;   % 207: 		li 	a3, 0x0000c0ff %
000003ae : 0ff68693;   % 207:  %
000003af : 7f8000ef;   % 208: 		jal 	printString %
000003b0 : 0fc27517;   % 210: 		la 	a0, Addrs %
000003b1 : dfa50513;   % 210:  %
000003b2 : 0280006f;   % 211: 		j	End_utval %
000003b3 : 0fc27517;   % 214: End_CauseD: 	la 	a0, CauseD %
000003b4 : dcb50513;   % 214:  %
000003b5 : 00000593;   % 215: 		li 	a1, 0 %
000003b6 : 00100613;   % 216: 		li 	a2, 1 %
000003b7 : 0000c6b7;   % 217: 		li 	a3, 0x0000c0ff %
000003b8 : 0ff68693;   % 217:  %
000003b9 : 7d0000ef;   % 218: 		jal 	printString %
000003ba : 0fc27517;   % 220: 		la 	a0, Addrs %
000003bb : dd250513;   % 220:  %
000003bc : 00000593;   % 223: End_utval:	li 	a1, 0 %
000003bd : 01800613;   % 224: 		li 	a2, 24 %
000003be : 0000c6b7;   % 225: 		li 	a3, 0x000c0ff %
000003bf : 0ff68693;   % 225:  %
000003c0 : 7b4000ef;   % 226: 		jal	printString %
000003c1 : 01b00533;   % 228: 		mv 	a0, s11 %
000003c2 : 03800593;   % 229: 		li 	a1, 56 %
000003c3 : 01800613;   % 230: 		li 	a2, 24 %
000003c4 : 0000c6b7;   % 231: 		li 	a3, 0x0000c0ff %
000003c5 : 0ff68693;   % 231:  %
000003c6 : 728000ef;   % 232: 		jal 	printHex %
000003c7 : 0fc27517;   % 235: End_uepc: 	la 	a0, PC 		# Imprime o pc em que a exce��o ocorreu %
000003c8 : d9950513;   % 235:  %
000003c9 : 00000593;   % 236: 		li 	a1, 0 %
000003ca : 00c00613;   % 237: 		li 	a2, 12 %
000003cb : 0000c6b7;   % 238: 		li 	a3, 0x000c0ff %
000003cc : 0ff68693;   % 238:  %
000003cd : 780000ef;   % 239: 		jal 	printString %
000003ce : 04102573;   % 241: 		csrr 	a0, uepc	# Le uepc	 %
000003cf : 01c00593;   % 242: 		li	a1, 28 %
000003d0 : 00c00613;   % 243: 		li 	a2, 12 %
000003d1 : 0000c6b7;   % 244: 		li 	a3, 0x0000c0ff %
000003d2 : 0ff68693;   % 244:  %
000003d3 : 6f4000ef;   % 245: 		jal 	printHex	 %
000003d4 : 24c0006f;   % 247: 		j goToExit 		# encerra execu��o %
000003d5 : ef810113;   % 254: ecallException:   addi    sp, sp, -264              # Salva todos os registradores na pilha %
000003d6 : 00112023;   % 255:     sw     x1,    0(sp) %
000003d7 : 00212223;   % 256:     sw     x2,    4(sp) %
000003d8 : 00312423;   % 257:     sw     x3,    8(sp) %
000003d9 : 00412623;   % 258:     sw     x4,   12(sp) %
000003da : 00512823;   % 259:     sw     x5,   16(sp) %
000003db : 00612a23;   % 260:     sw     x6,   20(sp) %
000003dc : 00712c23;   % 261:     sw     x7,   24(sp) %
000003dd : 00812e23;   % 262:     sw     x8,   28(sp) %
000003de : 02912023;   % 263:     sw     x9,   32(sp) %
000003df : 02a12223;   % 264:     sw     x10,  36(sp) %
000003e0 : 02b12423;   % 265:     sw     x11,  40(sp) %
000003e1 : 02c12623;   % 266:     sw     x12,  44(sp) %
000003e2 : 02d12823;   % 267:     sw     x13,  48(sp) %
000003e3 : 02e12a23;   % 268:     sw     x14,  52(sp) %
000003e4 : 02f12c23;   % 269:     sw     x15,  56(sp) %
000003e5 : 03012e23;   % 270:     sw     x16,  60(sp) %
000003e6 : 05112023;   % 271:     sw     x17,  64(sp) %
000003e7 : 05212223;   % 272:     sw     x18,  68(sp) %
000003e8 : 05312423;   % 273:     sw     x19,  72(sp) %
000003e9 : 05412623;   % 274:     sw     x20,  76(sp) %
000003ea : 05512823;   % 275:     sw     x21,  80(sp) %
000003eb : 05612a23;   % 276:     sw     x22,  84(sp) %
000003ec : 05712c23;   % 277:     sw     x23,  88(sp) %
000003ed : 05812e23;   % 278:     sw     x24,  92(sp) %
000003ee : 07912023;   % 279:     sw     x25,  96(sp) %
000003ef : 07a12223;   % 280:     sw     x26, 100(sp) %
000003f0 : 07b12423;   % 281:     sw     x27, 104(sp) %
000003f1 : 07c12623;   % 282:     sw     x28, 108(sp) %
000003f2 : 07d12823;   % 283:     sw     x29, 112(sp) %
000003f3 : 07e12a23;   % 284:     sw     x30, 116(sp) %
000003f4 : 07f12c23;   % 285:     sw     x31, 120(sp) %
000003f5 : 30102c73;   % 286: <22> csrr s8, misa %
000003f6 : 020c7c13;   % 286: <23> andi s8, s8, 0x020 %
000003f7 : 080c0263;   % 286: <24> beqz s8, ecallException.pula %
000003f8 : 06012e27;   % 287:     fsw    f0,  124(sp) %
000003f9 : 08112027;   % 288:     fsw    f1,  128(sp) %
000003fa : 08212227;   % 289:     fsw    f2,  132(sp) %
000003fb : 08312427;   % 290:     fsw    f3,  136(sp) %
000003fc : 08412627;   % 291:     fsw    f4,  140(sp) %
000003fd : 08512827;   % 292:     fsw    f5,  144(sp) %
000003fe : 08612a27;   % 293:     fsw    f6,  148(sp) %
000003ff : 08712c27;   % 294:     fsw    f7,  152(sp) %
00000400 : 08812e27;   % 295:     fsw    f8,  156(sp) %
00000401 : 0a912027;   % 296:     fsw    f9,  160(sp) %
00000402 : 0aa12227;   % 297:     fsw    f10, 164(sp) %
00000403 : 0ab12427;   % 298:     fsw    f11, 168(sp) %
00000404 : 0ac12627;   % 299:     fsw    f12, 172(sp) %
00000405 : 0ad12827;   % 300:     fsw    f13, 176(sp) %
00000406 : 0ae12a27;   % 301:     fsw    f14, 180(sp) %
00000407 : 0af12c27;   % 302:     fsw    f15, 184(sp) %
00000408 : 0b012e27;   % 303:     fsw    f16, 188(sp) %
00000409 : 0d112027;   % 304:     fsw    f17, 192(sp) %
0000040a : 0d212227;   % 305:     fsw    f18, 196(sp) %
0000040b : 0d312427;   % 306:     fsw    f19, 200(sp) %
0000040c : 0d412627;   % 307:     fsw    f20, 204(sp) %
0000040d : 0d512827;   % 308:     fsw    f21, 208(sp) %
0000040e : 0d612a27;   % 309:     fsw    f22, 212(sp) %
0000040f : 0d712c27;   % 310:     fsw    f23, 216(sp) %
00000410 : 0d812e27;   % 311:     fsw    f24, 220(sp) %
00000411 : 0f912027;   % 312:     fsw    f25, 224(sp) %
00000412 : 0fa12227;   % 313:     fsw    f26, 228(sp) %
00000413 : 0fb12427;   % 314:     fsw    f27, 232(sp) %
00000414 : 0fc12627;   % 315:     fsw    f28, 236(sp) %
00000415 : 0fd12827;   % 316:     fsw    f29, 240(sp) %
00000416 : 0fe12a27;   % 317:     fsw    f30, 244(sp) %
00000417 : 0ff12c27;   % 318:     fsw    f31, 248(sp) %
00000418 : 000002b3;   % 321:     add     t0, zero, zero %
00000419 : 00000333;   % 322:     add     t1, zero, zero %
0000041a : 000003b3;   % 323:     add     t2, zero, zero %
0000041b : 00000e33;   % 324:     add     t3, zero, zero %
0000041c : 00000eb3;   % 325:     add     t4, zero, zero %
0000041d : 00000f33;   % 326:     add     t5, zero, zero %
0000041e : 00000fb3;   % 327:     add     t6, zero, zero %
0000041f : 00a00293;   % 332:     addi    t0, zero, 10 %
00000420 : 11128e63;   % 333:     beq     t0, a7, goToExit          # ecall exit %
00000421 : 06e00293;   % 334:     addi    t0, zero, 110 %
00000422 : 11128a63;   % 335:     beq     t0, a7, goToExit          # ecall exit %
00000423 : 00100293;   % 337:     addi    t0, zero, 1               # ecall 1 = print int %
00000424 : 13128263;   % 338:     beq     t0, a7, goToPrintInt %
00000425 : 06500293;   % 339:     addi    t0, zero, 101             # ecall 1 = print int %
00000426 : 11128e63;   % 340:     beq     t0, a7, goToPrintInt %
00000427 : 00200293;   % 342:     addi    t0, zero, 2               # ecall 2 = print float %
00000428 : 13128663;   % 343:     beq     t0, a7, goToPrintFloat %
00000429 : 06600293;   % 344:     addi    t0, zero, 102             # ecall 2 = print float %
0000042a : 13128263;   % 345:     beq     t0, a7, goToPrintFloat %
0000042b : 00400293;   % 347:     addi    t0, zero, 4               # ecall 4 = print string %
0000042c : 11128663;   % 348:     beq     t0, a7, goToPrintString %
0000042d : 06800293;   % 349:     addi    t0, zero, 104             # ecall 4 = print string %
0000042e : 11128263;   % 350:     beq     t0, a7, goToPrintString %
0000042f : 00500293;   % 352:     addi    t0, zero, 5               # ecall 5 = read int %
00000430 : 13128463;   % 353:     beq     t0, a7, goToReadInt %
00000431 : 06900293;   % 354:     addi    t0, zero, 105             # ecall 5 = read int %
00000432 : 13128063;   % 355:     beq     t0, a7, goToReadInt %
00000433 : 00600293;   % 357:     addi    t0, zero, 6               # ecall 6 = read float %
00000434 : 13128463;   % 358:     beq     t0, a7, goToReadFloat %
00000435 : 06a00293;   % 359:     addi    t0, zero, 106             # ecall 6 = read float %
00000436 : 13128063;   % 360:     beq     t0, a7, goToReadFloat %
00000437 : 00800293;   % 362:     addi    t0, zero, 8               # ecall 8 = read string %
00000438 : 11128863;   % 363:     beq     t0, a7, goToReadString %
00000439 : 06c00293;   % 364:     addi    t0, zero, 108             # ecall 8 = read string %
0000043a : 11128463;   % 365:     beq     t0, a7, goToReadString %
0000043b : 00b00293;   % 367:     addi    t0, zero, 11              # ecall 11 = print char %
0000043c : 0d128a63;   % 368:     beq     t0, a7, goToPrintChar %
0000043d : 06f00293;   % 369:     addi    t0, zero, 111             # ecall 11 = print char %
0000043e : 0d128663;   % 370:     beq     t0, a7, goToPrintChar %
0000043f : 00c00293;   % 372:     addi    t0, zero, 12              # ecall 12 = read char %
00000440 : 0f128063;   % 373:     beq     t0, a7, goToReadChar %
00000441 : 07000293;   % 374:     addi    t0, zero, 112             # ecall 12 = read char %
00000442 : 0d128c63;   % 375:     beq     t0, a7, goToReadChar %
00000443 : 01e00293;   % 377:     addi    t0, zero, 30              # ecall 30 = time %
00000444 : 11128e63;   % 378:     beq     t0, a7, goToTime %
00000445 : 08200293;   % 379:     addi    t0, zero, 130             # ecall 30 = time %
00000446 : 11128a63;   % 380:     beq     t0, a7, goToTime %
00000447 : 02000293;   % 382:     addi    t0, zero, 32              # ecall 32 = sleep %
00000448 : 11128a63;   % 383:     beq     t0, a7, goToSleep %
00000449 : 08400293;   % 384:     addi    t0, zero, 132             # ecall 32 = sleep %
0000044a : 11128663;   % 385:     beq     t0, a7, goToSleep %
0000044b : 02900293;   % 387:     addi    t0, zero, 41              # ecall 41 = random %
0000044c : 11128663;   % 388:     beq     t0, a7, goToRandom %
0000044d : 08d00293;   % 389:     addi    t0, zero, 141             # ecall 41 = random %
0000044e : 11128263;   % 390:     beq     t0, a7, goToRandom %
0000044f : 02200293;   % 392:     addi    t0, zero, 34       		# ecall 34 = print hex %
00000450 : 0d128663;   % 393:     beq     t0, a7, goToPrintHex %
00000451 : 08600293;   % 394:     addi    t0, zero, 134		# ecall 34 = print hex %
00000452 : 0d128263;   % 395:     beq     t0, a7, goToPrintHex %
00000453 : 01f00293;   % 397:     addi    t0, zero, 31              # ecall 31 = MIDI out %
00000454 : 0d128663;   % 398:     beq     t0, a7, goToMidiOut       # Generate tone and return immediately %
00000455 : 08300293;   % 399:     addi    t0, zero, 131             # ecall 31 = MIDI out %
00000456 : 0d128263;   % 400:     beq     t0, a7, goToMidiOut %
00000457 : 02100293;   % 402:     addi    t0, zero, 33              # ecall 33 = MIDI out synchronous %
00000458 : 0d128263;   % 403:     beq     t0, a7, goToMidiOutSync   # Generate tone and return upon tone completion %
00000459 : 08500293;   % 404:     addi    t0, zero, 133             # ecall 33 = MIDI out synchronous %
0000045a : 0b128e63;   % 405:     beq     t0, a7, goToMidiOutSync %
0000045b : 03000293;   % 407:     addi    t0, zero, 48              # ecall 48 = CLS %
0000045c : 0d128a63;   % 408:     beq     t0, a7, goToCLS %
0000045d : 09400293;   % 409:     addi    t0, zero, 148              # ecall 48 = CLS %
0000045e : 0d128663;   % 410:     beq     t0, a7, goToCLS %
0000045f : 02f00293;   % 412:     addi    t0, zero, 47              # ecall 47 = DrawLine %
00000460 : 0d128663;   % 413:     beq     t0, a7, goToBRES %
00000461 : 09300293;   % 414:     addi    t0, zero, 147              # ecall 47 = DrawLine %
00000462 : 0d128263;   % 415:     beq     t0, a7, goToBRES     %
00000463 : 02400293;   % 418:     addi    t0, zero, 36              # ecall 36 = PrintIntUnsigned %
00000464 : 09128263;   % 419:     beq     t0, a7, goToPrintIntUnsigned %
00000465 : 08800293;   % 420:     addi    t0, zero, 136             # ecall 36 = PrintIntUnsigned %
00000466 : 07128e63;   % 421:     beq     t0, a7, goToPrintIntUnsigned %
00000467 : 10008c37;   % 425: <9> li s8, 0x10008000	# carrega tp %
00000468 : 000c0c13;   % 425:  %
00000469 : 01819663;   % 425: <10> bne gp, s8, goToExitDE2	# Na DE1 gp = 0 ! Não tem segmento .extern %
0000046a : 00a00893;   % 426: 			li 	a7, 10			# chama o ecall normal do Rars %
0000046b : 00000073;   % 427: 			ecall				# exit ecall	 %
0000046c : 0000006f;   % 428: 	goToExitDE2:	j 	goToExitDE2		# trava o processador : N�o tem sistema operacional! %
0000046d : 210000ef;   % 430: 	goToPrintInt:	jal     printInt               	# chama printInt %
0000046e : 09c0006f;   % 431: 			j       endEcall %
0000046f : 4f8000ef;   % 433: 	goToPrintString: jal     printString           	# chama printString %
00000470 : 0940006f;   % 434: 			 j       endEcall %
00000471 : 538000ef;   % 436: 	goToPrintChar:	jal     printChar		# chama printChar %
00000472 : 08c0006f;   % 437: 			j       endEcall %
00000473 : 30102c73;   % 439: <22> csrr s8, misa %
00000474 : 020c7c13;   % 439: <23> andi s8, s8, 0x020 %
00000475 : 180c0663;   % 439: <24> beqz s8, NaoExisteEcall %
00000476 : 1a9000ef;   % 440: 			jal     printFloat		# chama printFloat %
00000477 : 0780006f;   % 441: 			j       endEcall %
00000478 : 658000ef;   % 443: 	goToReadChar:	jal     readChar              	# chama readChar %
00000479 : 0700006f;   % 444: 			j       endEcall %
0000047a : 780000ef;   % 446: 	goToReadInt:   	jal     readInt                 # chama readInt %
0000047b : 0680006f;   % 447: 			j       endEcall %
0000047c : 6e8000ef;   % 449: 	goToReadString:	jal     readString              # chama readString %
0000047d : 0600006f;   % 450: 			j       endEcall %
0000047e : 30102c73;   % 452: <22> csrr s8, misa %
0000047f : 020c7c13;   % 452: <23> andi s8, s8, 0x020 %
00000480 : 160c0063;   % 452: <24> beqz s8, NaoExisteEcall %
00000481 : 381000ef;   % 453: 			jal     readFloat               # chama readFloat %
00000482 : 04c0006f;   % 454: 			j       endEcall %
00000483 : 434000ef;   % 456: 	goToPrintHex:	jal     printHex                # chama printHex %
00000484 : 0440006f;   % 457: 			j       endEcall %
00000485 : 064010ef;   % 459: 	goToPrintIntUnsigned: 	jal	printIntUnsigned	# chama Print Unsigned Int %
00000486 : 03c0006f;   % 460: 				j	endEcall   %
00000487 : 05d000ef;   % 462: 	goToMidiOut:	jal     midiOut                 # chama MIDIout %
00000488 : 0340006f;   % 463: 			j       endEcall %
00000489 : 0cd000ef;   % 465: 	goToMidiOutSync: jal     midiOutSync   		# chama MIDIoutSync %
0000048a : 02c0006f;   % 466: 			 j       endEcall %
0000048b : 5bd000ef;   % 468: 	goToTime:	jal     Time                    # chama time %
0000048c : 0240006f;   % 469: 			j       endEcall %
0000048d : 5d9000ef;   % 471: 	goToSleep:	jal     Sleep                  	# chama sleep %
0000048e : 01c0006f;   % 472: 			j       endEcall %
0000048f : 5fd000ef;   % 474: 	goToRandom:	jal     Random                 	# chama random %
00000490 : 0140006f;   % 475: 			j       endEcall %
00000491 : 61d000ef;   % 477: 	goToCLS:	jal     clsCLS                 	# chama CLS %
00000492 : 00c0006f;   % 478: 			j       endEcall %
00000493 : 671000ef;   % 480: 	goToBRES:	jal     BRESENHAM               # chama BRESENHAM %
00000494 : 0040006f;   % 481: 			j       endEcall    	 %
00000495 : 00012083;   % 485: endEcall:  	lw	x1,   0(sp)  # recupera QUASE todos os registradores na pilha %
00000496 : 00412103;   % 486: 		lw	x2,   4(sp)	 %
00000497 : 00812183;   % 487: 		lw	x3,   8(sp)	 %
00000498 : 00c12203;   % 488: 		lw	x4,  12(sp)      	 %
00000499 : 01012283;   % 489: 		lw	x5,  16(sp)      	 %
0000049a : 01412303;   % 490: 		lw	x6,  20(sp)	 %
0000049b : 01812383;   % 491: 		lw	x7,  24(sp) %
0000049c : 01c12403;   % 492: 		lw	x8,  28(sp) %
0000049d : 02012483;   % 493: 		lw	x9,  32(sp) %
0000049e : 02c12603;   % 496: 		lw     x12, 44(sp) %
0000049f : 03012683;   % 497: 		lw     x13, 48(sp) %
000004a0 : 03412703;   % 498: 		lw     x14, 52(sp) %
000004a1 : 03812783;   % 499: 		lw     x15, 56(sp) %
000004a2 : 03c12803;   % 500: 		lw     x16, 60(sp) %
000004a3 : 04012883;   % 501: 		lw     x17, 64(sp) %
000004a4 : 04412903;   % 502: 		lw     x18, 68(sp) %
000004a5 : 04812983;   % 503: 		lw     x19, 72(sp) %
000004a6 : 04c12a03;   % 504: 		lw     x20, 76(sp) %
000004a7 : 05012a83;   % 505: 		lw     x21, 80(sp) %
000004a8 : 05412b03;   % 506: 		lw     x22, 84(sp) %
000004a9 : 05812b83;   % 507: 		lw     x23, 88(sp) %
000004aa : 05c12c03;   % 508: 		lw     x24, 92(sp) %
000004ab : 06012c83;   % 509: 		lw     x25, 96(sp) %
000004ac : 06412d03;   % 510: 		lw     x26, 100(sp) %
000004ad : 06812d83;   % 511: 		lw     x27, 104(sp) %
000004ae : 06c12e03;   % 512: 		lw     x28, 108(sp) %
000004af : 07012e83;   % 513: 		lw     x29, 112(sp) %
000004b0 : 07412f03;   % 514: 		lw     x30, 116(sp) %
000004b1 : 07812f83;   % 515: 		lw     x31, 120(sp) %
000004b2 : 30102c73;   % 516: <22> csrr s8, misa %
000004b3 : 020c7c13;   % 516: <23> andi s8, s8, 0x020 %
000004b4 : 060c0e63;   % 516: <24> beqz s8, endEcall.pula %
000004b5 : 07c12007;   % 517: 		flw    f0,  124(sp) %
000004b6 : 08012087;   % 518: 		flw    f1,  128(sp) %
000004b7 : 08412107;   % 519: 		flw    f2,  132(sp) %
000004b8 : 08812187;   % 520: 		flw    f3,  136(sp) %
000004b9 : 08c12207;   % 521: 		flw    f4,  140(sp) %
000004ba : 09012287;   % 522: 		flw    f5,  144(sp) %
000004bb : 09412307;   % 523: 		flw    f6,  148(sp) %
000004bc : 09812387;   % 524: 		flw    f7,  152(sp) %
000004bd : 09c12407;   % 525: 		flw    f8,  156(sp) %
000004be : 0a012487;   % 526: 		flw    f9,  160(sp) %
000004bf : 0ac12607;   % 529: 		flw    f12, 172(sp) %
000004c0 : 0b012687;   % 530: 		flw    f13, 176(sp) %
000004c1 : 0b412707;   % 531: 		flw    f14, 180(sp) %
000004c2 : 0b812787;   % 532: 		flw    f15, 184(sp) %
000004c3 : 0bc12807;   % 533: 		flw    f16, 188(sp) %
000004c4 : 0c012887;   % 534: 		flw    f17, 192(sp) %
000004c5 : 0c412907;   % 535: 		flw    f18, 196(sp) %
000004c6 : 0c812987;   % 536: 		flw    f19, 200(sp) %
000004c7 : 0cc12a07;   % 537: 		flw    f20, 204(sp) %
000004c8 : 0d012a87;   % 538: 		flw    f21, 208(sp) %
000004c9 : 0d412b07;   % 539: 		flw    f22, 212(sp) %
000004ca : 0d812b87;   % 540: 		flw    f23, 216(sp) %
000004cb : 0dc12c07;   % 541: 		flw    f24, 220(sp) %
000004cc : 0e012c87;   % 542: 		flw    f25, 224(sp) %
000004cd : 0e412d07;   % 543: 		flw    f26, 228(sp) %
000004ce : 0e812d87;   % 544: 		flw    f27, 232(sp) %
000004cf : 0ec12e07;   % 545: 		flw    f28, 236(sp) %
000004d0 : 0f012e87;   % 546: 		flw    f29, 240(sp) %
000004d1 : 0f412f07;   % 547: 		flw    f30, 244(sp) %
000004d2 : 0f812f87;   % 548: 		flw    f31, 248(sp) %
000004d3 : 10810113;   % 550: endEcall.pula:	addi    sp, sp, 264 %
000004d4 : 04102273;   % 552: 		csrr 	tp, uepc 	# le o valor de EPC salvo no registrador uepc (reg 65) %
000004d5 : 00420213;   % 553: 		addi 	tp, tp, 4	# soma 4 para obter a instrucao seguinte ao ecall %
000004d6 : 04121073;   % 554: 		csrw 	tp, uepc	# coloca no registrador uepc %
000004d7 : 00200073;   % 555: 		uret			# retorna PC=uepc %
000004d8 : 0c000513;   % 563: NaoExisteEcall: addi 	a0, zero, 0xc0 		## printa tela de azul %
000004d9 : 00000593;   % 564: 		addi 	a1, zero, 0 %
000004da : 01100833;   % 565: 		mv 	a6, a7 %
000004db : 09400893;   % 566: 		addi 	a7, zero, 148 %
000004dc : 4f1000ef;   % 567: 		jal 	clsCLS %
000004dd : 0fc27517;   % 568:   		la 	a0, CauseE %
000004de : 93350513;   % 568:  %
000004df : 00000593;   % 569: 		li 	a1, 0 %
000004e0 : 00100613;   % 570: 		li 	a2, 1 %
000004e1 : 0000c6b7;   % 571: 		li 	a3, 0x0000c0ff %
000004e2 : 0ff68693;   % 571:  %
000004e3 : 328000ef;   % 572: 		jal 	printString %
000004e4 : 01000533;   % 573: 		mv 	a0, a6 %
000004e5 : 06800593;   % 574: 		li 	a1, 104 %
000004e6 : 00100613;   % 575: 		li 	a2, 1 %
000004e7 : 0000c6b7;   % 576: 		li 	a3, 0x0000c0ff %
000004e8 : 0ff68693;   % 576:  %
000004e9 : 020000ef;   % 577: 		jal 	printInt %
000004ea : 04102573;   % 578: 		csrr	a0,uepc %
000004eb : 08800593;   % 579: 		li 	a1, 136 %
000004ec : 00100613;   % 580: 		li 	a2, 1 %
000004ed : 0000c6b7;   % 581: 		li 	a3, 0x0000c0ff %
000004ee : 0ff68693;   % 581:  %
000004ef : 284000ef;   % 582: 		jal 	printHex		 %
000004f0 : dddff06f;   % 583: 		j 	goToExit %
000004f1 : ffc10113;   % 595: printInt:	addi 	sp, sp, -4			# Aloca espaco %
000004f2 : 00112023;   % 596: 		sw 	ra, 0(sp)			# salva ra %
000004f3 : 0fc26297;   % 597: 		la 	t0, TempBuffer			# carrega o Endereco do Buffer da String %
000004f4 : 59c28293;   % 597:  %
000004f5 : 00055a63;   % 599: 		bge 	a0, zero, ehposprintInt		# Se eh positvo %
000004f6 : 02d00313;   % 600: 		li 	t1, '-'				# carrega o sinal - %
000004f7 : 00628023;   % 601: 		sb 	t1, 0(t0)			# coloca no buffer %
000004f8 : 00128293;   % 602: 		addi 	t0, t0, 1			# incrementa endereco do buffer %
000004f9 : 40a00533;   % 603: 		sub 	a0, zero, a0			# torna o numero positivo %
000004fa : 00a00393;   % 605: ehposprintInt:  li 	t2, 10				# carrega numero 10 %
000004fb : 00000313;   % 606: 		li 	t1, 0				# carrega numero de digitos com 0 %
000004fc : 30102c73;   % 608: <29> csrr s8, misa %
000004fd : 00cc5c13;   % 608: <30> srli s8, s8, 12 %
000004fe : 001c7c13;   % 608: <31> andi s8, s8, 0x001 %
000004ff : 1e0c1863;   % 608: <32> bnez s8, printInt.pula1 %
00000500 : ff410113;   % 609: <99> addi 	sp,sp,-12 %
00000501 : 00a12023;   % 609: <100> sw	a0,0(sp) %
00000502 : 00b12223;   % 609: <101> sw	a1,4(sp) %
00000503 : 00c12423;   % 609: <102> sw	a2,8(sp) %
00000504 : 00a00633;   % 609: <103> mv 	a2,a0 %
00000505 : 41f65593;   % 609: <104> srai 	a1,a2,31 %
00000506 : 00c00533;   % 609: <105> mv 	a0,a2 %
00000507 : 00058463;   % 609: <106> beqz 	a1,div10.pula1_M6 %
00000508 : 40c00533;   % 609: <107> neg 	a0,a2 %
00000509 : ff010113;   % 609: <65> addi 	sp, sp, -16 %
0000050a : 00a12023;   % 609: <66> sw	a0, 0(sp) %
0000050b : 00e12223;   % 609: <67> sw	a4, 4(sp) %
0000050c : 00f12423;   % 609: <68> sw	a5, 8(sp) %
0000050d : 00112623;   % 609: <69> sw	ra, 12(sp) %
0000050e : 00a00533;   % 609: <70> mv 	a0, a0 %
0000050f : 00155713;   % 609: <71> srli    a4,a0,1 %
00000510 : 00255793;   % 609: <72> srli    a5,a0,2 %
00000511 : 00f707b3;   % 609: <73> add     a5,a4,a5 %
00000512 : 0047d713;   % 609: <74> srli    a4,a5,4 %
00000513 : 00f70733;   % 609: <75> add     a4,a4,a5 %
00000514 : 00875793;   % 609: <76> srli    a5,a4,8 %
00000515 : 00e78733;   % 609: <77> add     a4,a5,a4 %
00000516 : 01075793;   % 609: <78> srli    a5,a4,16 %
00000517 : 00e787b3;   % 609: <79> add     a5,a5,a4 %
00000518 : 0037d793;   % 609: <80> srli    a5,a5,3 %
00000519 : 00279713;   % 609: <81> slli    a4,a5,2 %
0000051a : 00f70733;   % 609: <82> add     a4,a4,a5 %
0000051b : 00171713;   % 609: <83> slli    a4,a4,1 %
0000051c : 40e50533;   % 609: <84> sub     a0,a0,a4 %
0000051d : 00a53513;   % 609: <85> sltiu   a0,a0,10 %
0000051e : 00154513;   % 609: <86> xori    a0,a0,1 %
0000051f : 00f50533;   % 609: <87> add     a0,a0,a5 %
00000520 : 04051073;   % 609: <88> csrw	a0,uscratch %
00000521 : 00012503;   % 609: <89> lw	a0, 0(sp) %
00000522 : 00412703;   % 609: <90> lw	a4, 4(sp) %
00000523 : 00812783;   % 609: <91> lw	a5, 8(sp) %
00000524 : 00c12083;   % 609: <92> lw	ra, 12(sp) %
00000525 : 01010113;   % 609: <93> addi 	sp, sp, 16 %
00000526 : 04002ef3;   % 609: <94> csrr	t4,uscratch %
00000527 : 00058463;   % 609: <109> beqz 	a1,div10.pula2_M6 %
00000528 : 41d00eb3;   % 609: <110> neg 	t4,t4 %
00000529 : 040e9073;   % 609: <111> div10.pula2_M6:	csrw	t4,uscratch %
0000052a : 00012503;   % 609: <112> lw	a0,0(sp) %
0000052b : 00412583;   % 609: <113> lw 	a1,4(sp) %
0000052c : 00812603;   % 609: <114> lw	a2,8(sp) %
0000052d : 00c10113;   % 609: <115> addi 	sp,sp,12 %
0000052e : 04002ef3;   % 609: <116> csrr	t4,uscratch %
0000052f : ff010113;   % 610: <145> addi 	sp,sp,-16 %
00000530 : 00a12023;   % 610: <146> sw	a0,0(sp) %
00000531 : 00b12223;   % 610: <147> sw	a1,4(sp) %
00000532 : 00c12423;   % 610: <148> sw	a2,8(sp) %
00000533 : 00d12623;   % 610: <149> sw	a3,12(sp) %
00000534 : 00a006b3;   % 610: <151> mv 	a3,a0 %
00000535 : 00a00613;   % 610: <152> li 	a2,10 %
00000536 : ff410113;   % 610: <99> addi 	sp,sp,-12 %
00000537 : 00a12023;   % 610: <100> sw	a0,0(sp) %
00000538 : 00b12223;   % 610: <101> sw	a1,4(sp) %
00000539 : 00c12423;   % 610: <102> sw	a2,8(sp) %
0000053a : 00d00633;   % 610: <103> mv 	a2,a3 %
0000053b : 41f65593;   % 610: <104> srai 	a1,a2,31 %
0000053c : 00c00533;   % 610: <105> mv 	a0,a2 %
0000053d : 00058463;   % 610: <106> beqz 	a1,div10.pula1_M9 %
0000053e : 40c00533;   % 610: <107> neg 	a0,a2 %
0000053f : ff010113;   % 610: <65> addi 	sp, sp, -16 %
00000540 : 00a12023;   % 610: <66> sw	a0, 0(sp) %
00000541 : 00e12223;   % 610: <67> sw	a4, 4(sp) %
00000542 : 00f12423;   % 610: <68> sw	a5, 8(sp) %
00000543 : 00112623;   % 610: <69> sw	ra, 12(sp) %
00000544 : 00a00533;   % 610: <70> mv 	a0, a0 %
00000545 : 00155713;   % 610: <71> srli    a4,a0,1 %
00000546 : 00255793;   % 610: <72> srli    a5,a0,2 %
00000547 : 00f707b3;   % 610: <73> add     a5,a4,a5 %
00000548 : 0047d713;   % 610: <74> srli    a4,a5,4 %
00000549 : 00f70733;   % 610: <75> add     a4,a4,a5 %
0000054a : 00875793;   % 610: <76> srli    a5,a4,8 %
0000054b : 00e78733;   % 610: <77> add     a4,a5,a4 %
0000054c : 01075793;   % 610: <78> srli    a5,a4,16 %
0000054d : 00e787b3;   % 610: <79> add     a5,a5,a4 %
0000054e : 0037d793;   % 610: <80> srli    a5,a5,3 %
0000054f : 00279713;   % 610: <81> slli    a4,a5,2 %
00000550 : 00f70733;   % 610: <82> add     a4,a4,a5 %
00000551 : 00171713;   % 610: <83> slli    a4,a4,1 %
00000552 : 40e50533;   % 610: <84> sub     a0,a0,a4 %
00000553 : 00a53513;   % 610: <85> sltiu   a0,a0,10 %
00000554 : 00154513;   % 610: <86> xori    a0,a0,1 %
00000555 : 00f50533;   % 610: <87> add     a0,a0,a5 %
00000556 : 04051073;   % 610: <88> csrw	a0,uscratch %
00000557 : 00012503;   % 610: <89> lw	a0, 0(sp) %
00000558 : 00412703;   % 610: <90> lw	a4, 4(sp) %
00000559 : 00812783;   % 610: <91> lw	a5, 8(sp) %
0000055a : 00c12083;   % 610: <92> lw	ra, 12(sp) %
0000055b : 01010113;   % 610: <93> addi 	sp, sp, 16 %
0000055c : 04002573;   % 610: <94> csrr	a0,uscratch %
0000055d : 00058463;   % 610: <109> beqz 	a1,div10.pula2_M9 %
0000055e : 40a00533;   % 610: <110> neg 	a0,a0 %
0000055f : 04051073;   % 610: <111> div10.pula2_M9:	csrw	a0,uscratch %
00000560 : 00012503;   % 610: <112> lw	a0,0(sp) %
00000561 : 00412583;   % 610: <113> lw 	a1,4(sp) %
00000562 : 00812603;   % 610: <114> lw	a2,8(sp) %
00000563 : 00c10113;   % 610: <115> addi 	sp,sp,12 %
00000564 : 04002573;   % 610: <116> csrr	a0,uscratch %
00000565 : ff410113;   % 610: <45> addi 	sp, sp, -12 %
00000566 : 00a12023;   % 610: <46> sw	a0, 0(sp) %
00000567 : 00b12223;   % 610: <47> sw	a1, 4(sp) %
00000568 : 00112423;   % 610: <48> sw	ra, 8(sp) %
00000569 : 00a00533;   % 610: <50> mv 	a0, a0 %
0000056a : 00c005b3;   % 610: <51> mv 	a1, a2 %
0000056b : 6ad000ef;   % 610: <52> jal 	__mulsi3 %
0000056c : 04051073;   % 610: <53> csrw	a0,uscratch %
0000056d : 00012503;   % 610: <55> lw	a0, 0(sp) %
0000056e : 00412583;   % 610: <56> lw	a1, 4(sp) %
0000056f : 00812083;   % 610: <57> lw	ra, 8(sp) %
00000570 : 00c10113;   % 610: <58> addi 	sp, sp, 12 %
00000571 : 040025f3;   % 610: <59> csrr	a1,uscratch %
00000572 : 40b68e33;   % 610: <155> sub 	t3,a3,a1 %
00000573 : 040e1073;   % 610: <157> csrw	t3,uscratch %
00000574 : 00012503;   % 610: <158> lw	a0,0(sp) %
00000575 : 00412583;   % 610: <159> lw 	a1,4(sp) %
00000576 : 00812603;   % 610: <160> lw	a2,8(sp) %
00000577 : 00c12683;   % 610: <161> lw 	a3,12(sp) %
00000578 : 01010113;   % 610: <162> addi 	sp,sp,16 %
00000579 : 04002e73;   % 610: <163> csrr	t3,uscratch %
0000057a : 00c0006f;   % 611: 		j 	printInt.pula1d %
0000057b : 02754eb3;   % 612: printInt.pula1:	div 	t4, a0, t2			# divide por 10 (quociente) %
0000057c : 02756e33;   % 613: 		rem 	t3, a0, t2			# resto %
0000057d : ffc10113;   % 614: printInt.pula1d:addi 	sp, sp, -4			# aloca espaco na pilha %
0000057e : 01c12023;   % 615: 		sw 	t3, 0(sp)			# coloca resto na pilha %
0000057f : 01d00533;   % 616: 		mv 	a0, t4				# atualiza o numero com o quociente %
00000580 : 00130313;   % 617: 		addi 	t1, t1, 1			# incrementa o contador de digitos %
00000581 : de0516e3;   % 618: 		bne 	a0, zero, loop1printInt		# verifica se o numero eh zero %
00000582 : 00012383;   % 620: loop2printInt:	lw 	t2, 0(sp)			# le digito da pilha %
00000583 : 00410113;   % 621: 		addi 	sp, sp, 4			# libera espaco %
00000584 : 03038393;   % 622: 		addi 	t2, t2, 48			# converte o digito para ascii %
00000585 : 00728023;   % 623: 		sb 	t2, 0(t0)			# coloca caractere no buffer %
00000586 : 00128293;   % 624: 		addi 	t0, t0, 1			# incrementa endereco do buffer %
00000587 : fff30313;   % 625: 		addi 	t1, t1, -1			# decrementa contador de digitos %
00000588 : fe0314e3;   % 626: 		bne 	t1, zero, loop2printInt		# eh o ultimo? %
00000589 : 00028023;   % 627: 		sb 	zero, 0(t0)			# insere \NULL na string %
0000058a : 0fc26517;   % 629: 		la 	a0, TempBuffer			# Endereco do buffer da srting %
0000058b : 34050513;   % 629:  %
0000058c : 084000ef;   % 630: 		jal 	printString			# chama o print string %
0000058d : 00012083;   % 632: 		lw 	ra, 0(sp)			# recupera a %
0000058e : 00410113;   % 633: 		addi 	sp, sp, 4			# libera espaco %
0000058f : 00008067;   % 634: fimprintInt:	ret					# retorna %
00000590 : ffc10113;   % 646: printHex:	addi    sp, sp, -4    		# aloca espaco %
00000591 : 00112023;   % 647:     		sw      ra, 0(sp)		# salva ra %
00000592 : 00a002b3;   % 648: 		mv 	t0, a0			# Inteiro de 32 bits a ser impresso em Hexa %
00000593 : 0fc26317;   % 649: 		la 	t1, TabelaHexASCII	# endereco da tabela HEX->ASCII %
00000594 : 51c30313;   % 649:  %
00000595 : 0fc26397;   % 650: 		la 	t2, TempBuffer		# onde a string sera montada %
00000596 : 31438393;   % 650:  %
00000597 : 03000e13;   % 652: 		li 	t3,'0'			# Caractere '0' %
00000598 : 01c38023;   % 653: 		sb 	t3,0(t2)		# Escreve '0' no Buffer da String %
00000599 : 07800e13;   % 654: 		li 	t3,'x'			# Caractere 'x' %
0000059a : 01c380a3;   % 655: 		sb 	t3,1(t2)		# Escreve 'x' no Buffer da String %
0000059b : 00238393;   % 656: 		addi 	t2,t2,2			# novo endereco inicial da string %
0000059c : 01c00e13;   % 658: 		li 	t3, 28			# contador de nibble   inicio = 28 %
0000059d : 020e4263;   % 659: loopprintHex:	blt 	t3, zero, fimloopprintHex	# terminou? t3<0? %
0000059e : 01c2deb3;   % 660: 		srl 	t4, t0, t3		# desloca o nibble para direita %
0000059f : 00fefe93;   % 661: 		andi 	t4, t4, 0x000F		# mascara o nibble	 %
000005a0 : 01d30eb3;   % 662: 		add 	t4, t1, t4		# endereco do ascii do nibble %
000005a1 : 000e8e83;   % 663: 		lb 	t4, 0(t4)		# le ascii do nibble %
000005a2 : 01d38023;   % 664: 		sb 	t4, 0(t2)		# armazena o ascii do nibble no buffer da string %
000005a3 : 00138393;   % 665: 		addi 	t2, t2, 1		# incrementa o endereco do buffer %
000005a4 : ffce0e13;   % 666: 		addi 	t3, t3, -4		# decrementa o numero do nibble %
000005a5 : fe1ff06f;   % 667: 		j 	loopprintHex %
000005a6 : 00038023;   % 669: fimloopprintHex: sb 	zero,0(t2)		# grava \null na string %
000005a7 : 0fc26517;   % 670: 		la 	a0, TempBuffer		# Argumento do print String %
000005a8 : 2cc50513;   % 670:  %
000005a9 : 010000ef;   % 671:     		jal	printString		# Chama o print string %
000005aa : 00012083;   % 673: 		lw 	ra, 0(sp)		# recupera ra %
000005ab : 00410113;   % 674: 		addi 	sp, sp, 4		# libera espaco %
000005ac : 00008067;   % 675: fimprintHex:	ret				# retorna %
000005ad : ff810113;   % 686: printString:	addi	sp, sp, -8			# aloca espaco %
000005ae : 00112023;   % 687:     		sw	ra, 0(sp)			# salva ra %
000005af : 00812223;   % 688:     		sw	s0, 4(sp)			# salva s0 %
000005b0 : 00a00433;   % 689:     		mv	s0, a0              		# s0 = endereco do caractere na string %
000005b1 : 00040503;   % 691: loopprintString:lb	a0, 0(s0)                 	# le em a0 o caracter a ser impresso %
000005b2 : 02050263;   % 693:     		beq     a0, zero, fimloopprintString	# string ASCIIZ termina com NULL %
000005b3 : 030000ef;   % 695:     		jal     printChar       		# imprime char %
000005b4 : 00858593;   % 697: 		addi    a1, a1, 8                 	# incrementa a coluna %
000005b5 : 13900f93;   % 698: 		li 	t6, 313		 %
000005b6 : 01f5c663;   % 699: 		blt	a1, t6, NaoPulaLinha	    	# se ainda tiver lugar na linha %
000005b7 : 00860613;   % 700:     		addi    a2, a2, 8                 	# incrementa a linha %
000005b8 : 000005b3;   % 701:     		mv    	a1, zero			# volta a coluna zero %
000005b9 : 00140413;   % 703: NaoPulaLinha:	addi    s0, s0, 1			# proximo caractere %
000005ba : fddff06f;   % 704:     		j       loopprintString       		# volta ao loop %
000005bb : 00012083;   % 706: fimloopprintString:	lw      ra, 0(sp)    		# recupera ra %
000005bc : 00012403;   % 707: 			lw 	s0, 0(sp)		# recupera s0 original %
000005bd : 00810113;   % 708:     			addi    sp, sp, 8		# libera espaco %
000005be : 00008067;   % 709: fimprintString:	ret      	    			# retorna %
000005bf : 0ff00e93;   % 731: printChar:	li 	t4, 0xFF	# t4 temporario %
000005c0 : 008e9e93;   % 732: 		slli 	t4, t4, 8	# t4 = 0x0000FF00 (no RARS, nao podemos fazer diretamente "andi rd, rs1, 0xFF00") %
000005c1 : 01d6ff33;   % 733: 		and    	t5, a3, t4   	# t5 obtem cor de fundo %
000005c2 : 008f5f13;   % 734:     		srli	t5, t5, 8	# numero da cor de fundo %
000005c3 : 0ff6ff93;   % 735: 		andi   	t6, a3, 0xFF    # t6 obtem cor de frente %
000005c4 : 02000213;   % 737: 		li 	tp, ' ' %
000005c5 : 00454863;   % 738: 		blt 	a0, tp, printChar.NAOIMPRIMIVEL	# ascii menor que 32 nao eh imprimivel %
000005c6 : 07e00213;   % 739: 		li 	tp, '~' %
000005c7 : 00a24463;   % 740: 		bgt	a0, tp, printChar.NAOIMPRIMIVEL	# ascii Maior que 126  nao eh imprimivel %
000005c8 : 0080006f;   % 741:     		j       printChar.IMPRIMIVEL %
000005c9 : 02000513;   % 743: printChar.NAOIMPRIMIVEL: li      a0, 32		# Imprime espaco %
000005ca : 14000213;   % 745: printChar.IMPRIMIVEL:	li	tp, 320		# Num colunas 320 %
000005cb : 30102c73;   % 746: <29> csrr s8, misa %
000005cc : 00cc5c13;   % 746: <30> srli s8, s8, 12 %
000005cd : 001c7c13;   % 746: <31> andi s8, s8, 0x001 %
000005ce : 020c1e63;   % 746: <32> bnez s8, printChar.mul1 %
000005cf : ff410113;   % 747: <45> addi 	sp, sp, -12 %
000005d0 : 00a12023;   % 747: <46> sw	a0, 0(sp) %
000005d1 : 00b12223;   % 747: <47> sw	a1, 4(sp) %
000005d2 : 00112423;   % 747: <48> sw	ra, 8(sp) %
000005d3 : 00400533;   % 747: <50> mv 	a0, tp %
000005d4 : 00c005b3;   % 747: <51> mv 	a1, a2 %
000005d5 : 505000ef;   % 747: <52> jal 	__mulsi3 %
000005d6 : 04051073;   % 747: <53> csrw	a0,uscratch %
000005d7 : 00012503;   % 747: <55> lw	a0, 0(sp) %
000005d8 : 00412583;   % 747: <56> lw	a1, 4(sp) %
000005d9 : 00812083;   % 747: <57> lw	ra, 8(sp) %
000005da : 00c10113;   % 747: <58> addi 	sp, sp, 12 %
000005db : 04002ef3;   % 747: <59> csrr	t4,uscratch %
000005dc : 0080006f;   % 748: 			j printChar.mul1d %
000005dd : 02c20eb3;   % 749: printChar.mul1:		mul     t4, tp, a2			# multiplica a2x320  t4 = coordenada y %
000005de : 00be8eb3;   % 750: printChar.mul1d:	add     t4, t4, a1               	# t4 = 320*y + x %
000005df : 007e8e93;   % 751: 			addi    t4, t4, 7                 	# t4 = 320*y + (x+7) %
000005e0 : ff000237;   % 752: 			li      tp, 0xFF000000          	# Endereco de inicio da memoria VGA0 %
000005e1 : 00020213;   % 752:  %
000005e2 : 00070663;   % 753: 			beq 	a4, zero, printChar.PULAFRAME		# Verifica qual o frame a ser usado em a4 %
000005e3 : ff100237;   % 754: 			li      tp, 0xFF100000          	# Endereco de inicio da memoria VGA1 %
000005e4 : 00020213;   % 754:  %
000005e5 : 004e8eb3;   % 755: printChar.PULAFRAME:	add     t4, t4, tp               	# t4 = endereco de impressao do ultimo pixel da primeira linha do char %
000005e6 : fe050393;   % 756: 			addi    t2, a0, -32               	# indice do char na memoria %
000005e7 : 00339393;   % 757: 			slli    t2, t2, 3                 	# offset em bytes em relacao ao endereco inicial %
000005e8 : 0fc26e17;   % 758: 			la      t3, LabelTabChar		# endereco dos caracteres na memoria %
000005e9 : da4e0e13;   % 758:  %
000005ea : 01c383b3;   % 759: 			add     t2, t2, t3               	# endereco do caractere na memoria %
000005eb : 0003ae03;   % 760: 			lw      t3, 0(t2)                 	# carrega a primeira word do char %
000005ec : 00400293;   % 761: 			li 	t0, 4				# i=4 %
000005ed : 02028e63;   % 763: printChar.forChar1I:	beq     t0, zero, printChar.endForChar1I # if(i == 0) end for i %
000005ee : 00800313;   % 764:     			addi    t1, zero, 8               	# j = 8 %
000005ef : 02030463;   % 766: printChar.forChar1J:	beq     t1, zero, printChar.endForChar1J # if(j == 0) end for j %
000005f0 : 001e7c93;   % 767:         		andi    s9, t3, 0x001			# primeiro bit do caracter %
000005f1 : 001e5e13;   % 768:         		srli    t3, t3, 1             		# retira o primeiro bit %
000005f2 : 000c8663;   % 769:         		beq     s9, zero, printChar.printCharPixelbg1	# pixel eh fundo? %
000005f3 : 01fe8023;   % 770:         		sb      t6, 0(t4)             		# imprime pixel com cor de frente %
000005f4 : 0080006f;   % 771:         		j       printChar.endCharPixel1 %
000005f5 : 01ee8023;   % 772: printChar.printCharPixelbg1:	sb      t5, 0(t4)                # imprime pixel com cor de fundo %
000005f6 : fff30313;   % 773: printChar.endCharPixel1: addi    t1, t1, -1                	# j-- %
000005f7 : fffe8e93;   % 774:     			addi    t4, t4, -1                	# t4 aponta um pixel para a esquerda %
000005f8 : fddff06f;   % 775:     			j       printChar.forChar1J		# vollta novo pixel %
000005f9 : fff28293;   % 777: printChar.endForChar1J: addi    t0, t0, -1 		# i-- %
000005fa : 148e8e93;   % 778:     			addi    t4, t4, 328           	# 2**12 + 8 %
000005fb : fc9ff06f;   % 779:     			j       printChar.forChar1I	# volta ao loop %
000005fc : 0043ae03;   % 781: printChar.endForChar1I:	lw      t3, 4(t2)           	# carrega a segunda word do char %
000005fd : 00400293;   % 782: 			li 	t0, 4			# i = 4 %
000005fe : 02028e63;   % 783: printChar.forChar2I:    beq     t0, zero, printChar.endForChar2I  # if(i == 0) end for i %
000005ff : 00800313;   % 784:     			addi    t1, zero, 8             # j = 8 %
00000600 : 02030463;   % 786: printChar.forChar2J:	beq	t1, zero, printChar.endForChar2J # if(j == 0) end for j %
00000601 : 001e7c93;   % 787:         		andi    s9, t3, 0x001	    		# pixel a ser impresso %
00000602 : 001e5e13;   % 788:         		srli    t3, t3, 1                 	# desloca para o proximo %
00000603 : 000c8663;   % 789:         		beq     s9, zero, printChar.printCharPixelbg2 # pixel eh fundo? %
00000604 : 01fe8023;   % 790:         		sb      t6, 0(t4)			# imprime cor frente %
00000605 : 0080006f;   % 791:         		j       printChar.endCharPixel2		# volta ao loop %
00000606 : 01ee8023;   % 793: printChar.printCharPixelbg2:	sb      t5, 0(t4)		# imprime cor de fundo %
00000607 : fff30313;   % 795: printChar.endCharPixel2:	addi    t1, t1, -1		# j-- %
00000608 : fffe8e93;   % 796:     				addi    t4, t4, -1              # t4 aponta um pixel para a esquerda %
00000609 : fddff06f;   % 797:     				j       printChar.forChar2J %
0000060a : fff28293;   % 799: printChar.endForChar2J:	addi	t0, t0, -1 		# i-- %
0000060b : 148e8e93;   % 800:     			addi    t4, t4, 328		# %
0000060c : fc9ff06f;   % 801:     			j       printChar.forChar2I	# volta ao loop %
0000060d : 00008067;   % 803: printChar.endForChar2I:	ret				# retorna %
0000060e : 00000013;   % 812: readChar: 		nop %
0000060f : ff2002b7;   % 816: readCharKDMMIO:		li 	t0, 0xFF200000			# Execucao com Polling do KD MMIO %
00000610 : 00028293;   % 816:  %
00000611 : 0002a503;   % 818: loopReadCharKDMMIO:  	lw     	a0, 0(t0)   			# le o bit de flag do teclado %
00000612 : 00157513;   % 819: 			andi 	a0, a0, 0x0001			# mascara bit 0 %
00000613 : fe050ce3;   % 820: 			beqz    a0, loopReadCharKDMMIO  	# testa se uma tecla foi pressionada %
00000614 : 0042a503;   % 821:    			lw 	a0, 4(t0)			# le o ascii da tecla pressionada %
00000615 : 0800006f;   % 822: 			j fimreadChar				# fim Read Char %
00000616 : ff2002b7;   % 829: readCharDE2:  	li      t0, 0xFF200100 			# Endereco buffer0 %
00000617 : 10028293;   % 829:  %
00000618 : 0002a303;   % 830:     		lw     	t1, 0(t0)				# conteudo inicial do buffer %
00000619 : 0002a383;   % 832: loopReadChar:  	lw     	t2, 0(t0)   				# le buffer teclado %
0000061a : 00639663;   % 833: 		bne     t2, t1, buffermodificadoChar    	# testa se o buffer foi modificado %
0000061b : 00700333;   % 835: atualizaBufferChar:  mv t1, t2			# atualiza o buffer com o novo valor %
0000061c : ff5ff06f;   % 836:     		j       loopReadChar		# loop de principal de leitura  %
0000061d : 0ff00f13;   % 838: buffermodificadoChar:	li t5, 0xFF %
0000061e : 008f1f13;   % 839: 	slli 	t5, t5, 8			# t5 = 0x0000FF00 %
0000061f : 01e3fe33;   % 840: 	and    	t3, t2, t5 			# mascara o 2o scancode %
00000620 : 0000f237;   % 841: 	li 	tp, 0x0000F000 %
00000621 : 00020213;   % 841:  %
00000622 : 024e0063;   % 842: 	beq     t3, tp, teclasoltaChar		# eh 0xF0 no 2o scancode? tecla foi solta %
00000623 : 0ff00213;   % 843: 	li	tp, 0x000000FF %
00000624 : 0043fe33;   % 844: 	and	t3, t2, tp			# mascara 1o scancode	(essa podemos fazer diretamente) %
00000625 : 01200213;   % 845: 	li	tp, 0x00000012 %
00000626 : fc4e1ae3;   % 846:     	bne 	t3, tp, atualizaBufferChar	# nao eh o SHIFT que esta pressionado ? volta a ler  %
00000627 : 0fc26417;   % 847: 	la      s0, LabelScanCodeShift		# se for SHIFT que esta pressionado atualiza o endereco da tabel %
00000628 : 04640413;   % 847:  %
00000629 : fc9ff06f;   % 848:     	j       atualizaBufferChar		# volta a ler %
0000062a : 0ff3fe13;   % 850: teclasoltaChar:		andi t3, t2, 0x00FF		# mascara o 1o scancode %
0000062b : 08000213;   % 851: 	li	tp, 0x00000080 %
0000062c : fbc24ee3;   % 852:   	bgt	t3, tp, atualizaBufferChar		# se o scancode for > 0x80 entao nao eh imprimivel! %
0000062d : 01200213;   % 853:   	li	tp, 0x00000012 %
0000062e : 004e1863;   % 854: 	bne 	t3, tp, naoehshiftChar			# nao foi o shift que foi solto? entao processa %
0000062f : 0fc26417;   % 855: 	la 	s0, LabelScanCode			# shift foi solto atualiza o endereco da tabela %
00000630 : fa040413;   % 855:  %
00000631 : fa9ff06f;   % 856: 	j 	atualizaBufferChar			# volta a ler %
00000632 : 01c40e33;   % 858: naoehshiftChar:	   	add     t3, s0, t3              # endereco na tabela de scancode da tecla com ou sem shift %
00000633 : 000e0503;   % 859:     	lb      a0, 0(t3)				# le o ascii do caracter para a0 %
00000634 : f8050ee3;   % 860:     	beq     a0, zero, atualizaBufferChar		# se for caractere nao imprimivel volta a ler %
00000635 : 00008067;   % 862: fimreadChar: 	ret			# retorna %
00000636 : ff810113;   % 874: readString: 	addi 	sp, sp, -8			# reserva espaco na pilha %
00000637 : 00812223;   % 875: 		sw 	s0, 4(sp)			# salva s0 %
00000638 : 00112023;   % 876: 		sw 	ra, 0(sp)			# salva ra %
00000639 : 00000693;   % 877: 		li 	a3, 0				# zera o contador de caracteres digitados %
0000063a : 00a00933;   % 878: 		mv 	s2, a0				# salva o endereco inicial %
0000063b : 0fc26417;   % 879:     		la      s0, LabelScanCode      		# Endereco da tabela de scancode inicial para readChar %
0000063c : f7040413;   % 879:  %
0000063d : 04d58c63;   % 881: loopreadString: beq 	a1, a3, fimreadString   	# buffer cheio fim %
0000063e : ff810113;   % 883: 		addi 	sp, sp, -8 %
0000063f : 00112023;   % 884: 		sw 	ra, 0(sp)			# salva ra %
00000640 : 00a12223;   % 885: 		sw 	a0, 4(sp)			# salva a0 pois ele sera reescrito em readChar %
00000641 : f35ff0ef;   % 886: 		jal 	readChar			# le um caracter do teclado (retorno em a0) %
00000642 : 00a00fb3;   % 887: 		mv 	t6, a0				# t6 eh a letra lida em readChar %
00000643 : 00012083;   % 888: 		lw 	ra, 0(sp) %
00000644 : 00412503;   % 889: 		lw 	a0, 4(sp) %
00000645 : 00810113;   % 890: 		addi 	sp, sp, 8 %
00000646 : 00800213;   % 892: 		li 	tp, 0x08			 %
00000647 : 004f9c63;   % 893: 		bne	t6, tp, PulaBackSpace		# Se nao for BACKSPACE %
00000648 : fcd00ae3;   % 894: 		beq	zero, a3, loopreadString	# Se n�o tem nenhum caractere no buffer apenas volta a ler %
00000649 : fff68693;   % 895: 		addi	a3, a3, -1			# diminui contador %
0000064a : fff50513;   % 896: 		addi 	a0, a0, -1			# diminui endereco do buffer %
0000064b : 00050023;   % 897: 		sb 	zero, 0(a0)			# coloca zero no caractere anterior %
0000064c : fc5ff06f;   % 898: 		j loopreadString %
0000064d : 00a00213;   % 900: PulaBackSpace:	li	tp, 0x0A %
0000064e : 004f8a63;   % 901: 		beq 	t6, tp, fimreadString		# se for tecla ENTER fim %
0000064f : 01f50023;   % 902: 		sb 	t6, 0(a0)			# grava no buffer %
00000650 : 00168693;   % 903: 		addi 	a3, a3, 1			# incrementa contador %
00000651 : 00150513;   % 904: 		addi 	a0, a0, 1			# incrementa endereco no buffer %
00000652 : fadff06f;   % 905: 		j loopreadString			# volta a ler outro caractere %
00000653 : 00050023;   % 907: fimreadString: 	sb 	zero, 0(a0)			# grava NULL no buffer %
00000654 : fff50613;   % 908: 		addi 	a2, a0, -1			# Para que a2 tenha o endereco do ultimo caractere digitado %
00000655 : 01200533;   % 909: 		mv	a0, s2				# a0 volta a ter o endereco inicial da string %
00000656 : 00012083;   % 910: 		lw 	ra, 0(sp)			# recupera ra %
00000657 : 00412403;   % 911: 		lw	s0, 4(sp)			# recupera s0 %
00000658 : 00810113;   % 912: 		addi 	sp, sp, 8			# libera espaco %
00000659 : 00008067;   % 913: 		ret					# retorna %
0000065a : ffc10113;   % 922: readInt: 	addi 	sp,sp,-4		# reserva espaco na pilha %
0000065b : 00112023;   % 923: 	sw 	ra, 0(sp)			# salva ra %
0000065c : 0fc26517;   % 924: 	la 	a0, TempBuffer			# Endereco do buffer de string %
0000065d : ff850513;   % 924:  %
0000065e : 00a00593;   % 925: 	li 	a1, 10				# numero maximo de digitos %
0000065f : f5dff0ef;   % 926: 	jal 	readString			# le uma string de ate 10 digitos, a3 numero de digitos %
00000660 : 00c002b3;   % 927: 	mv 	t0, a2				# copia endereco do ultimo digito %
00000661 : 00a00393;   % 928: 	li 	t2, 10				# dez %
00000662 : 00100e13;   % 929: 	li 	t3, 1				# dezenas, centenas, etc %
00000663 : 00000533;   % 930: 	mv 	a0, zero			# zera o numero %
00000664 : 0c068e63;   % 932: loopReadInt: 	beq	a3,zero, fimReadInt	# Leu todos os digitos %
00000665 : 00028303;   % 933: 	lb 	t1, (t0)			# le um digito %
00000666 : 02d00213;   % 934: 	li	tp, 0x0000002D %
00000667 : 0c430663;   % 935: 	beq 	t1, tp, ehnegReadInt		# = '-' %
00000668 : 02b00213;   % 936: 	li	tp, 0x0000002B %
00000669 : 0c430463;   % 937: 	beq 	t1, tp, ehposReadInt		# = '+' %
0000066a : 03000213;   % 938: 	li	tp, 0x00000030 %
0000066b : 0a434c63;   % 939: 	blt 	t1, tp, naoehReadInt		# <'0' %
0000066c : 03900213;   % 940: 	li	tp, 0x00000039 %
0000066d : 0a624863;   % 941: 	bgt 	t1, tp, naoehReadInt		# >'9' %
0000066e : fd030313;   % 942: 	addi 	t1, t1, -48			# transforma ascii em numero %
0000066f : 30102c73;   % 943: <29> csrr s8, misa %
00000670 : 00cc5c13;   % 943: <30> srli s8, s8, 12 %
00000671 : 001c7c13;   % 943: <31> andi s8, s8, 0x001 %
00000672 : 020c1e63;   % 943: <32> bnez s8, readInt.mul1 %
00000673 : ff410113;   % 944: <45> addi 	sp, sp, -12 %
00000674 : 00a12023;   % 944: <46> sw	a0, 0(sp) %
00000675 : 00b12223;   % 944: <47> sw	a1, 4(sp) %
00000676 : 00112423;   % 944: <48> sw	ra, 8(sp) %
00000677 : 00600533;   % 944: <50> mv 	a0, t1 %
00000678 : 01c005b3;   % 944: <51> mv 	a1, t3 %
00000679 : 275000ef;   % 944: <52> jal 	__mulsi3 %
0000067a : 04051073;   % 944: <53> csrw	a0,uscratch %
0000067b : 00012503;   % 944: <55> lw	a0, 0(sp) %
0000067c : 00412583;   % 944: <56> lw	a1, 4(sp) %
0000067d : 00812083;   % 944: <57> lw	ra, 8(sp) %
0000067e : 00c10113;   % 944: <58> addi 	sp, sp, 12 %
0000067f : 04002373;   % 944: <59> csrr	t1,uscratch %
00000680 : 0080006f;   % 945: 	j readInt.mul1d %
00000681 : 03c30333;   % 946: readInt.mul1: 	mul 	t1, t1, t3			# multiplica por dezenas/centenas %
00000682 : 00650533;   % 947: readInt.mul1d:	add 	a0, a0, t1			# soma no numero %
00000683 : 30102c73;   % 948: <29> csrr s8, misa %
00000684 : 00cc5c13;   % 948: <30> srli s8, s8, 12 %
00000685 : 001c7c13;   % 948: <31> andi s8, s8, 0x001 %
00000686 : 020c1e63;   % 948: <32> bnez s8, readInt.mul2 %
00000687 : ff410113;   % 949: <45> addi 	sp, sp, -12 %
00000688 : 00a12023;   % 949: <46> sw	a0, 0(sp) %
00000689 : 00b12223;   % 949: <47> sw	a1, 4(sp) %
0000068a : 00112423;   % 949: <48> sw	ra, 8(sp) %
0000068b : 01c00533;   % 949: <50> mv 	a0, t3 %
0000068c : 007005b3;   % 949: <51> mv 	a1, t2 %
0000068d : 225000ef;   % 949: <52> jal 	__mulsi3 %
0000068e : 04051073;   % 949: <53> csrw	a0,uscratch %
0000068f : 00012503;   % 949: <55> lw	a0, 0(sp) %
00000690 : 00412583;   % 949: <56> lw	a1, 4(sp) %
00000691 : 00812083;   % 949: <57> lw	ra, 8(sp) %
00000692 : 00c10113;   % 949: <58> addi 	sp, sp, 12 %
00000693 : 04002e73;   % 949: <59> csrr	t3,uscratch %
00000694 : 0080006f;   % 950: 	j readInt.mul2d %
00000695 : 027e0e33;   % 951: readInt.mul2: 	mul 	t3, t3, t2			# proxima dezena/centena %
00000696 : fff28293;   % 952: readInt.mul2d:	addi 	t0, t0, -1			# busca o digito anterior %
00000697 : fff68693;   % 953: 	addi	a3, a3, -1			# reduz o contador de digitos  %
00000698 : f31ff06f;   % 954: 	j 	loopReadInt			# volta para buscar proximo digito %
00000699 : 0080006f;   % 957: 		j fimReadInt			# como nao esta implmentado apenas retorna %
0000069a : 40a00533;   % 959: ehnegReadInt:	sub a0,zero,a0			# se for negativo %
0000069b : 00012083;   % 963: fimReadInt:	lw 	ra, 0(sp)		# recupera ra %
0000069c : 00410113;   % 964: 		addi 	sp, sp, 4		# libera espaco %
0000069d : 00008067;   % 965: 		ret				# fim ReadInt %
0000069e : 10008c37;   % 985: <9> li s8, 0x10008000	# carrega tp %
0000069f : 000c0c13;   % 985:  %
000006a0 : 01819863;   % 985: <10> bne gp, s8, midiOutDE2	# Na DE1 gp = 0 ! Não tem segmento .extern %
000006a1 : 01f00893;   % 987: 	li a7,31		# Chama o ecall normal %
000006a2 : 00000073;   % 988: 	ecall %
000006a3 : 0600006f;   % 989: 	j fimmidiOut %
000006a4 : ff2002b7;   % 991: midiOutDE2:	li      t0, 0xFF200178 %
000006a5 : 17828293;   % 991:  %
000006a6 : 00000333;   % 992:     		add     t1, zero, zero %
000006a7 : 00f67393;   % 997:    	 	andi    t2, a2, 0x0000000F %
000006a8 : 01b39393;   % 998:     		slli    t2, t2, 27 %
000006a9 : 00736333;   % 999:     		or      t1, t1, t2 %
000006aa : 07f6f393;   % 1002:     		andi    t2, a3, 0x0000007F %
000006ab : 01439393;   % 1003:     		slli    t2, t2, 20 %
000006ac : 00736333;   % 1004:     		or      t1, t1, t2 %
000006ad : 07f57393;   % 1007:     		andi    t2, a0, 0x0000007F %
000006ae : 00d39393;   % 1008:     		slli    t2, t2, 13 %
000006af : 00736333;   % 1009:     		or      t1, t1, t2 %
000006b0 : 1ff00e93;   % 1012: 		li 	t4, 0x1FF %
000006b1 : 004e9e93;   % 1013: 		slli 	t4, t4, 4 %
000006b2 : 00fe8e93;   % 1014: 		addi 	t4, t4, 0x00F			# t4 = 0x00001FFF %
000006b3 : 01d5f3b3;   % 1015:     		and    	t2, a1, t4 %
000006b4 : 00736333;   % 1016:     		or      t1, t1, t2 %
000006b5 : 0040006f;   % 1019:     		j       SintMidOut %
000006b6 : 0062a023;   % 1021: SintMidOut:	sw	t1, 0(t0) %
000006b7 : ff2003b7;   % 1024: 	    		li      t2, 0xFF20017C %
000006b8 : 17c38393;   % 1024:  %
000006b9 : 0003ae03;   % 1025: Check_AUD_DACLRCK:     	lw      t3, 0(t2) %
000006ba : fe0e0ee3;   % 1026:     			beq     t3, zero, Check_AUD_DACLRCK %
000006bb : 00008067;   % 1028: fimmidiOut:    		ret %
000006bc : 10008c37;   % 1046: <9> li s8, 0x10008000	# carrega tp %
000006bd : 000c0c13;   % 1046:  %
000006be : 01819863;   % 1046: <10> bne gp, s8, midiOutSyncDE2	# Na DE1 gp = 0 ! Não tem segmento .extern %
000006bf : 02100893;   % 1048: 	li a7,33		# Chama o ecall normal %
000006c0 : 00000073;   % 1049: 	ecall %
000006c1 : 0780006f;   % 1050: 	j fimmidiOutSync %
000006c2 : ff2002b7;   % 1052: midiOutSyncDE2:	li      t0, 0xFF200178 %
000006c3 : 17828293;   % 1052:  %
000006c4 : 00000333;   % 1053:     		add     t1, zero, zero %
000006c5 : 08000337;   % 1056:     		lui    	t1, 0x08000 %
000006c6 : 00431313;   % 1057: 		slli	t1,t1,4 %
000006c7 : 00f67393;   % 1060:     		andi    t2, a2, 0x00F %
000006c8 : 01b39393;   % 1061:     		slli    t2, t2, 27 %
000006c9 : 00736333;   % 1062:     		or      t1, t1, t2 %
000006ca : 07f6f393;   % 1065:     		andi    t2, a3, 0x07F %
000006cb : 01439393;   % 1066:     		slli    t2, t2, 20 %
000006cc : 00736333;   % 1067:     		or      t1, t1, t2 %
000006cd : 07f57393;   % 1070:     		andi    t2, a0, 0x07F %
000006ce : 00d39393;   % 1071:     		slli    t2, t2, 13 %
000006cf : 00736333;   % 1072:     		or      t1, t1, t2 %
000006d0 : 1ff00e93;   % 1075: 		li 	t4, 0x1FF %
000006d1 : 004e9e93;   % 1076: 		slli 	t4, t4, 4 %
000006d2 : 00fe8e93;   % 1077: 		addi 	t4, t4, 0x00F			# t4 = 0x00001FFF %
000006d3 : 01d5f3b3;   % 1078:     		and    	t2, a1, t4 %
000006d4 : 00736333;   % 1079:     		or      t1, t1, t2 %
000006d5 : 0040006f;   % 1082:     		j       SintMidOutSync %
000006d6 : 0062a023;   % 1084: SintMidOutSync:	sw	t1, 0(t0) %
000006d7 : ff2003b7;   % 1087:     		li      t2, 0xFF20017C %
000006d8 : 17c38393;   % 1087:  %
000006d9 : ff200eb7;   % 1088:     		li      t4, 0xFF200180 %
000006da : 180e8e93;   % 1088:  %
000006db : 0003ae03;   % 1090: Check_AUD_DACLRCKSync:	lw      t3, 0(t2) %
000006dc : fe0e0ee3;   % 1091:     			beq     t3, zero, Check_AUD_DACLRCKSync %
000006dd : 000eaf03;   % 1093: Melody:     	lw      t5, 0(t4) %
000006de : fe0f1ee3;   % 1094:     		bne     t5, zero, Melody %
000006df : 00008067;   % 1096: fimmidiOutSync:	ret %
000006e0 : ffc10113;   % 1106: printFloat:	addi 	sp, sp, -4 %
000006e1 : 00112023;   % 1107: 		sw 	ra, 0(sp)				# salva ra %
000006e2 : 0fc26417;   % 1108: 		la 	s0, TempBuffer %
000006e3 : de040413;   % 1108:  %
000006e4 : 02b00293;   % 1111: 		li 	t0, '+'			# define sinal '+' %
000006e5 : e00504d3;   % 1112: 		fmv.x.s s1, fa0			# recupera o numero float sem conversao %
000006e6 : 01f4d493;   % 1113: 		srli	s1, s1, 31		# bit 31(sinal) em bit 0, numero eh negativo s1=1 %
000006e7 : 00048463;   % 1114: 		beq 	s1, zero, ehposprintFloat	# eh positivo s1=0 %
000006e8 : 02d00293;   % 1115: 		li 	t0, '-'				# define sinal '-' %
000006e9 : 00540023;   % 1116: ehposprintFloat: sb 	t0, 0(s0)			# coloca sinal no buffer %
000006ea : 00140413;   % 1117: 		addi 	s0, s0, 1			# incrementa o endereco do buffer %
000006eb : e00502d3;   % 1120: 		 fmv.x.s t0, fa0			# recupera o numero float sem conversao %
000006ec : 7f800337;   % 1121: 		 lui	t1, 0x7F800 %
000006ed : 0062f2b3;   % 1122: 		 and 	t0, t0, t1   			# mascara com 0111 1111 1000 0000 0000 0000... %
000006ee : 00129293;   % 1123: 		 slli 	t0, t0, 1			# tira o sinal do numero %
000006ef : 0182d293;   % 1124: 		 srli 	t0, t0, 24			# recupera o expoente %
000006f0 : e0050353;   % 1127: 		fmv.x.s t1, fa0				# recupera o numero float sem conversao %
000006f1 : 008003b7;   % 1128: 		li 	t2, 0x007FFFFF			# t2 = 0x007FFFFF %
000006f2 : fff38393;   % 1128:  %
000006f3 : 00737333;   % 1129: 		and 	t1, t1, t2			# mascara com 0000 0000 0111 1111 1111... 		  %
000006f4 : 14028c63;   % 1131: 		beq 	t0, zero, ehExp0printFloat	# Expoente = 0 %
000006f5 : 0ff00213;   % 1132: 		li	tp, 0x000000FF			# TP = 255 %
000006f6 : 16428c63;   % 1133: 		beq 	t0, tp, ehExp255printFloat	# Expoente = 255 %
000006f7 : 20a52053;   % 1137: 		fabs.s 		ft0, fa0		# ft0 recebe o modulo  de x %
000006f8 : 00100213;   % 1138: 		li		tp, 1 %
000006f9 : d00270d3;   % 1139: 		fcvt.s.w 	ft1, tp			# ft1 recebe o numero 1.0 %
000006fa : 00a00213;   % 1140: 		li		tp, 10 %
000006fb : d0027353;   % 1141: 		fcvt.s.w 	ft6, tp			# ft6 recebe o numero 10.0 %
000006fc : 00200213;   % 1142: 		li		tp, 2 %
000006fd : d0027e53;   % 1143: 		fcvt.s.w 	ft8, tp %
000006fe : 19c0f3d3;   % 1144: 		fdiv.s		ft7, ft1, ft8		# ft7 recebe o numero 0.5 %
000006ff : a0101ed3;   % 1146: 		flt.s 	t4, ft0, ft1		# ft0 < 1.0 ? Se sim, E deve ser negativo %
00000700 : 000e9663;   % 1147: 		bnez	t4, menor1printFloat	# se a comparacao deu true (1), pula %
00000701 : 20630153;   % 1148: 		fmv.s 	ft2, ft6		# ft2  fator de multiplicacao = 10 %
00000702 : 02c0006f;   % 1149: 		j 	cont2printFloat		# vai para expoente positivo %
00000703 : 1860f153;   % 1150: menor1printFloat: fdiv.s ft2,ft1,ft6		# ft2 fator multiplicativo = 0.1 %
00000704 : 20000253;   % 1153: cont1printFloat: 	fmv.s 	ft4, ft0			# inicia com o numero x  %
00000705 : 201081d3;   % 1154: 		 	fmv.s 	ft3, ft1			# contador comeca em 1 %
00000706 : 18227253;   % 1155: loop1printFloat: 	fdiv.s 	ft4, ft4, ft2			# divide o numero pelo fator multiplicativo %
00000707 : a0120e53;   % 1156: 		 	fle.s 	t3, ft4, ft1			# o numero eh > que 1? entao fim %
00000708 : 000e0663;   % 1157: 		 	beq 	t3,zero, fimloop1printFloat %
00000709 : 0011f1d3;   % 1158: 		 	fadd.s 	ft3, ft3, ft1			# incrementa o contador %
0000070a : ff1ff06f;   % 1159: 		 	j 	loop1printFloat			# volta ao loop %
0000070b : 18227253;   % 1161: fimloop1printFloat: 	fdiv.s 	ft4, ft4, ft2			# ajusta o numero %
0000070c : 0200006f;   % 1162: 		 	j 	intprintFloat			# vai para imprimir a parte inteira %
0000070d : 20000253;   % 1165: cont2printFloat:	fmv.s 	 ft4, ft0			# inicia com o numero x  %
0000070e : d00071d3;   % 1166: 		 	fcvt.s.w ft3, zero			# contador comeca em 0 %
0000070f : a0621e53;   % 1167: loop2printFloat:  	flt.s 	 t3, ft4, ft6			# resultado eh < que 10? entao fim %
00000710 : 18227253;   % 1168: 			fdiv.s 	 ft4, ft4, ft2			# divide o numero pelo fator multiplicativo %
00000711 : 000e1663;   % 1169: 			bne 	 t3, zero, intprintFloat %
00000712 : 0011f1d3;   % 1170: 		 	fadd.s 	 ft3, ft3, ft1			# incrementa o contador %
00000713 : ff1ff06f;   % 1171: 		 	j 	 loop2printFloat %
00000714 : 10227253;   % 1177: intprintFloat:		fmul.s 		ft4, ft4, ft2		# ajusta o numero %
00000715 : 08727253;   % 1178: 			fsub.s		ft4, ft4, ft7		# tira 0.5, dessa forma sempre ao converter estaremos fazendo floor %
00000716 : c00272d3;   % 1179: 		  	fcvt.w.s	t0, ft4			# coloca floor de ft4 em t0 %
00000717 : 00727253;   % 1180: 			fadd.s		ft4, ft4, ft7		# readiciona 0.5 %
00000718 : 00029463;   % 1181: 			bnez		t0, pulaeh1print	# para corrigir multiplos inteiros de 10! %
00000719 : 00100293;   % 1182: 			li 		t0, 1 %
0000071a : 03028293;   % 1183: pulaeh1print:		addi 		t0, t0, 48		# converte para ascii			 %
0000071b : 00540023;   % 1184: 			sb 		t0, 0(s0)		# coloca no buffer %
0000071c : 00140413;   % 1185: 		  	addi 		s0, s0, 1		# incrementta o buffer %
0000071d : 02e00293;   % 1188: 		  	li 	t0, '.'				# carrega o '.' %
0000071e : 00540023;   % 1189: 		  	sb 	t0, 0(s0)			# coloca no buffer %
0000071f : 00140413;   % 1190: 		  	addi 	s0, s0, 1			# incrementa o buffer %
00000720 : 00800313;   % 1193: 		  	li 		t1, 8				# contador de digitos  -  8 casas decimais %
00000721 : 04030a63;   % 1194: loopfracprintFloat:  	beq 		t1, zero, fimfracprintFloat	# fim dos digitos? %
00000722 : 08727253;   % 1195: 			fsub.s		ft4, ft4, ft7			# tira 0.5 %
00000723 : c0027f53;   % 1196: 			fcvt.w.s 	t5, ft4				# floor de ft4 %
00000724 : 00727253;   % 1197: 			fadd.s		ft4, ft4, ft7			# readiciona 0.5 %
00000725 : d00f72d3;   % 1198: 			fcvt.s.w	ft5, t5				# reconverte em float so com a parte inteira %
00000726 : 085272d3;   % 1199: 		  	fsub.s 		ft5, ft4, ft5			# parte fracionaria %
00000727 : 1062f2d3;   % 1200: 		  	fmul.s 		ft5, ft5, ft6			# mult x 10 %
00000728 : 0872f2d3;   % 1201: 			fsub.s		ft5, ft5, ft7			# tira 0.5 %
00000729 : c002f2d3;   % 1202: 			fcvt.w.s	t0, ft5				# coloca floor de ft5 em 10 %
0000072a : 03028293;   % 1203: 		  	addi 		t0, t0, 48			# converte para ascii %
0000072b : 03000213;   % 1205: 			li 		tp, 48 %
0000072c : 0042c663;   % 1206: 			blt		t0, tp, pulaprtFloat1	# testa se eh menor que '0' %
0000072d : 03900213;   % 1207: 			li		tp, 57 %
0000072e : 00525463;   % 1208: 			ble		t0, tp, pulaprtFloat2	# testa se eh menor ou igual que '9' %
0000072f : 03000293;   % 1209: pulaprtFloat1:		li		t0, 48			# define como '0'		  			  	 %
00000730 : 00540023;   % 1211: pulaprtFloat2:	  	sb 		t0, 0(s0)			# coloca no buffer %
00000731 : 00140413;   % 1212: 		  	addi 		s0, s0, 1			# incrementa endereco %
00000732 : fff30313;   % 1213: 		  	addi 		t1, t1, -1			# decrementa contador %
00000733 : 0072f2d3;   % 1214: 			fadd.s		ft5, ft5, ft7			# reincrementa 0.5 %
00000734 : 20528253;   % 1215: 		  	fmv.s 		ft4, ft5			# coloca o numero em ft4 %
00000735 : fb1ff06f;   % 1216: 		  	j 		loopfracprintFloat		# volta ao loop %
00000736 : 04500293;   % 1219: fimfracprintFloat: 	li 	t0,'E'			# carrega 'E' %
00000737 : 00540023;   % 1220: 			sb 	t0, 0(s0)		# coloca no buffer %
00000738 : 00140413;   % 1221: 			addi 	s0, s0, 1		# incrementa endereco %
00000739 : 02b00293;   % 1224: 		  	li 	t0, '+'				# carrega '+' %
0000073a : 000e8463;   % 1225: 		  	beqz 	t4, expposprintFloat		# nao eh negativo? %
0000073b : 02d00293;   % 1226: 		  	li 	t0, '-'				# carrega '-' %
0000073c : 00540023;   % 1227: expposprintFloat: 	sb 	t0, 0(s0)			# coloca no buffer %
0000073d : 00140413;   % 1228: 		  	addi 	s0, s0, 1			#incrementa endereco %
0000073e : 00a00313;   % 1231: 			li 	t1, 10				# carrega 10	 %
0000073f : c001f253;   % 1232: 			fcvt.w.s  tp, ft3			# passa ft3 para t0 %
00000740 : 026242b3;   % 1233: 			div 	t0, tp, t1			# divide por 10 (dezena) %
00000741 : 026263b3;   % 1234: 			rem	t2, tp, t1			# t0 = quociente, t2 = resto %
00000742 : 03028293;   % 1235: 			addi 	t0, t0, 48			# converte para ascii %
00000743 : 00540023;   % 1236: 			sb 	t0, 0(s0)			# coloca no buffer %
00000744 : 03038393;   % 1237: 			addi 	t2, t2, 48			# converte para ascii %
00000745 : 007400a3;   % 1238: 			sb 	t2, 1(s0)			# coloca no buffer %
00000746 : 00040123;   % 1239: 			sb 	zero, 2(s0)			# insere \NULL da string %
00000747 : 0fc26517;   % 1240: 			la 	a0, TempBuffer			# endereco do Buffer										 %
00000748 : c4c50513;   % 1240:  %
00000749 : 0500006f;   % 1241: 	  		j 	fimprintFloat			# imprime a string %
0000074a : 00030e63;   % 1243: ehExp0printFloat: 	beq 	t1, zero, eh0printFloat		# Verifica se eh zero %
0000074b : 0fc26517;   % 1245: ehDesnormprintFloat: 	la 	a0, NumDesnormP			# string numero desnormalizado positivo %
0000074c : e4f50513;   % 1245:  %
0000074d : 04048063;   % 1246: 			beq 	s1, zero, fimprintFloat		# o sinal eh 1? entao eh negativo %
0000074e : 0fc26517;   % 1247: 		 	la 	a0, NumDesnormN			# string numero desnormalizado negativo %
0000074f : e4c50513;   % 1247:  %
00000750 : 0340006f;   % 1248: 			j 	fimprintFloat			# imprime a string %
00000751 : 0fc26517;   % 1250: eh0printFloat:		la 	a0, NumZero			# string do zero %
00000752 : e4950513;   % 1250:  %
00000753 : 0280006f;   % 1251: 			j 	fimprintFloat 	 		# imprime a string %
00000754 : 00030863;   % 1253: ehExp255printFloat: 	beq 	t1, zero, ehInfprintFloat	# se mantissa eh zero entao eh Infinito %
00000755 : 0fc26517;   % 1255: ehNaNprintfFloat:	la 	a0, NumNaN			# string do NaN %
00000756 : e5850513;   % 1255:  %
00000757 : 0180006f;   % 1256: 			j 	fimprintFloat			# imprime string %
00000758 : 0fc26517;   % 1258: ehInfprintFloat:	la 	a0, NumInfP			# string do infinito positivo %
00000759 : e3850513;   % 1258:  %
0000075a : 00048663;   % 1259: 			beq 	s1, zero, fimprintFloat		# o sinal eh 1? entao eh negativo %
0000075b : 0fc26517;   % 1260: 			la 	a0, NumInfN			# string do infinito negativo %
0000075c : e3650513;   % 1260:  %
0000075d : 941ff0ef;   % 1263: fimprintFloat:		jal 	printString			# imprime a string em a0 %
0000075e : 00012083;   % 1264: 			lw 	ra, 0(sp)			# recupera ra %
0000075f : 00410113;   % 1265: 			addi 	sp, sp, 4			# libera espaco %
00000760 : 00008067;   % 1266: 			ret					# retorna %
00000761 : ffc10113;   % 1275: readFloat: addi sp, sp, -4			# aloca espaco %
00000762 : 00112023;   % 1276: 	sw 	ra, 0(sp)			# salva ra %
00000763 : 0fc26517;   % 1277: 	la 	a0, TempBuffer			# endereco do FloatBuffer %
00000764 : bdc50513;   % 1277:  %
00000765 : 02000593;   % 1278: 	li 	a1, 32				# numero maximo de caracteres %
00000766 : b41ff0ef;   % 1279: 	jal	readString			# le string, retorna a2 ultimo endereco e a3 numero de caracteres %
00000767 : 00c00433;   % 1280: 	mv 	s0, a2				# ultimo endereco da string (antes do \0) %
00000768 : 00d004b3;   % 1281: 	mv 	s1, a3				# numero de caracteres digitados %
00000769 : 0fc26b97;   % 1282: 	la	s7, TempBuffer			# Endereco do primeiro caractere %
0000076a : bc4b8b93;   % 1282:  %
0000076b : 017002b3;   % 1284: lePrimeiroreadFloat:	mv 	t0, s7		# Endereco de Inicio %
0000076c : 00028303;   % 1285: 	lb 	t1, 0(t0)				# le primeiro caractere %
0000076d : 06500213;   % 1286: 	li	tp, 'e'					# TP = 101 = 'e' %
0000076e : 02430863;   % 1287: 	beq 	t1, tp, insere0AreadFloat		# insere '0' antes %
0000076f : 04500213;   % 1288: 	li 	tp, 'E'					# TP = 69 = 'E' %
00000770 : 02430463;   % 1289: 	beq 	t1, tp, insere0AreadFloat		# insere '0' antes %
00000771 : 02e00213;   % 1290: 	li	tp, '.'					# TP = 46 = '.' %
00000772 : 02430063;   % 1291: 	beq 	t1, tp, insere0AreadFloat		#  insere '0' antes %
00000773 : 02b00213;   % 1292: 	li	tp, '+'					# TP = 43 = '+' %
00000774 : 00430863;   % 1293: 	beq 	t1, tp, pulaPrimreadChar		# pula o primeiro caractere %
00000775 : 02d00213;   % 1294: 	li	tp, '-'					# TP = 45 = '-' %
00000776 : 00430463;   % 1295: 	beq 	t1, tp, pulaPrimreadChar %
00000777 : 03c0006f;   % 1296: 	j leUltimoreadFloat %
00000778 : 001b8b93;   % 1298: pulaPrimreadChar: addi s7,s7,1			# incrementa o endereco inicial %
00000779 : fc9ff06f;   % 1299: 		  j lePrimeiroreadFloat		# volta a testar o novo primeiro caractere %
0000077a : 008002b3;   % 1301: insere0AreadFloat: mv t0, s0			# endereco do ultimo caractere %
0000077b : 00140413;   % 1302: 		   addi s0, s0, 1		# desloca o ultimo endereco para o proximo %
0000077c : 00148493;   % 1303: 	   	   addi s1, s1, 1		# incrementa o num. caracteres %
0000077d : 000400a3;   % 1304: 	   	   sb 	zero, 1(s0)		# \NULL do final de string %
0000077e : 01700f33;   % 1305: 	   	   mv t5, s7			# primeiro caractere %
0000077f : 01e28a63;   % 1306: insere0Aloop:	   beq 	t0, t5, saiinsere0AreadFloat	# chegou no inicio entao fim %
00000780 : 00028303;   % 1307: 		   lb 	t1, 0(t0)		# le caractere %
00000781 : 006280a3;   % 1308: 		   sb 	t1, 1(t0)		# escreve no proximo %
00000782 : fff28293;   % 1309: 		   addi t0, t0, -1		# decrementa endereco %
00000783 : ff1ff06f;   % 1310: 		   j insere0Aloop		# volta ao loop %
00000784 : 03000313;   % 1311: saiinsere0AreadFloat: li t1, '0'		# ascii '0' %
00000785 : 00628023;   % 1312: 		   sb t1, 0(t0)			# escreve '0' no primeiro caractere %
00000786 : 00040303;   % 1314: leUltimoreadFloat: lb  	t1, 0(s0)			# le ultimo caractere %
00000787 : 06500213;   % 1315: 		li	tp, 'e'				# TP = 101 = 'e' %
00000788 : 00430c63;   % 1316: 		beq 	t1, tp, insere0PreadFloat	# insere '0' depois %
00000789 : 04500213;   % 1317: 		li 	tp, 'E'				# TP = 69 = 'E' %
0000078a : 00430863;   % 1318: 		beq 	t1, tp, insere0PreadFloat	# insere '0' depois %
0000078b : 02e00213;   % 1319: 		li	tp, '.'				# TP = 46 = '.' %
0000078c : 00430463;   % 1320: 		beq 	t1, tp, insere0PreadFloat	# insere '0' depois %
0000078d : 0180006f;   % 1321: 		j 	inicioreadFloat %
0000078e : 00140413;   % 1323: insere0PreadFloat: addi	s0, s0, 1		# desloca o ultimo endereco para o proximo %
0000078f : 00148493;   % 1324: 	   	   addi	s1, s1, 1		# incrementa o num. caracteres %
00000790 : 03000313;   % 1325: 		   li 	t1,'0'			# ascii '0' %
00000791 : 00640023;   % 1326: 		   sb 	t1,0(s0)		# escreve '0' no ultimo %
00000792 : 000400a3;   % 1327: 		   sb 	zero,1(s0)		# \null do final de string %
00000793 : d0007553;   % 1329: inicioreadFloat:  fcvt.s.w 	fa0, zero	# fa0 Resultado inicialmente zero %
00000794 : 00a00293;   % 1330: 		li 	t0, 10			# inteiro 10	 %
00000795 : d002f353;   % 1331: 		fcvt.s.w 	ft6, t0		# ft6 contem sempre o numero cte 10.0000 %
00000796 : 00100293;   % 1332: 		li 	t0, 1			# inteiro 1 %
00000797 : d002f0d3;   % 1333: 		fcvt.s.w 	ft1, t0		# ft1 contem sempre o numero cte 1.0000	 %
00000798 : 00140993;   % 1336: procuraEreadFloat:	addi 	s3, s0, 1			# inicialmente nao tem 'e' ou 'E' na string (fora da string) %
00000799 : 017002b3;   % 1337: 			mv 	t0, s7				# endereco inicial %
0000079a : 02828263;   % 1338: loopEreadFloat: 	beq 	t0, s0, naotemEreadFloat	# sai se nao encontrou 'e' %
0000079b : 00028303;   % 1339: 			lb 	t1, 0(t0)			# le o caractere %
0000079c : 06500213;   % 1340: 			li	tp, 'e'				# TP = 101 = 'e' %
0000079d : 00430a63;   % 1341: 			beq 	t1, tp, ehEreadFloat		# tem 'e' %
0000079e : 04500213;   % 1342: 			li 	tp, 'E'				# TP = 69 = 'E' %
0000079f : 00430663;   % 1343: 			beq	t1, tp, ehEreadFloat		# tem 'E' %
000007a0 : 00128293;   % 1344: 			addi 	t0, t0, 1			# incrementa endereco %
000007a1 : fe5ff06f;   % 1345: 			j 	loopEreadFloat			# volta ao loop %
000007a2 : 005009b3;   % 1346: ehEreadFloat: 		mv 	s3, t0				# endereco do 'e' ou 'E' na string %
000007a3 : 01300933;   % 1350: procuraPontoreadFloat:	mv 	s2, s3				# local inicial do ponto na string (='e' se existir) ou fora da string	 %
000007a4 : 017002b3;   % 1351: 			mv 	t0, s7				# endereco inicial %
000007a5 : 00828e63;   % 1352: loopPontoreadFloat: 	beq 	t0, s0, naotemPontoreadFloat	# sai se nao encontrou '.' %
000007a6 : 00028303;   % 1353: 			lb 	t1, 0(t0)			# le o caractere %
000007a7 : 02e00213;   % 1354: 			li	tp, '.'				# TP = 46 = '.' %
000007a8 : 00430663;   % 1355: 			beq 	t1, tp, ehPontoreadFloat	# tem '.' %
000007a9 : 00128293;   % 1356: 			addi 	t0, t0, 1			# incrementa endereco %
000007aa : fedff06f;   % 1357: 			j 	loopPontoreadFloat		# volta ao loop %
000007ab : 00500933;   % 1358: ehPontoreadFloat: 	mv 	s2, t0				# endereco do '.' na string %
000007ac : d0007153;   % 1362: intreadFloat:		fcvt.s.w 	ft2, zero		# zera parte inteira %
000007ad : fff90293;   % 1363: 			addi 	t0, s2, -1			# endereco do caractere antes do ponto %
000007ae : 201081d3;   % 1364: 			fmv.s 	ft3, ft1			# ft3 contem unidade/dezenas/centenas		 %
000007af : 01700f33;   % 1365: 			mv 	t5, s7				# Primeiro Endereco %
000007b0 : 03e2ca63;   % 1366: loopintreadFloat: 	blt 	t0, t5, fimintreadFloat		# sai se o endereco for < inicio da string %
000007b1 : 00028303;   % 1367: 			lb 	t1, 0(t0)			# le o caracter %
000007b2 : 03000213;   % 1368: 			li	tp, '0'				# TP = 48 = '0' %
000007b3 : 10434863;   % 1369: 			blt 	t1, tp, erroreadFloat		# nao eh caractere valido para numero %
000007b4 : 03900213;   % 1370: 			li	tp, '9'				# TP = 57 = '9' %
000007b5 : 10624463;   % 1371: 			bgt 	t1, tp, erroreadFloat		# nao eh caractere valido para numero %
000007b6 : fd030313;   % 1372: 			addi 	t1, t1, -48			# converte ascii para decimal %
000007b7 : d0037153;   % 1373: 			fcvt.s.w  ft2, t1			# digito lido em float %
000007b8 : 10317153;   % 1375: 			fmul.s 	ft2,ft2,ft3			# multiplica por un/dezena/centena %
000007b9 : 00257553;   % 1376: 			fadd.s 	fa0,fa0,ft2			# soma no resultado %
000007ba : 1061f1d3;   % 1377: 			fmul.s 	ft3,ft3,ft6			# proxima dezena/centena %
000007bb : fff28293;   % 1379: 			addi 	t0,t0,-1			# endereco anterior %
000007bc : fd1ff06f;   % 1380: 			j 	loopintreadFloat		# volta ao loop %
000007bd : d0007153;   % 1384: fracreadFloat:		fcvt.s.w 	ft2, zero		# zera parte fracionaria %
000007be : 00190293;   % 1385: 			addi 	t0, s2, 1			# endereco depois do ponto %
000007bf : 1860f1d3;   % 1386: 			fdiv.s 	ft3, ft1, ft6			# ft3 inicial 0.1 %
000007c0 : 0332da63;   % 1388: loopfracreadFloat: 	bge 	t0, s3, fimfracreadFloat	# endereco eh 'e' 'E' ou >ultimo %
000007c1 : 00028303;   % 1389: 			lb 	t1, 0(t0)			# le o caracter %
000007c2 : 03000213;   % 1390: 			li	tp, '0'				# TP = 48 = '0' %
000007c3 : 0c434863;   % 1391: 			blt 	t1, tp, erroreadFloat		# nao eh valido %
000007c4 : 03900213;   % 1392: 			li	tp, '9'				# TP = 57 = '9' %
000007c5 : 0c624463;   % 1393: 			bgt 	t1, tp, erroreadFloat		# nao eh valido %
000007c6 : fd030313;   % 1394: 			addi 	t1, t1, -48			# converte ascii para decimal %
000007c7 : d0037153;   % 1395: 			fcvt.s.w 	ft2, t1			# digito lido em float		 %
000007c8 : 10317153;   % 1397: 			fmul.s 	ft2, ft2, ft3			# multiplica por ezena/centena %
000007c9 : 00257553;   % 1398: 			fadd.s 	fa0, fa0, ft2			# soma no resultado %
000007ca : 1861f1d3;   % 1399: 			fdiv.s 	ft3, ft3, ft6			# proxima frac un/dezena/centena %
000007cb : 00128293;   % 1401: 			addi 	t0, t0, 1			# proximo endereco %
000007cc : fd1ff06f;   % 1402: 			j 	loopfracreadFloat		# volta ao loop		 %
000007cd : d0007153;   % 1407: potreadFloat:		fcvt.s.w 	ft2, zero		# zera potencia %
000007ce : 00198293;   % 1408: 			addi 	t0, s3, 1			# endereco seguinte ao 'e' %
000007cf : 00000a13;   % 1409: 			li 	s4, 0				# sinal do expoente positivo %
000007d0 : 00028303;   % 1410: 			lb 	t1, 0(t0)			# le o caractere seguinte ao 'e' %
000007d1 : 02d00213;   % 1411: 			li	tp, '-'				# TP = 45 = '-' %
000007d2 : 00430863;   % 1412: 			beq	t1, tp, potsinalnegreadFloat	# sinal do expoente esta escrito e eh positivo %
000007d3 : 02b00213;   % 1413: 			li	tp, '+'				# TP = 43 = '+' %
000007d4 : 00430663;   % 1414: 			beq 	t1, tp, potsinalposreadFloat	# sinal do expoente eh negativo %
000007d5 : 00c0006f;   % 1415: 			j 	pulapotsinalreadFloat		# nao esta escrito o sinal do expoente %
000007d6 : 00100a13;   % 1416: potsinalnegreadFloat:	li 	s4, 1				# s4=1 expoente negativo %
000007d7 : 00128293;   % 1417: potsinalposreadFloat:	addi 	t0, t0, 1			# se tiver '-' ou '+' avanca para o proximo endereco %
000007d8 : 00500ab3;   % 1418: pulapotsinalreadFloat:	mv 	s5, t0 				# Neste ponto s5 contem o endereco do primeiro digito da pot e s4 o sinal do expoente		 %
000007d9 : 201081d3;   % 1420: 			fmv.s 	ft3, ft1			# ft3 un/dez/cen = 1 %
000007da : 00000393;   % 1423: expreadFloat:		li 	t2, 0				# zera expoente %
000007db : 008002b3;   % 1424: 			mv 	t0, s0				# endereco do ultimo caractere da string %
000007dc : 00a00e13;   % 1425: 			li 	t3, 10				# numero dez %
000007dd : 00100e93;   % 1426: 			li 	t4, 1				# und/dez/cent %
000007de : 0352c063;   % 1428: loopexpreadFloat:	blt 	t0, s5, fimexpreadFloat		# ainda nao eh o endereco do primeiro digito? %
000007df : 00028303;   % 1429: 			lb 	t1, 0(t0)			# le o caracter %
000007e0 : fd030313;   % 1430: 			addi 	t1, t1, -48			# converte ascii para decimal %
000007e1 : 03d30333;   % 1431: 			mul 	t1, t1, t4			# mul digito %
000007e2 : 006383b3;   % 1432: 			add 	t2, t2, t1			# soma ao exp %
000007e3 : 03ce8eb3;   % 1433: 			mul 	t4, t4, t3			# proxima casa decimal %
000007e4 : fff28293;   % 1434: 			addi 	t0, t0, -1			# endereco anterior %
000007e5 : fe5ff06f;   % 1435: 			j loopexpreadFloat			# volta ao loop %
000007e6 : 20108153;   % 1439: 			fmv.s 	ft2, ft1			# numero 10^exp  inicial=1 %
000007e7 : 206301d3;   % 1440: 			fmv.s 	ft3, ft6			# se o sinal for + ft3 eh 10 %
000007e8 : 00000213;   % 1441: 			li	tp, 0x00000000			# TP = ZERO %
000007e9 : 004a0463;   % 1442: 			beq 	s4, tp, sinalexpPosreadFloat	# se sinal exp positivo %
000007ea : 1860f1d3;   % 1443: 			fdiv.s 	ft3, ft1, ft6			# se o final for - ft3 eh 0.1 %
000007eb : 00000293;   % 1444: sinalexpPosreadFloat:	li 	t0, 0				# contador  %
000007ec : 00728863;   % 1445: sinalexpreadFloat: 	beq 	t0, t2, fimsinalexpreadFloat	# se chegou ao fim %
000007ed : 10317153;   % 1446: 			fmul.s 	ft2, ft2, ft3			# multiplica pelo fator 10 ou 0.1 %
000007ee : 00128293;   % 1447: 			addi 	t0, t0, 1			# incrementa o contador %
000007ef : ff5ff06f;   % 1448: 			j 	sinalexpreadFloat %
000007f0 : 10257553;   % 1451: 		fmul.s 	fa0, fa0, ft2		# multiplicacao final! %
000007f1 : 0fc26297;   % 1453: 		la 	t0, TempBuffer		# ajuste final do sinal do numero %
000007f2 : 9a428293;   % 1453:  %
000007f3 : 00028303;   % 1454: 		lb 	t1, 0(t0)		# le primeiro caractere %
000007f4 : 02d00213;   % 1455: 		li	tp, '-'			# TP = 45 = '-' %
000007f5 : 00431463;   % 1456: 		bne 	t1, tp, fimreadFloat	# nao eh '-' entao fim %
000007f6 : 20a51553;   % 1457: 		fneg.s 	fa0, fa0		# nega o numero float %
000007f7 : 00012083;   % 1460: fimreadFloat: 	lw 	ra, 0(sp)		# recupera ra %
000007f8 : 00410113;   % 1461: 		addi 	sp, sp, 4		# libera espaco %
000007f9 : 00008067;   % 1462: 		ret				# retorna %
000007fa : 10008c37;   % 1470: <9> li s8, 0x10008000	# carrega tp %
000007fb : 000c0c13;   % 1470:  %
000007fc : 01819863;   % 1470: <10> bne gp, s8, Time.DE1	# Na DE1 gp = 0 ! Não tem segmento .extern %
000007fd : 01e00893;   % 1471: 	li 	a7, 30				# Chama o ecall do Rars %
000007fe : 00000073;   % 1472: 	ecall %
000007ff : 00008067;   % 1473: 	ret					# saida %
00000800 : c0102573;   % 1475: Time.DE1:	csrr a0, time			#  Le time LOW %
00000801 : c81025f3;   % 1476: 		csrr a1, timeh 			#  Le time HIGH %
00000802 : 00008067;   % 1477: 		ret %
00000803 : 10008c37;   % 1490: <9> li s8, 0x10008000	# carrega tp %
00000804 : 000c0c13;   % 1490:  %
00000805 : 01819863;   % 1490: <10> bne gp, s8, Sleep.DE1	# Na DE1 gp = 0 ! Não tem segmento .extern %
00000806 : 02000893;   % 1491: 	li 	a7, 32				# Chama o ecall do Rars %
00000807 : 00000073;   % 1492: 	ecall %
00000808 : 00008067;   % 1493: 	ret					#Saida %
00000809 : c01022f3;   % 1495: Sleep.DE1:	csrr 	t0, time		# Le o tempo do sistema %
0000080a : 00a28333;   % 1496: 		add 	t1, t0, a0		# soma com o tempo solicitado %
0000080b : c01022f3;   % 1497: Sleep.Loop:	csrr	t0, time		# Le o tempo do sistema %
0000080c : fe62cee3;   % 1498: 		blt	t0, t1, Sleep.Loop	# t0<t1 ? %
0000080d : 00008067;   % 1499: 		ret %
0000080e : 10008c37;   % 1517: <9> li s8, 0x10008000	# carrega tp %
0000080f : 000c0c13;   % 1517:  %
00000810 : 01819863;   % 1517: <10> bne gp, s8, Random.DE1	# Na DE1 gp = 0 ! Não tem segmento .extern %
00000811 : 02900893;   % 1518: 	li 	a7,41			# Chama o ecall do Rars %
00000812 : 00000073;   % 1519: 	ecall	 %
00000813 : 00008067;   % 1520: 	ret				# saida %
00000814 : ff2002b7;   % 1522: Random.DE1: 	li 	t0, 0xFF200514	# carrega endereco do LFSR %
00000815 : 51428293;   % 1522:  %
00000816 : 0002a503;   % 1523: 		lw 	a0, 0(t0)	# le a word em a0 %
00000817 : 00008067;   % 1524: 		ret			# retorna %
00000818 : 00058c63;   % 1534: clsCLS:	beq 	a1, zero, CLS.frame0 %
00000819 : ff100337;   % 1535: 	li      t1, 0xFF100000              # Memoria VGA 1 %
0000081a : 00030313;   % 1535:  %
0000081b : ff1133b7;   % 1536:    	li      t2, 0xFF112C00 %
0000081c : c0038393;   % 1536:  %
0000081d : 0140006f;   % 1537:    	j 	CLS.pula %
0000081e : ff000337;   % 1538: CLS.frame0: 	li      t1, 0xFF000000           # Memoria VGA 0 %
0000081f : 00030313;   % 1538:  %
00000820 : ff0133b7;   % 1539:    	    	li      t2, 0xFF012C00   	 %
00000821 : c0038393;   % 1539:  %
00000822 : 0ff57513;   % 1540: CLS.pula:	andi    a0, a0, 0x00FF %
00000823 : 00a002b3;   % 1543:  		mv 	t0, a0 %
00000824 : 00851513;   % 1544:  		slli 	a0, a0, 8 %
00000825 : 00a2e2b3;   % 1545:  		or 	t0, t0, a0 %
00000826 : 00851513;   % 1546:  		slli 	a0, a0, 8 %
00000827 : 00a2e2b3;   % 1547:  		or 	t0, t0, a0 %
00000828 : 00851513;   % 1548:  		slli 	a0, a0, 8 %
00000829 : 00a2e2b3;   % 1549:  		or 	t0, t0, a0 %
0000082a : 00730863;   % 1551: CLS.for:	beq     t1, t2, CLS.fim %
0000082b : 00532023;   % 1552: 		sw      t0, 0(t1) %
0000082c : 00430313;   % 1553:     		addi    t1, t1, 4 %
0000082d : ff5ff06f;   % 1554:     		j       CLS.for %
0000082e : 00008067;   % 1555: CLS.fim:	ret %
0000082f : ff000837;   % 1564: BRESENHAM: 	li	a6, 0xFF000000           	# Memoria VGA 0 %
00000830 : 00080813;   % 1564:  %
00000831 : 00078663;   % 1565: 	   	beq	a5, zero, pulaBRES %
00000832 : ff100837;   % 1566: 	   	li 	a6, 0xFF100000              # Memoria VGA 1 %
00000833 : 00080813;   % 1566:  %
00000834 : 14000893;   % 1568: pulaBRES: 	li 	a7, 320 %
00000835 : 40b682b3;   % 1569: 	  	sub 	t0, a3, a1 %
00000836 : 0002d463;   % 1570: 	  	bge 	t0, zero, PULAABRES %
00000837 : 405002b3;   % 1571: 	  	sub 	t0, zero, t0 %
00000838 : 40a60333;   % 1572: PULAABRES:	sub 	t1, a2, a0 %
00000839 : 00035463;   % 1573: 	   	bge  	t1, zero, PULABBRES %
0000083a : 40600333;   % 1574: 	   	sub  	t1, zero, t1	 %
0000083b : 0262d263;   % 1575: PULABBRES: 	bge  	t0, t1, PULACBRES %
0000083c : 00a65e63;   % 1576: 	   	ble  	a0, a2, PULAC1BRES %
0000083d : 00a007b3;   % 1577: 	   	mv 	a5, a0 %
0000083e : 00c00533;   % 1578: 	   	mv 	a0, a2 %
0000083f : 00f00633;   % 1579: 	   	mv 	a2, a5 %
00000840 : 00b007b3;   % 1580: 	   	mv	a5, a1 %
00000841 : 00d005b3;   % 1581: 	   	mv 	a1, a3 %
00000842 : 00f006b3;   % 1582: 	   	mv 	a3, a5 %
00000843 : 0240006f;   % 1583: PULAC1BRES:	j PLOTLOWBRES %
00000844 : 00b6de63;   % 1585: PULACBRES: 	ble  	a1, a3, PULAC2BRES %
00000845 : 00a007b3;   % 1586: 	   	mv 	a5, a0 %
00000846 : 00c00533;   % 1587: 	   	mv 	a0, a2 %
00000847 : 00f00633;   % 1588: 	   	mv 	a2, a5 %
00000848 : 00b007b3;   % 1589: 	   	mv 	a5, a1 %
00000849 : 00d005b3;   % 1590: 	   	mv 	a1, a3 %
0000084a : 00f006b3;   % 1591: 	   	mv 	a3, a5 %
0000084b : 0a80006f;   % 1592: PULAC2BRES:	j PLOTHIGHBRES %
0000084c : 40a602b3;   % 1594: PLOTLOWBRES:	sub 	t0, a2, a0		# dx=x1-x0 %
0000084d : 40b68333;   % 1595: 	 	sub 	t1, a3, a1		# dy y1-y0 %
0000084e : 00100393;   % 1596: 	 	li  	t2, 1			# yi=1 %
0000084f : 00035663;   % 1597: 	 	bge 	t1, zero, PULA1BRES	# dy>=0 PULA %
00000850 : fff00393;   % 1598: 	 	li  	t2, -1			# yi=-1 %
00000851 : 40600333;   % 1599: 	 	sub 	t1, zero, t1		# dy=-dy %
00000852 : 00131e13;   % 1600: PULA1BRES:	slli 	t3, t1, 1		# 2*dy %
00000853 : 405e0e33;   % 1601: 		sub 	t3, t3, t0		# D=2*dy-dx %
00000854 : 00b00eb3;   % 1602: 		mv 	t4, a1			# y=y0 %
00000855 : 00a00f33;   % 1603: 		mv 	t5, a0			# x=x0 %
00000856 : 30102c73;   % 1605: <29> csrr s8, misa %
00000857 : 00cc5c13;   % 1605: <30> srli s8, s8, 12 %
00000858 : 001c7c13;   % 1605: <31> andi s8, s8, 0x001 %
00000859 : 020c1e63;   % 1605: <32> bnez s8, BRESENHAM.mul1 %
0000085a : ff410113;   % 1606: <45> addi 	sp, sp, -12 %
0000085b : 00a12023;   % 1606: <46> sw	a0, 0(sp) %
0000085c : 00b12223;   % 1606: <47> sw	a1, 4(sp) %
0000085d : 00112423;   % 1606: <48> sw	ra, 8(sp) %
0000085e : 01d00533;   % 1606: <50> mv 	a0, t4 %
0000085f : 011005b3;   % 1606: <51> mv 	a1, a7 %
00000860 : 2d8000ef;   % 1606: <52> jal 	__mulsi3 %
00000861 : 04051073;   % 1606: <53> csrw	a0,uscratch %
00000862 : 00012503;   % 1606: <55> lw	a0, 0(sp) %
00000863 : 00412583;   % 1606: <56> lw	a1, 4(sp) %
00000864 : 00812083;   % 1606: <57> lw	ra, 8(sp) %
00000865 : 00c10113;   % 1606: <58> addi 	sp, sp, 12 %
00000866 : 04002ff3;   % 1606: <59> csrr	t6,uscratch %
00000867 : 0080006f;   % 1607: 		j BRESENHAM.mul1d %
00000868 : 031e8fb3;   % 1608: BRESENHAM.mul1:	mul 	t6, t4, a7		# y*320 %
00000869 : 01ef8fb3;   % 1609: BRESENHAM.mul1d:add 	t6, t6, t5		# y*320+x %
0000086a : 010f8fb3;   % 1610: 		add 	t6, t6, a6		# 0xFF000000+y*320+x %
0000086b : 00ef8023;   % 1611: 		sb 	a4, 0(t6)		# plot com cor a4 %
0000086c : 01c05863;   % 1613: 		ble 	t3, zero, PULA2BRES	# D<=0 %
0000086d : 007e8eb3;   % 1614: 		add 	t4, t4, t2		# y=y+yi %
0000086e : 00129f93;   % 1615: 		slli 	t6, t0, 1		# 2*dx %
0000086f : 41fe0e33;   % 1616: 		sub 	t3, t3, t6		# D=D-2dx %
00000870 : 00131f93;   % 1617: PULA2BRES:	slli 	t6, t1, 1		# 2*dy %
00000871 : 01fe0e33;   % 1618: 		add 	t3, t3, t6		# D=D+2dx %
00000872 : 001f0f13;   % 1619: 		addi	t5, t5, 1 %
00000873 : f8cf16e3;   % 1620: 		bne 	t5, a2, LOOPx1BRES %
00000874 : 00008067;   % 1621: 		ret %
00000875 : 40a602b3;   % 1623: PLOTHIGHBRES: 	sub 	t0, a2, a0		# dx=x1-x0 %
00000876 : 40b68333;   % 1624: 	 	sub 	t1, a3, a1		# dy y1-y0 %
00000877 : 00100393;   % 1625: 	 	li 	t2, 1			# xi=1 %
00000878 : 0002d663;   % 1626: 	 	bge 	t0, zero, PULA3BRES	# dy>=0 PULA %
00000879 : fff00393;   % 1627: 	 	li 	t2, -1			# xi=-1 %
0000087a : 405002b3;   % 1628: 	 	sub 	t0, zero, t0		# dx=-dx %
0000087b : 00129e13;   % 1629: PULA3BRES:	slli 	t3, t0, 1		# 2*dx %
0000087c : 406e0e33;   % 1630: 		sub 	t3, t3, t1		# D=2*dx-d1 %
0000087d : 00a00eb3;   % 1631: 		mv 	t4, a0			# x=x0 %
0000087e : 00b00f33;   % 1632: 		mv 	t5, a1			# y=y0 %
0000087f : 30102c73;   % 1634: <29> csrr s8, misa %
00000880 : 00cc5c13;   % 1634: <30> srli s8, s8, 12 %
00000881 : 001c7c13;   % 1634: <31> andi s8, s8, 0x001 %
00000882 : 020c1e63;   % 1634: <32> bnez s8, BRESENHAM.mul2 %
00000883 : ff410113;   % 1635: <45> addi 	sp, sp, -12 %
00000884 : 00a12023;   % 1635: <46> sw	a0, 0(sp) %
00000885 : 00b12223;   % 1635: <47> sw	a1, 4(sp) %
00000886 : 00112423;   % 1635: <48> sw	ra, 8(sp) %
00000887 : 01e00533;   % 1635: <50> mv 	a0, t5 %
00000888 : 011005b3;   % 1635: <51> mv 	a1, a7 %
00000889 : 234000ef;   % 1635: <52> jal 	__mulsi3 %
0000088a : 04051073;   % 1635: <53> csrw	a0,uscratch %
0000088b : 00012503;   % 1635: <55> lw	a0, 0(sp) %
0000088c : 00412583;   % 1635: <56> lw	a1, 4(sp) %
0000088d : 00812083;   % 1635: <57> lw	ra, 8(sp) %
0000088e : 00c10113;   % 1635: <58> addi 	sp, sp, 12 %
0000088f : 04002ff3;   % 1635: <59> csrr	t6,uscratch %
00000890 : 0080006f;   % 1636: 		j BRESENHAM.mul2d %
00000891 : 031f0fb3;   % 1637: BRESENHAM.mul2:	mul 	t6, t5, a7		# y*320 %
00000892 : 01df8fb3;   % 1638: BRESENHAM.mul2d:add 	t6, t6, t4		# y*320+x %
00000893 : 010f8fb3;   % 1639: 		add 	t6, t6, a6		# 0xFF000000+y*320+x %
00000894 : 00ef8023;   % 1640: 		sb 	a4, 0(t6)		# plot com cor a4 %
00000895 : 01c05863;   % 1642: 		ble 	t3, zero, PULA4BRES	# D<=0 %
00000896 : 007e8eb3;   % 1643: 		add 	t4, t4, t2		# x=x+xi %
00000897 : 00131f93;   % 1644: 		slli 	t6, t1, 1		# 2*dy %
00000898 : 41fe0e33;   % 1645: 		sub 	t3, t3, t6		# D=D-2dy %
00000899 : 00129f93;   % 1646: PULA4BRES: 	slli 	t6, t0, 1		# 2*dy %
0000089a : 01fe0e33;   % 1647: 		add 	t3, t3, t6		# D=D+2dx %
0000089b : 001f0f13;   % 1648: 		addi 	t5, t5, 1 %
0000089c : f8df16e3;   % 1649: 		bne 	t5, a3, LOOPx2BRES %
0000089d : 00008067;   % 1650: 		ret		 %
0000089e : ffc10113;   % 1665: printIntUnsigned:	addi 	sp, sp, -4		# Aloca espaco %
0000089f : 00112023;   % 1666: 		sw 	ra, 0(sp)			# salva ra %
000008a0 : 0fc25297;   % 1667: 		la 	t0, TempBuffer			# carrega o Endereco do Buffer da String %
000008a1 : 6e828293;   % 1667:  %
000008a2 : 00a00393;   % 1669: 		li 	t2, 10				# carrega numero 10 %
000008a3 : 00000313;   % 1670: 		li 	t1, 0				# carrega numero de digitos com 0 %
000008a4 : 30102c73;   % 1672: <29> csrr s8, misa %
000008a5 : 00cc5c13;   % 1672: <30> srli s8, s8, 12 %
000008a6 : 001c7c13;   % 1672: <31> andi s8, s8, 0x001 %
000008a7 : 160c1463;   % 1672: <32> bnez s8, printIntUnsigned.pula1 %
000008a8 : ff010113;   % 1673: <65> addi 	sp, sp, -16 %
000008a9 : 00a12023;   % 1673: <66> sw	a0, 0(sp) %
000008aa : 00e12223;   % 1673: <67> sw	a4, 4(sp) %
000008ab : 00f12423;   % 1673: <68> sw	a5, 8(sp) %
000008ac : 00112623;   % 1673: <69> sw	ra, 12(sp) %
000008ad : 00a00533;   % 1673: <70> mv 	a0, a0 %
000008ae : 00155713;   % 1673: <71> srli    a4,a0,1 %
000008af : 00255793;   % 1673: <72> srli    a5,a0,2 %
000008b0 : 00f707b3;   % 1673: <73> add     a5,a4,a5 %
000008b1 : 0047d713;   % 1673: <74> srli    a4,a5,4 %
000008b2 : 00f70733;   % 1673: <75> add     a4,a4,a5 %
000008b3 : 00875793;   % 1673: <76> srli    a5,a4,8 %
000008b4 : 00e78733;   % 1673: <77> add     a4,a5,a4 %
000008b5 : 01075793;   % 1673: <78> srli    a5,a4,16 %
000008b6 : 00e787b3;   % 1673: <79> add     a5,a5,a4 %
000008b7 : 0037d793;   % 1673: <80> srli    a5,a5,3 %
000008b8 : 00279713;   % 1673: <81> slli    a4,a5,2 %
000008b9 : 00f70733;   % 1673: <82> add     a4,a4,a5 %
000008ba : 00171713;   % 1673: <83> slli    a4,a4,1 %
000008bb : 40e50533;   % 1673: <84> sub     a0,a0,a4 %
000008bc : 00a53513;   % 1673: <85> sltiu   a0,a0,10 %
000008bd : 00154513;   % 1673: <86> xori    a0,a0,1 %
000008be : 00f50533;   % 1673: <87> add     a0,a0,a5 %
000008bf : 04051073;   % 1673: <88> csrw	a0,uscratch %
000008c0 : 00012503;   % 1673: <89> lw	a0, 0(sp) %
000008c1 : 00412703;   % 1673: <90> lw	a4, 4(sp) %
000008c2 : 00812783;   % 1673: <91> lw	a5, 8(sp) %
000008c3 : 00c12083;   % 1673: <92> lw	ra, 12(sp) %
000008c4 : 01010113;   % 1673: <93> addi 	sp, sp, 16 %
000008c5 : 04002ef3;   % 1673: <94> csrr	t4,uscratch %
000008c6 : ff010113;   % 1674: <122> addi 	sp,sp,-16 %
000008c7 : 00a12023;   % 1674: <123> sw	a0,0(sp) %
000008c8 : 00b12223;   % 1674: <124> sw	a1,4(sp) %
000008c9 : 00c12423;   % 1674: <125> sw	a2,8(sp) %
000008ca : 00d12623;   % 1674: <126> sw	a3,12(sp) %
000008cb : 00a006b3;   % 1674: <128> mv 	a3,a0 %
000008cc : 00a00613;   % 1674: <129> li 	a2,10 %
000008cd : ff010113;   % 1674: <65> addi 	sp, sp, -16 %
000008ce : 00a12023;   % 1674: <66> sw	a0, 0(sp) %
000008cf : 00e12223;   % 1674: <67> sw	a4, 4(sp) %
000008d0 : 00f12423;   % 1674: <68> sw	a5, 8(sp) %
000008d1 : 00112623;   % 1674: <69> sw	ra, 12(sp) %
000008d2 : 00d00533;   % 1674: <70> mv 	a0, a3 %
000008d3 : 00155713;   % 1674: <71> srli    a4,a0,1 %
000008d4 : 00255793;   % 1674: <72> srli    a5,a0,2 %
000008d5 : 00f707b3;   % 1674: <73> add     a5,a4,a5 %
000008d6 : 0047d713;   % 1674: <74> srli    a4,a5,4 %
000008d7 : 00f70733;   % 1674: <75> add     a4,a4,a5 %
000008d8 : 00875793;   % 1674: <76> srli    a5,a4,8 %
000008d9 : 00e78733;   % 1674: <77> add     a4,a5,a4 %
000008da : 01075793;   % 1674: <78> srli    a5,a4,16 %
000008db : 00e787b3;   % 1674: <79> add     a5,a5,a4 %
000008dc : 0037d793;   % 1674: <80> srli    a5,a5,3 %
000008dd : 00279713;   % 1674: <81> slli    a4,a5,2 %
000008de : 00f70733;   % 1674: <82> add     a4,a4,a5 %
000008df : 00171713;   % 1674: <83> slli    a4,a4,1 %
000008e0 : 40e50533;   % 1674: <84> sub     a0,a0,a4 %
000008e1 : 00a53513;   % 1674: <85> sltiu   a0,a0,10 %
000008e2 : 00154513;   % 1674: <86> xori    a0,a0,1 %
000008e3 : 00f50533;   % 1674: <87> add     a0,a0,a5 %
000008e4 : 04051073;   % 1674: <88> csrw	a0,uscratch %
000008e5 : 00012503;   % 1674: <89> lw	a0, 0(sp) %
000008e6 : 00412703;   % 1674: <90> lw	a4, 4(sp) %
000008e7 : 00812783;   % 1674: <91> lw	a5, 8(sp) %
000008e8 : 00c12083;   % 1674: <92> lw	ra, 12(sp) %
000008e9 : 01010113;   % 1674: <93> addi 	sp, sp, 16 %
000008ea : 04002573;   % 1674: <94> csrr	a0,uscratch %
000008eb : ff410113;   % 1674: <45> addi 	sp, sp, -12 %
000008ec : 00a12023;   % 1674: <46> sw	a0, 0(sp) %
000008ed : 00b12223;   % 1674: <47> sw	a1, 4(sp) %
000008ee : 00112423;   % 1674: <48> sw	ra, 8(sp) %
000008ef : 00a00533;   % 1674: <50> mv 	a0, a0 %
000008f0 : 00c005b3;   % 1674: <51> mv 	a1, a2 %
000008f1 : 094000ef;   % 1674: <52> jal 	__mulsi3 %
000008f2 : 04051073;   % 1674: <53> csrw	a0,uscratch %
000008f3 : 00012503;   % 1674: <55> lw	a0, 0(sp) %
000008f4 : 00412583;   % 1674: <56> lw	a1, 4(sp) %
000008f5 : 00812083;   % 1674: <57> lw	ra, 8(sp) %
000008f6 : 00c10113;   % 1674: <58> addi 	sp, sp, 12 %
000008f7 : 040025f3;   % 1674: <59> csrr	a1,uscratch %
000008f8 : 40b68e33;   % 1674: <132> sub 	t3,a3,a1 %
000008f9 : 040e1073;   % 1674: <134> csrw	t3,uscratch %
000008fa : 00012503;   % 1674: <135> lw	a0,0(sp) %
000008fb : 00412583;   % 1674: <136> lw 	a1,4(sp) %
000008fc : 00812603;   % 1674: <137> lw	a2,8(sp) %
000008fd : 00c12683;   % 1674: <138> lw	a3,12(sp) %
000008fe : 01010113;   % 1674: <139> addi 	sp,sp,16 %
000008ff : 04002e73;   % 1674: <140> csrr	t3,uscratch %
00000900 : 00c0006f;   % 1675: 			j	printIntUnsigned.pula1d %
00000901 : 02755eb3;   % 1676: printIntUnsigned.pula1:	divu 	t4, a0, t2			# divide por 10 (quociente) %
00000902 : 02757e33;   % 1677: 			remu 	t3, a0, t2			# resto %
00000903 : ffc10113;   % 1678: printIntUnsigned.pula1d:addi 	sp, sp, -4			# aloca espaco na pilha %
00000904 : 01c12023;   % 1679: 		sw 	t3, 0(sp)			# coloca resto na pilha %
00000905 : 01d00533;   % 1680: 		mv 	a0, t4				# atualiza o numero com o quociente %
00000906 : 00130313;   % 1681: 		addi 	t1, t1, 1			# incrementa o contador de digitos %
00000907 : e6051ae3;   % 1682: 		bne 	a0, zero, printIntUnsigned.loop1# verifica se o numero eh zero %
00000908 : 00012383;   % 1684: printIntUnsigned.loop2:	lw 	t2, 0(sp)		# le digito da pilha %
00000909 : 00410113;   % 1685: 		addi 	sp, sp, 4			# libera espaco %
0000090a : 03038393;   % 1686: 		addi 	t2, t2, 48			# converte o digito para ascii %
0000090b : 00728023;   % 1687: 		sb 	t2, 0(t0)			# coloca caractere no buffer %
0000090c : 00128293;   % 1688: 		addi 	t0, t0, 1			# incrementa endereco do buffer %
0000090d : fff30313;   % 1689: 		addi 	t1, t1, -1			# decrementa contador de digitos %
0000090e : fe0314e3;   % 1690: 		bne 	t1, zero, printIntUnsigned.loop2# eh o ultimo? %
0000090f : 00028023;   % 1691: 		sb 	zero, 0(t0)			# insere \NULL na string %
00000910 : 0fc25517;   % 1693: 		la 	a0, TempBuffer			# Endereco do buffer da srting %
00000911 : 52850513;   % 1693:  %
00000912 : a6cff0ef;   % 1694: 		jal 	printString			# chama o print string %
00000913 : 00012083;   % 1696: 		lw 	ra, 0(sp)			# recupera a %
00000914 : 00410113;   % 1697: 		addi 	sp, sp, 4			# libera espaco %
00000915 : 00008067;   % 1698: printIntUnsigned.fim:	ret %
00000916 : ff410113;   % 1711: __mulsi3:	addi 	sp,sp,-12 %
00000917 : 00b12023;   % 1712: 		sw 	a1,0(sp) %
00000918 : 00e12223;   % 1713: 		sw 	a4,4(sp) %
00000919 : 00f12423;   % 1714: 		sw	a5,8(sp) %
0000091a : 00a007b3;   % 1716: 	 	mv      a5,a0 %
0000091b : 00000513;   % 1717:         	li      a0,0 %
0000091c : 00078e63;   % 1718: mulsi3.L4: 	beqz    a5,mulsi3.L1 %
0000091d : 0017f713;   % 1719:         	andi    a4,a5,1 %
0000091e : 00070463;   % 1720:         	beqz    a4,mulsi3.L3 %
0000091f : 00b50533;   % 1721:         	add     a0,a0,a1 %
00000920 : 0017d793;   % 1722: mulsi3.L3: 	srli    a5,a5,1 %
00000921 : 00159593;   % 1723:         	slli    a1,a1,1 %
00000922 : fe9ff06f;   % 1724:         	j       mulsi3.L4 %
00000923 : 00012583;   % 1726: mulsi3.L1: 	lw 	a1,0(sp) %
00000924 : 00412703;   % 1727: 		lw	a4,4(sp) %
00000925 : 00812783;   % 1728: 		lw	a5,8(sp) %
00000926 : 00c10113;   % 1729: 		addi 	sp,sp,12 %
00000927 : 00008067;   % 1730: 		ret %
00000928 : ff010113;   % 1734: __udivsi3:	addi 	sp,sp,-16 %
00000929 : 00b12023;   % 1735: 		sw 	a1,0(sp) %
0000092a : 00d12223;   % 1736: 		sw	a3,4(sp) %
0000092b : 00e12423;   % 1737: 		sw 	a4,8(sp) %
0000092c : 00f12623;   % 1738: 		sw	a5,12(sp) %
0000092d : 00a00733;   % 1740:  		mv      a4,a0 %
0000092e : 00155693;   % 1741:         	srli    a3,a0,1 %
0000092f : 00100793;   % 1742:         	li      a5,1 %
00000930 : 00b6e863;   % 1743: udivsi3.L3:    	bltu    a3,a1,udivsi3.L6 %
00000931 : 00179793;   % 1744:         	slli    a5,a5,1 %
00000932 : 00159593;   % 1745:         	slli    a1,a1,1 %
00000933 : ff5ff06f;   % 1746:         	j       udivsi3.L3 %
00000934 : 00000513;   % 1747: udivsi3.L6:    	li      a0,0 %
00000935 : 00078e63;   % 1748: udivsi3.L2:   	beqz    a5,udivsi3.L1 %
00000936 : 00b76663;   % 1749:         	bltu    a4,a1,udivsi3.L5 %
00000937 : 40b70733;   % 1750:         	sub     a4,a4,a1 %
00000938 : 00f50533;   % 1751:         	add     a0,a0,a5 %
00000939 : 0017d793;   % 1752: udivsi3.L5:    	srli    a5,a5,1 %
0000093a : 0015d593;   % 1753:         	srli    a1,a1,1 %
0000093b : fe9ff06f;   % 1754:         	j       udivsi3.L2 %
0000093c : 00012583;   % 1756: udivsi3.L1: 	lw 	a1,0(sp) %
0000093d : 00412683;   % 1757: 		lw	a3,4(sp) %
0000093e : 00812703;   % 1758: 		lw	a4,8(sp) %
0000093f : 00c12783;   % 1759: 		lw	a5,12(sp) %
00000940 : 01010113;   % 1760: 		addi 	sp,sp,16 %
00000941 : 00008067;   % 1761:     		ret %
00000942 : ff410113;   % 1764: __umodsi3:	addi	sp, sp, -12 %
00000943 : 00512023;   % 1765: 		sw 	t0, 0(sp) %
00000944 : 00612223;   % 1766: 		sw 	t1, 4(sp) %
00000945 : 00112423;   % 1767: 		sw 	ra, 8(sp) %
00000946 : 00a002b3;   % 1768: 	 	mv 	t0, a0		# dividendo %
00000947 : 00b00333;   % 1769: 		mv 	t1, a1		# divisor %
00000948 : f81ff0ef;   % 1770: 		jal 	__udivsi3 %
00000949 : 006005b3;   % 1771: 		mv 	a1, t1		# quociente * divisor %
0000094a : f31ff0ef;   % 1772: 		jal 	__mulsi3 %
0000094b : 40a28533;   % 1773: 		sub 	a0, t0, a0	# dividendo-quociente*divisor %
0000094c : 00012283;   % 1774: 		lw 	t0, 0(sp) %
0000094d : 00412303;   % 1775: 		lw 	t1, 4(sp) %
0000094e : 00812083;   % 1776: 		lw 	ra, 8(sp) %
0000094f : 00c10113;   % 1777: 		addi 	sp, sp, 12 %
00000950 : 00008067;   % 1778: 		ret %
00000951 : ff010113;   % 1781: __divsi3:	addi	sp, sp, -16 %
00000952 : 00512023;   % 1782: 		sw 	t0, 0(sp) %
00000953 : 00612223;   % 1783: 		sw 	t1, 4(sp) %
00000954 : 00712423;   % 1784: 		sw 	t2, 8(sp) %
00000955 : 00112623;   % 1785: 		sw 	ra, 12(sp) %
00000956 : 41f55293;   % 1786: 		srai	t0,a0,31	# indica se a0 � pos(0) ou neg (2^32-1) %
00000957 : 41f5d313;   % 1787: 		srai 	t1,a1,31	# indica se a1 � pos(0) ou neg (2^32-1) %
00000958 : 0062c3b3;   % 1788: 		xor	t2,t0,t1	# indica se deve(!=0) ou n�o(==0) inverter o sinal do resultado %
00000959 : 00028463;   % 1789: 		beqz 	t0,divsi3.pula1 %
0000095a : 40a00533;   % 1790: 		neg	a0,a0		# nega %
0000095b : 00030463;   % 1791: divsi3.pula1:	beqz 	t1,divsi3.pula2 %
0000095c : 40b005b3;   % 1792: 		neg	a1,a1		# nega %
0000095d : f2dff0ef;   % 1793: divsi3.pula2:	jal 	__udivsi3	# divis�o unsigned %
0000095e : 00038463;   % 1794: 		beqz	t2, divsi3.pula3	 %
0000095f : 40a00533;   % 1795: 		neg	a0,a0		# nega %
00000960 : 00012283;   % 1796: divsi3.pula3:	lw 	t0, 0(sp) %
00000961 : 00412303;   % 1797: 		lw 	t1, 4(sp) %
00000962 : 00812383;   % 1798: 		lw 	t2, 8(sp) %
00000963 : 00c12083;   % 1799: 		lw 	ra, 12(sp) %
00000964 : 01010113;   % 1800: 		addi 	sp, sp, 16 %
00000965 : 00008067;   % 1801: 		ret %
00000966 : ff410113;   % 1804: __modsi3:	addi	sp, sp, -12 %
00000967 : 00512023;   % 1805: 		sw 	t0, 0(sp) %
00000968 : 00612223;   % 1806: 		sw 	t1, 4(sp) %
00000969 : 00112423;   % 1807: 		sw 	ra, 8(sp) %
0000096a : 41f55293;   % 1808: 		srai	t0,a0,31	# indica se a0 � pos(0) ou neg (2^32-1) %
0000096b : 41f5d313;   % 1809: 		srai 	t1,a1,31	# indica se a1 � pos(0) ou neg (2^32-1) %
0000096c : 00028463;   % 1810: 		beqz 	t0,modsi3.pula1 %
0000096d : 40a00533;   % 1811: 		neg	a0,a0		# nega %
0000096e : 00030463;   % 1812: modsi3.pula1:	beqz 	t1,modsi3.pula2 %
0000096f : 40b005b3;   % 1813: 		neg	a1,a1		# nega %
00000970 : f49ff0ef;   % 1814: modsi3.pula2:	jal 	__umodsi3	# resto unsigned %
00000971 : 00028463;   % 1815: 		beqz	t0, modsi3.pula3	# sinal do dividendo	 %
00000972 : 40a00533;   % 1816: 		neg	a0,a0		# nega %
00000973 : 00012283;   % 1817: modsi3.pula3:	lw 	t0, 0(sp) %
00000974 : 00412303;   % 1818: 		lw 	t1, 4(sp) %
00000975 : 00812083;   % 1819: 		lw 	ra, 8(sp) %
00000976 : 00c10113;   % 1820: 		addi 	sp, sp, 12 %
00000977 : 00008067;   % 1821: 		ret																				 %
00000978 : fe410113;   % 8:   addi sp, sp, -28 %
00000979 : 00112c23;   % 9:   sw ra, 24(sp) %
0000097a : 01e12a23;   % 10:   sw t5, 20(sp) %
0000097b : 01d12823;   % 11:   sw t4, 16(sp) %
0000097c : 01c12623;   % 12:   sw t3, 12(sp) %
0000097d : 00712423;   % 13:   sw t2, 8(sp) %
0000097e : 00612223;   % 14:   sw t1, 4(sp) %
0000097f : 00512023;   % 15:   sw t0, 0(sp) %
00000980 : 00b002b3;   % 17: 	mv t0,a1 # t0 = coluna do jogador %
00000981 : ff950593;   % 19: 	addi a1,a0,-7 #ajusta a0(linha) para a primeira linha do display    %
00000982 : ff628613;   % 20: 	addi a2,t0,-10 # ajusta a1(coluna) para a primeira coluna do display %
00000983 : 0fc25297;   % 21:   la t0, CURRENT_MAP %
00000984 : ae428293;   % 21:  %
00000985 : 0002a503;   % 22: 	lw a0,0(t0) # endereco da matriz do mapa %
00000986 : 00100693;   % 23: 	li a3,1 # .data do mapa em byte %
00000987 : 0ac000ef;   % 25: 	jal AJUSTA_XY # retorna o endereco do mapa para printar somente a parte em que o jogador esta %
00000988 : 00000293;   % 27: 	li t0,0 #a0 = contador coluna %
00000989 : 00000313;   % 28: 	li t1,0 #a1 = contador linha %
0000098a : 00a003b3;   % 29: 	mv t2,a0  #t2 = endereco do .data %
0000098b : 0fc23e17;   % 30: 	la t3,OBJETOS #a3 = comecco do vetor objetos %
0000098c : 734e0e13;   % 30:  %
0000098d : 0003ce83;   % 33: 	lbu t4,0(t2) # t4 recebe o byte da matriz do mapa (indice) %
0000098e : 00400f13;   % 34: 	addi t5,zero,4  %
0000098f : 03df0f33;   % 36: 	mul t5,t5,t4 # quantidade de bytes que serao adicionados ao endereco objetos %
00000990 : 01ee0f33;   % 37: 	add t5,t3,t5 # t5 recebe o endereco do objeto requisitado %
00000991 : 000f2e83;   % 38: 	lw t4,0(t5) # t4 recebe o endereco do objeto daquele tile %
00000992 : 000eaf03;   % 39:   lw t5, 0(t4) # t5 receve o endereco do sprite daquele tile %
00000993 : 005e8f83;   % 40:   lb t6, 5(t4) # t6 recebe se o tile eh espelhado ou nao %
00000994 : 01e00533;   % 43: 	mv a0,t5  #a0 = endereco do sprite %
00000995 : 01000f13;   % 44: 	li t5, 16 %
00000996 : 025f05b3;   % 45: 	mul a1,t5,t0 #a1 = coluna %
00000997 : 026f0633;   % 46: 	mul a2,t5,t1 #a2 = linha %
00000998 : 008006b3;   % 47: 	mv a3, s0 %
00000999 : 01f00733;   % 48:   mv a4, t6 %
0000099a : 2f9020ef;   % 49: 	jal DRAW_IMAGE %
0000099b : 01400f13;   % 51: 	li t5,20     # tamanho da tela  %
0000099c : 00138393;   % 52: 	addi t2,t2,1 # incrementa endereco do mapa %
0000099d : 00128293;   % 53: 	addi t0,t0,1 # adiciona 1 ao contador coluna %
0000099e : fbe2cee3;   % 54: 	blt t0,t5,LOOP_CARREGA_MAPA # verifica se acabaram as colunas %
0000099f : 0fc25f97;   % 56:   la t6, CURRENT_MAP %
000009a0 : a74f8f93;   % 56:  %
000009a1 : 000faf03;   % 57: 	lw t5, 0(t6) %
000009a2 : 000f2f03;   % 58: 	lw t5,0(t5) # largura do mapa %
000009a3 : fec38393;   % 59: 	addi t2,t2,-20  %
000009a4 : 01e383b3;   % 60: 	add t2,t2,t5 # vai para a proxima linha %
000009a5 : 00000293;   % 62: 	li t0,0 # reinicia o contador de colunas %
000009a6 : 00130313;   % 63: 	addi t1,t1,1  # incrementa o contador de linhas %
000009a7 : 00f00f13;   % 64: 	li t5,15  %
000009a8 : f9e34ae3;   % 65: 	blt t1,t5,LOOP_CARREGA_MAPA # verifica se acabaram as linhas %
000009a9 : 00012283;   % 67:   lw t0, 0(sp) %
000009aa : 00412303;   % 68:   lw t1, 4(sp) %
000009ab : 00812383;   % 69:   lw t2, 8(sp) %
000009ac : 00c12e03;   % 70:   lw t3, 12(sp) %
000009ad : 01012e83;   % 71:   lw t4, 16(sp) %
000009ae : 01412f03;   % 72:   lw t5, 20(sp) %
000009af : 01812083;   % 73:   lw ra, 24(sp) %
000009b0 : 01c10113;   % 74:   addi sp, sp, 28 %
000009b1 : 00008067;   % 76: 	ret %
000009b2 : ff010113;   % 88:   addi sp, sp, -16 %
000009b3 : 00112623;   % 89:   sw ra, 12(sp) %
000009b4 : 00712423;   % 90:   sw t2, 8(sp) %
000009b5 : 00612223;   % 91:   sw t1, 4(sp) %
000009b6 : 00512023;   % 92:   sw t0, 0(sp) %
000009b7 : 00052283;   % 94: 	lw t0,0(a0) #t0 = tamanho X do .data %
000009b8 : 02b28333;   % 96: 	mul t1,t0,a1 #t1 = t0 (largura do .data) * a2 (linha) %
000009b9 : 02d30333;   % 97: 	mul t1,t1,a3 #t1 = t1 * a3 (offset/tamanho do passo que eu tenho que dar) %
000009ba : 02c683b3;   % 99: 	mul t2,a3,a2 #t2 = a3 * a2 (coluna em que meu ojeto esta) %
000009bb : 00650533;   % 101: 	add a0,a0,t1 #a0 = a0 (endereco do .data) + t1 (o Y do meu objeto) %
000009bc : 00750533;   % 102: 	add a0,a0,t2 #a0 = a0 + t2 (o X do meu objeto) %
000009bd : 00850513;   % 104: 	addi a0,a0,8 #corrige as duas words do tamanho do .data %
000009be : 00012283;   % 106:   lw t0, 0(sp) %
000009bf : 00412303;   % 107:   lw t1, 4(sp) %
000009c0 : 00812383;   % 108:   lw t2, 8(sp) %
000009c1 : 00c12083;   % 109:   lw ra, 12(sp) %
000009c2 : 01010113;   % 110:   addi sp, sp, 16 %
000009c3 : 00008067;   % 112: 	ret %
000009c4 : fe410113;   % 7:   addi sp, sp, -28 %
000009c5 : 00112023;   % 8:   sw ra, 0(sp) %
000009c6 : 00512223;   % 9:   sw t0, 4(sp) %
000009c7 : 00612423;   % 10:   sw t1, 8(sp) %
000009c8 : 00712623;   % 11:   sw t2, 12(sp) %
000009c9 : 01c12823;   % 12:   sw t3, 16(sp) %
000009ca : 01d12a23;   % 13:   sw t4, 20(sp) %
000009cb : 01e12c23;   % 14:   sw t5, 24(sp) %
000009cc : 009002b3;   % 17:   mv t0, s1 %
000009cd : 01200333;   % 18:   mv t1, s2 %
000009ce : 01300e33;   % 20:   mv t3, s3 %
000009cf : 0fc25e97;   % 22:   la t4, CURRENT_MAP %
000009d0 : 9b4e8e93;   % 22:  %
000009d1 : 000eaf03;   % 23:   lw t5, 0(t4)  # endereco do mapa %
000009d2 : 000f2e83;   % 25:   lw t4, 0(t5)  # largura do mapa %
000009d3 : 025e8eb3;   % 26:   mul t4, t4, t0  # largura * posicao-y do jogador %
000009d4 : 006e8eb3;   % 27:   add t4, t4, t1  # linha do jogador + posicao-x do jogador %
000009d5 : 008e8e93;   % 28:   addi t4, t4, 8 # offset do tile em que o jogador esta %
000009d6 : 01ee8eb3;   % 29:   add t4, t4, t5 # endereco de mem em do tile em que o jogador esta %
000009d7 : 00000f13;   % 31:   li t5, 0 %
000009d8 : 03ee0063;   % 32:   beq t3, t5, CHECK_DIALOG.UP %
000009d9 : 00100f13;   % 34:   li t5, 1 %
000009da : 05ee0c63;   % 35:   beq t3, t5 CHECK_DIALOG.BOTTOM %
000009db : 00200f13;   % 37:   li t5, 2 %
000009dc : 0dee0063;   % 38:   beq t3, t5 CHECK_DIALOG.RIGHT %
000009dd : 00300f13;   % 40:   li t5, 3 %
000009de : 09ee0463;   % 41:   beq t3, t5 CHECK_DIALOG.LEFT %
000009df : 1280006f;   % 43:   j CHECK_DIALOG.FIM %
000009e0 : 0fc25297;   % 46:     la t0, CURRENT_MAP %
000009e1 : 97028293;   % 46:  %
000009e2 : 0002a303;   % 47:     lw t1, 0(t0)  # endereco do mapa %
000009e3 : 00032283;   % 48:     lw t0, 0(t1)  # largura do mapa %
000009e4 : 405e8e33;   % 50:     sub t3, t4, t0 # tile em cima do jogador %
000009e5 : 000e4283;   % 51:     lbu t0, 0(t3) # Numero do tile %
000009e6 : 00400313;   % 52:     li t1, 4 %
000009e7 : 026282b3;   % 53:     mul t0, t0, t1 %
000009e8 : 0fc23317;   % 55:     la t1, OBJETOS # array de objetos %
000009e9 : 5c030313;   % 55:  %
000009ea : 00530333;   % 56:     add t1, t1, t0 # indice objeto do tile na frente do jogador %
000009eb : 00032303;   % 57:     lw t1, 0(t1) # objeto do sprite %
000009ec : 00630383;   % 59:     lb t2, 6(t1) %
000009ed : 00300e13;   % 61:     li t3, 3 %
000009ee : 0bc38463;   % 62:     beq t2, t3, ACTION %
000009ef : 0e80006f;   % 64:     j CHECK_DIALOG.FIM %
000009f0 : 0fc25297;   % 67:     la t0, CURRENT_MAP %
000009f1 : 93028293;   % 67:  %
000009f2 : 0002a303;   % 68:     lw t1, 0(t0)  # endereco do mapa %
000009f3 : 00032283;   % 69:     lw t0, 0(t1)  # largura do mapa %
000009f4 : 005e8e33;   % 71:     add t3, t4, t0 # tile em baixo do jogador %
000009f5 : 000e4283;   % 72:     lbu t0, 0(t3) # Numero do tile %
000009f6 : 00400313;   % 73:     li t1, 4 %
000009f7 : 026282b3;   % 74:     mul t0, t0, t1 %
000009f8 : 0fc23317;   % 76:     la t1, OBJETOS # array de objetos %
000009f9 : 58030313;   % 76:  %
000009fa : 00530333;   % 77:     add t1, t1, t0 # indice objeto do tile na frente do jogador %
000009fb : 00032303;   % 78:     lw t1, 0(t1) # objeto do sprite %
000009fc : 00630383;   % 80:     lb t2, 6(t1) %
000009fd : 00300e13;   % 82:     li t3, 3 %
000009fe : 07c38463;   % 83:     beq t2, t3, ACTION %
000009ff : 0a80006f;   % 85:     j CHECK_DIALOG.FIM %
00000a00 : fffe8e13;   % 88:     addi t3, t4, -1 # tile em cima do jogador %
00000a01 : 000e4283;   % 89:     lbu t0, 0(t3) # Numero do tile %
00000a02 : 00400313;   % 90:     li t1, 4 %
00000a03 : 026282b3;   % 91:     mul t0, t0, t1 %
00000a04 : 0fc23317;   % 93:     la t1, OBJETOS # array de objetos %
00000a05 : 55030313;   % 93:  %
00000a06 : 00530333;   % 94:     add t1, t1, t0 # indice objeto do tile na frente do jogador %
00000a07 : 00032303;   % 95:     lw t1, 0(t1) # objeto do sprite %
00000a08 : 00630383;   % 97:     lb t2, 6(t1) %
00000a09 : 00300e13;   % 99:     li t3, 3 %
00000a0a : 03c38c63;   % 100:     beq t2, t3, ACTION %
00000a0b : 0780006f;   % 102:     j CHECK_DIALOG.FIM %
00000a0c : 001e8e13;   % 105:     addi t3, t4, 1 # tile em cima do jogador %
00000a0d : 000e4283;   % 106:     lbu t0, 0(t3) # Numero do tile %
00000a0e : 00400313;   % 107:     li t1, 4 %
00000a0f : 026282b3;   % 108:     mul t0, t0, t1 %
00000a10 : 0fc23317;   % 110:     la t1, OBJETOS # array de objetos %
00000a11 : 52030313;   % 110:  %
00000a12 : 00530333;   % 111:     add t1, t1, t0 # indice objeto do tile na frente do jogador %
00000a13 : 00032303;   % 112:     lw t1, 0(t1) # objeto do sprite %
00000a14 : 00630383;   % 114:     lb t2, 6(t1) %
00000a15 : 00300e13;   % 116:     li t3, 3 %
00000a16 : 01c38463;   % 117:     beq t2, t3, ACTION %
00000a17 : 0480006f;   % 119:     j CHECK_DIALOG.FIM %
00000a18 : 00730e03;   % 122:     lb t3, 7(t1) %
00000a19 : 00000393;   % 124:     li t2, 0 %
00000a1a : 03c38063;   % 125:     beq t2, t3, GO_CURANDEIRA %
00000a1b : 00100393;   % 127:     li t2, 1 %
00000a1c : 03c38063;   % 128:     beq t2, t3, GO_VENDEDORA %
00000a1d : 00200393;   % 130:     li t2, 2 %
00000a1e : 03c38063;   % 131:     beq t2, t3, GO_PROFESSOR %
00000a1f : 00300393;   % 133:     li t2, 3 %
00000a20 : 03c38063;   % 134:     beq t2, t3, GO_GYM_BATTLE %
00000a21 : 0200006f;   % 136:     j CHECK_DIALOG.FIM %
00000a22 : de9fd0ef;   % 139:       jal NPC_CURANDEIRA %
00000a23 : 018000ef;   % 140:       jal CHECK_DIALOG.FIM %
00000a24 : e35fd0ef;   % 143:       jal VENDEDORA %
00000a25 : 010000ef;   % 144:       jal CHECK_DIALOG.FIM %
00000a26 : ff9fd0ef;   % 147:       jal PROFESSOR %
00000a27 : 008000ef;   % 148:       jal CHECK_DIALOG.FIM %
00000a28 : 028000ef;   % 151:       jal GYM_BATTLE %
00000a29 : 00012083;   % 154:     lw ra, 0(sp) %
00000a2a : 00412283;   % 155:     lw t0, 4(sp) %
00000a2b : 00812303;   % 156:     lw t1, 8(sp) %
00000a2c : 00c12383;   % 157:     lw t2, 12(sp) %
00000a2d : 01012e03;   % 158:     lw t3, 16(sp) %
00000a2e : 01412e83;   % 159:     lw t4, 20(sp) %
00000a2f : 01812f03;   % 160:     lw t5, 24(sp) %
00000a30 : 01c10113;   % 161:     addi sp, sp, 28 %
00000a31 : 00008067;   % 163:     ret %
00000a32 : fe010113;   % 4:     addi sp, sp, -32 %
00000a33 : 00112023;   % 5:     sw ra, 0(sp) %
00000a34 : 00512223;   % 6:     sw t0, 4(sp) %
00000a35 : 00612423;   % 7:     sw t1, 8(sp) %
00000a36 : 00712623;   % 8:     sw t2, 12(sp) %
00000a37 : 01c12823;   % 9:     sw t3, 16(sp) %
00000a38 : 01d12a23;   % 10:     sw t4, 20(sp) %
00000a39 : 01e12c23;   % 11:     sw t5, 24(sp) %
00000a3a : 01f12e23;   % 12:     sw t6, 28(sp) %
00000a3b : 00144413;   % 15:     xori s0, s0, 1 %
00000a3c : 0fc24517;   % 18:     la a0, GIN2 %
00000a3d : 5e250513;   % 18:  %
00000a3e : 008005b3;   % 19:     mv a1, s0 %
00000a3f : 0fc24617;   % 20:     la a2, GIN3 %
00000a40 : 5fb60613;   % 20:  %
00000a41 : 259020ef;   % 21:     jal PRINT_TEXT_BOX %
00000a42 : 0fc24517;   % 24:     la a0, GIN4 %
00000a43 : 5fc50513;   % 24:  %
00000a44 : 008005b3;   % 25:     mv a1, s0 %
00000a45 : 0fc24617;   % 26:     la a2, GIN5 %
00000a46 : 61460613;   % 26:  %
00000a47 : 241020ef;   % 27:     jal PRINT_TEXT_BOX %
00000a48 : 0fc24517;   % 30:     la a0, GIN6 %
00000a49 : 62950513;   % 30:  %
00000a4a : 008005b3;   % 31:     mv a1, s0 %
00000a4b : 00000633;   % 32:     mv a2, zero %
00000a4c : 22d020ef;   % 33:     jal PRINT_TEXT_BOX %
00000a4d : 0fc24517;   % 36:     la a0, GIN8 %
00000a4e : 63450513;   % 36:  %
00000a4f : 008005b3;   % 37:     mv a1, s0 %
00000a50 : 00000633;   % 38:     mv a2, zero %
00000a51 : 219020ef;   % 39:     jal PRINT_TEXT_BOX %
00000a52 : 00000513;   % 42:     li a0, 0 %
00000a53 : 00a005b3;   % 43:     mv a1, a0 %
00000a54 : 19d020ef;   % 44:     jal COLOR_SCREEN %
00000a55 : 3e800513;   % 46:     li a0, 1000 %
00000a56 : c01025f3;   % 47:     csrr a1, 3073 %
00000a57 : 350020ef;   % 48:     jal SLEEP %
00000a58 : 0fc2d517;   % 51:     la a0, P_SINUCA          %
00000a59 : a6c50513;   % 51:  %
00000a5a : 00a00593;   % 52:     li a1, 10 %
00000a5b : 0fc25617;   % 53:     la a2, P_INIMIGO %
00000a5c : 8f060613;   % 53:  %
00000a5d : 561010ef;   % 54:     jal CREATE_POKEMON %
00000a5e : 3c9010ef;   % 57:     jal DRAW_BATTLE_SCREEN %
00000a5f : 260020ef;   % 60:     jal DRAW_PLAYER_POKEMON_BATTLE_INFO %
00000a60 : 140020ef;   % 63:     jal DRAW_ENEMY_POKEMON_BATTLE_INFO %
00000a61 : 0fc25297;   % 66:     la t0, P_PLAYER %
00000a62 : 8e428293;   % 66:  %
00000a63 : 0fc25317;   % 67:     la t1, P_INIMIGO %
00000a64 : 8d030313;   % 67:  %
00000a65 : 0fc25397;   % 72:         la t2, turnos %
00000a66 : 9a138393;   % 72:  %
00000a67 : 00038e03;   % 73:         lb t3, 0(t2) %
00000a68 : 001e0e13;   % 74:         addi t3, t3, 1 %
00000a69 : 01c38023;   % 75:         sb t3, 0(t2) %
00000a6a : 189000ef;   % 78:         jal BATTLE_MENU %
00000a6b : 00a003b3;   % 79:         mv t2, a0 %
00000a6c : 00b00e33;   % 80:         mv t3, a1 %
00000a6d : 00300e93;   % 82:         li t4, 3 %
00000a6e : 45d38863;   % 83:         beq t2, t4, Run_Bat2 %
00000a6f : 0fc25517;   % 85:         la a0, turnos %
00000a70 : 97950513;   % 85:  %
00000a71 : 00050503;   % 86:         lb a0, 0(a0) %
00000a72 : 4a8000ef;   % 87:         jal GYM_POKEMON_DECISION %
00000a73 : 00a00eb3;   % 88:         mv t4, a0 %
00000a74 : 0fc0d517;   % 91:         la a0, dialog_box_battle %
00000a75 : 63050513;   % 91:  %
00000a76 : 000005b3;   % 92:         mv a1, zero %
00000a77 : 0b400613;   % 93:         li a2, 180 %
00000a78 : 008006b3;   % 94:         mv a3, s0 %
00000a79 : 00000733;   % 95:         mv a4, zero %
00000a7a : 778020ef;   % 96:         jal DRAW_IMAGE %
00000a7b : 00100f13;   % 99:         li t5, 1 %
00000a7c : 19e38c63;   % 100:         beq t2, t5, Player_Use_Item2 %
00000a7d : 00500533;   % 104:         mv a0, t0 %
00000a7e : 01600593;   % 105:         li a1, 0x16 %
00000a7f : 13c010ef;   % 106:         jal GET_POKEMON_STAT %
00000a80 : 00a00f33;   % 107:         mv t5, a0 %
00000a81 : 00600533;   % 110:         mv a0, t1 %
00000a82 : 01600593;   % 111:         li a1, 0x16 %
00000a83 : 12c010ef;   % 112:         jal GET_POKEMON_STAT %
00000a84 : 00a00fb3;   % 113:         mv t6, a0 %
00000a85 : 0bff4e63;   % 116:         bgt t6, t5, Gym_Pokemon_First %
00000a86 : 01c00533;   % 120:             mv a0, t3 %
00000a87 : 005005b3;   % 121:             mv a1, t0 %
00000a88 : 00600633;   % 122:             mv a2, t1 %
00000a89 : 065010ef;   % 123:             jal RUN_ATTACK %
00000a8a : 0fc0d517;   % 126:             la a0, dialog_box_battle %
00000a8b : 5d850513;   % 126:  %
00000a8c : 000005b3;   % 127:             mv a1, zero %
00000a8d : 0b400613;   % 128:             li a2, 180 %
00000a8e : 008006b3;   % 129:             mv a3, s0 %
00000a8f : 00000733;   % 130:             mv a4, zero %
00000a90 : 720020ef;   % 131:             jal DRAW_IMAGE %
00000a91 : 00600533;   % 135:             mv a0, t1 %
00000a92 : 08600593;   % 136:             li a1, 134 %
00000a93 : 02100613;   % 137:             li a2, 33 %
00000a94 : 000106b7;   % 138:             li a3, 0x0000FFFF %
00000a95 : fff68693;   % 138:  %
00000a96 : 711010ef;   % 139:             jal DRAW_POKEMON_LIFE_MAX %
00000a97 : 00600533;   % 142:             mv a0, t1 %
00000a98 : 08600593;   % 143:             li a1, 134 %
00000a99 : 02100613;   % 144:             li a2, 33 %
00000a9a : 000106b7;   % 145:             li a3, 0x0000FF00 %
00000a9b : f0068693;   % 145:  %
00000a9c : 651010ef;   % 146:             jal DRAW_POKEMON_LIFE %
00000a9d : 00600533;   % 149:             mv a0, t1 %
00000a9e : 280010ef;   % 150:             jal CHECK_LIFE %
00000a9f : 2c051a63;   % 151:             bnez a0, Won_Battle_Gym %
00000aa0 : 01d00533;   % 154:             mv a0, t4 %
00000aa1 : 006005b3;   % 155:             mv a1, t1 %
00000aa2 : 00500633;   % 156:             mv a2, t0 %
00000aa3 : 7fc010ef;   % 157:             jal RUN_ATTACK %
00000aa4 : 00500533;   % 161:             mv a0, t0 %
00000aa5 : 10900593;   % 162:             li a1, 265 %
00000aa6 : 0a500613;   % 163:             li a2, 165 %
00000aa7 : 000106b7;   % 164:             li a3, 0x0000FFFF %
00000aa8 : fff68693;   % 164:  %
00000aa9 : 6c5010ef;   % 165:             jal DRAW_POKEMON_LIFE_MAX %
00000aaa : 00500533;   % 168:             mv a0, t0 %
00000aab : 10900593;   % 169:             li a1, 265 %
00000aac : 0a500613;   % 170:             li a2, 165 %
00000aad : 000106b7;   % 171:             li a3, 0x0000FF00 %
00000aae : f0068693;   % 171:  %
00000aaf : 605010ef;   % 172:             jal DRAW_POKEMON_LIFE %
00000ab0 : 00500533;   % 175:             mv a0, t0 %
00000ab1 : 234010ef;   % 176:             jal CHECK_LIFE %
00000ab2 : 28051c63;   % 177:             bnez a0, Defeat_Battle_Gym %
00000ab3 : ec9ff06f;   % 180:             j Loop_Gym_Battle %
00000ab4 : 01d00533;   % 184:             mv a0, t4 %
00000ab5 : 006005b3;   % 185:             mv a1, t1 %
00000ab6 : 00500633;   % 186:             mv a2, t0 %
00000ab7 : 7ac010ef;   % 187:             jal RUN_ATTACK %
00000ab8 : 0fc0d517;   % 190:             la a0, dialog_box_battle %
00000ab9 : 52050513;   % 190:  %
00000aba : 000005b3;   % 191:             mv a1, zero %
00000abb : 0b400613;   % 192:             li a2, 180 %
00000abc : 008006b3;   % 193:             mv a3, s0 %
00000abd : 00000733;   % 194:             mv a4, zero %
00000abe : 668020ef;   % 195:             jal DRAW_IMAGE %
00000abf : 00500533;   % 199:             mv a0, t0 %
00000ac0 : 10900593;   % 200:             li a1, 265 %
00000ac1 : 0a500613;   % 201:             li a2, 165 %
00000ac2 : 000106b7;   % 202:             li a3, 0x0000FFFF %
00000ac3 : fff68693;   % 202:  %
00000ac4 : 659010ef;   % 203:             jal DRAW_POKEMON_LIFE_MAX %
00000ac5 : 00500533;   % 206:             mv a0, t0 %
00000ac6 : 10900593;   % 207:             li a1, 265 %
00000ac7 : 0a500613;   % 208:             li a2, 165 %
00000ac8 : 000106b7;   % 209:             li a3, 0x0000FF00 %
00000ac9 : f0068693;   % 209:  %
00000aca : 599010ef;   % 210:             jal DRAW_POKEMON_LIFE %
00000acb : 00500533;   % 213:             mv a0, t0 %
00000acc : 1c8010ef;   % 214:             jal CHECK_LIFE %
00000acd : 22051663;   % 215:             bnez a0, Defeat_Battle_Gym %
00000ace : 01c00533;   % 218:             mv a0, t3 %
00000acf : 005005b3;   % 219:             mv a1, t0 %
00000ad0 : 00600633;   % 220:             mv a2, t1 %
00000ad1 : 744010ef;   % 221:             jal RUN_ATTACK %
00000ad2 : 00600533;   % 225:             mv a0, t1 %
00000ad3 : 08600593;   % 226:             li a1, 134 %
00000ad4 : 02100613;   % 227:             li a2, 33 %
00000ad5 : 000106b7;   % 228:             li a3, 0x0000FFFF %
00000ad6 : fff68693;   % 228:  %
00000ad7 : 60d010ef;   % 229:             jal DRAW_POKEMON_LIFE_MAX %
00000ad8 : 00600533;   % 232:             mv a0, t1 %
00000ad9 : 08600593;   % 233:             li a1, 134 %
00000ada : 02100613;   % 234:             li a2, 33 %
00000adb : 000106b7;   % 235:             li a3, 0x0000FF00 %
00000adc : f0068693;   % 235:  %
00000add : 54d010ef;   % 236:             jal DRAW_POKEMON_LIFE %
00000ade : 00600533;   % 239:             mv a0, t1 %
00000adf : 17c010ef;   % 240:             jal CHECK_LIFE %
00000ae0 : 1c051863;   % 241:             bnez a0, Won_Battle_Gym %
00000ae1 : e11ff06f;   % 244:             j Loop_Gym_Battle %
00000ae2 : 0fc24517;   % 248:             la a0, use_potion_dial %
00000ae3 : 62150513;   % 248:  %
00000ae4 : 01900593;   % 249:             li a1, 25 %
00000ae5 : 0c300613;   % 250:             li a2, 195 %
00000ae6 : 000056b7;   % 251:             li a3, 0x000051FF %
00000ae7 : 1ff68693;   % 251:  %
00000ae8 : 00800733;   % 252:             mv a4, s0 %
00000ae9 : 130020ef;   % 253:             jal PRINT_STRING_SAVE %
00000aea : 00500533;   % 256:             mv a0, t0    %
00000aeb : 01c005b3;   % 257:             mv a1, t3 %
00000aec : 2a1020ef;   % 258:             jal USE_POTION %
00000aed : 200020ef;   % 261:             jal CONFIRM_DIALOG  %
00000aee : 00500533;   % 265:             mv a0, t0 %
00000aef : 10900593;   % 266:             li a1, 265 %
00000af0 : 0a500613;   % 267:             li a2, 165 %
00000af1 : 000106b7;   % 268:             li a3, 0x0000FFFF %
00000af2 : fff68693;   % 268:  %
00000af3 : 59d010ef;   % 269:             jal DRAW_POKEMON_LIFE_MAX %
00000af4 : 00500533;   % 272:             mv a0, t0 %
00000af5 : 10900593;   % 273:             li a1, 265 %
00000af6 : 0a500613;   % 274:             li a2, 165 %
00000af7 : 000106b7;   % 275:             li a3, 0x0000FF00 %
00000af8 : f0068693;   % 275:  %
00000af9 : 4dd010ef;   % 276:             jal DRAW_POKEMON_LIFE %
00000afa : 0fc24517;   % 279:             la a0, use_potion_dial %
00000afb : 5c150513;   % 279:  %
00000afc : 01900593;   % 280:             li a1, 25 %
00000afd : 0c300613;   % 281:             li a2, 195 %
00000afe : 000056b7;   % 282:             li a3, 0x00005151 %
00000aff : 15168693;   % 282:  %
00000b00 : 00800733;   % 283:             mv a4, s0 %
00000b01 : 0d0020ef;   % 284:             jal PRINT_STRING_SAVE %
00000b02 : 1ac020ef;   % 287:             jal CONFIRM_DIALOG  %
00000b03 : 01d00533;   % 290:             mv a0, t4 %
00000b04 : 006005b3;   % 291:             mv a1, t1 %
00000b05 : 00500633;   % 292:             mv a2, t0 %
00000b06 : 670010ef;   % 293:             jal RUN_ATTACK %
00000b07 : 00500533;   % 297:             mv a0, t0 %
00000b08 : 10900593;   % 298:             li a1, 265 %
00000b09 : 0a500613;   % 299:             li a2, 165 %
00000b0a : 000106b7;   % 300:             li a3, 0x0000FFFF %
00000b0b : fff68693;   % 300:  %
00000b0c : 539010ef;   % 301:             jal DRAW_POKEMON_LIFE_MAX %
00000b0d : 00500533;   % 304:             mv a0, t0 %
00000b0e : 10900593;   % 305:             li a1, 265 %
00000b0f : 0a500613;   % 306:             li a2, 165 %
00000b10 : 000106b7;   % 307:             li a3, 0x0000FF00 %
00000b11 : f0068693;   % 307:  %
00000b12 : 479010ef;   % 308:             jal DRAW_POKEMON_LIFE %
00000b13 : 00500533;   % 311:             mv a0, t0 %
00000b14 : 0a8010ef;   % 312:             jal CHECK_LIFE %
00000b15 : 10051663;   % 313:             bnez a0, Defeat_Battle_Gym %
00000b16 : 3a00006f;   % 316:             j Battle_Wild_Pokemon_Loop %
00000b17 : 0fc24517;   % 320:             la a0, fala5 %
00000b18 : 6ba50513;   % 320:  %
00000b19 : 01900593;   % 321:             li a1, 25 %
00000b1a : 0c300613;   % 322:             li a2, 195 %
00000b1b : 000056b7;   % 323:             li a3, 0x000051FF %
00000b1c : 1ff68693;   % 323:  %
00000b1d : 00800733;   % 324:             mv a4, s0 %
00000b1e : 05c020ef;   % 325:             jal PRINT_STRING_SAVE %
00000b1f : 00600533;   % 328:             mv a0, t1    %
00000b20 : 0fc2c597;   % 329:             la a1, I_POTION %
00000b21 : 7f858593;   % 329:  %
00000b22 : 1c9020ef;   % 330:             jal USE_POTION %
00000b23 : 128020ef;   % 333:             jal CONFIRM_DIALOG  %
00000b24 : 00600533;   % 337:             mv a0, t1 %
00000b25 : 08600593;   % 338:             li a1, 134 %
00000b26 : 02100613;   % 339:             li a2, 33 %
00000b27 : 000106b7;   % 340:             li a3, 0x0000FFFF %
00000b28 : fff68693;   % 340:  %
00000b29 : 4c5010ef;   % 341:             jal DRAW_POKEMON_LIFE_MAX %
00000b2a : 00600533;   % 344:             mv a0, t1 %
00000b2b : 08600593;   % 345:             li a1, 134 %
00000b2c : 02100613;   % 346:             li a2, 33 %
00000b2d : 000106b7;   % 347:             li a3, 0x0000FF00 %
00000b2e : f0068693;   % 347:  %
00000b2f : 405010ef;   % 348:             jal DRAW_POKEMON_LIFE %
00000b30 : 0fc24517;   % 351:             la a0, fala5 %
00000b31 : 65650513;   % 351:  %
00000b32 : 01900593;   % 352:             li a1, 25 %
00000b33 : 0c300613;   % 353:             li a2, 195 %
00000b34 : 000056b7;   % 354:             li a3, 0x00005151 %
00000b35 : 15168693;   % 354:  %
00000b36 : 00800733;   % 355:             mv a4, s0 %
00000b37 : 7f9010ef;   % 356:             jal PRINT_STRING_SAVE %
00000b38 : 0d4020ef;   % 359:             jal CONFIRM_DIALOG  %
00000b39 : 01c00533;   % 362:             mv a0, t3 %
00000b3a : 005005b3;   % 363:             mv a1, t0 %
00000b3b : 00600633;   % 364:             mv a2, t1 %
00000b3c : 598010ef;   % 365:             jal RUN_ATTACK %
00000b3d : 0fc0d517;   % 368:             la a0, dialog_box_battle %
00000b3e : 30c50513;   % 368:  %
00000b3f : 000005b3;   % 369:             mv a1, zero %
00000b40 : 0b400613;   % 370:             li a2, 180 %
00000b41 : 008006b3;   % 371:             mv a3, s0 %
00000b42 : 00000733;   % 372:             mv a4, zero %
00000b43 : 454020ef;   % 373:             jal DRAW_IMAGE %
00000b44 : 00600533;   % 377:             mv a0, t1 %
00000b45 : 08600593;   % 378:             li a1, 134 %
00000b46 : 02100613;   % 379:             li a2, 33 %
00000b47 : 000106b7;   % 380:             li a3, 0x0000FFFF %
00000b48 : fff68693;   % 380:  %
00000b49 : 445010ef;   % 381:             jal DRAW_POKEMON_LIFE_MAX %
00000b4a : 00600533;   % 384:             mv a0, t1 %
00000b4b : 08600593;   % 385:             li a1, 134 %
00000b4c : 02100613;   % 386:             li a2, 33 %
00000b4d : 000106b7;   % 387:             li a3, 0x0000FF00 %
00000b4e : f0068693;   % 387:  %
00000b4f : 385010ef;   % 388:             jal DRAW_POKEMON_LIFE %
00000b50 : 00600533;   % 391:             mv a0, t1 %
00000b51 : 7b5000ef;   % 392:             jal CHECK_LIFE %
00000b52 : 00051463;   % 393:             bnez a0,  Won_Battle_Gym %
00000b53 : 2ac0006f;   % 396:             j Battle_Wild_Pokemon_Loop %
00000b54 : 229000ef;   % 399:         jal WILD_BATTLE_VICTORY %
00000b55 : 1ac000ef;   % 400:         jal GYM_BATTLE_VICTORY %
00000b56 : 00100513;   % 401:         li a0, 1 %
00000b57 : 0ec0006f;   % 402:         j End_Gym_Battle %
00000b58 : 0fc0d517;   % 406:         la a0, dialog_box_battle %
00000b59 : 2a050513;   % 406:  %
00000b5a : 000005b3;   % 407:         mv a1, zero %
00000b5b : 0b400613;   % 408:         li a2, 180 %
00000b5c : 008006b3;   % 409:         mv a3, s0 %
00000b5d : 00000733;   % 410:         mv a4, zero %
00000b5e : 3e8020ef;   % 411:         jal DRAW_IMAGE  %
00000b5f : 0fc24517;   % 414:         la a0, P_PLAYER %
00000b60 : 4ec50513;   % 414:  %
00000b61 : 605000ef;   % 415:         jal GET_POKEMON_NAME %
00000b62 : 01000593;   % 417:         li a1, 16 %
00000b63 : 0c800613;   % 418:         li a2, 200 %
00000b64 : 000056b7;   % 419:         li a3, 0x000051FF %
00000b65 : 1ff68693;   % 419:  %
00000b66 : 00800733;   % 420:         mv a4, s0 %
00000b67 : 739010ef;   % 421:         jal PRINT_STRING_SAVE %
00000b68 : 0fc24517;   % 424:         la a0, dead %
00000b69 : 48d50513;   % 424:  %
00000b6a : 01000593;   % 425:         li a1, 16 %
00000b6b : 0dc00613;   % 426:         li a2, 220 %
00000b6c : 000056b7;   % 427:         li a3, 0x000051FF %
00000b6d : 1ff68693;   % 427:  %
00000b6e : 00800733;   % 428:         mv a4, s0 %
00000b6f : 719010ef;   % 429:         jal PRINT_STRING_SAVE %
00000b70 : 7f5010ef;   % 432:         jal CONFIRM_DIALOG %
00000b71 : 17c000ef;   % 434:         jal GYM_BATTLE_DEFEAT %
00000b72 : 4a1000ef;   % 435:         jal BATTLE_DEFEAT %
00000b73 : 0fc24297;   % 437:         la t0, MAPA_OBJ %
00000b74 : 33828293;   % 437:  %
00000b75 : 0002a283;   % 438:         lw t0, 0(t0) %
00000b76 : 0fc24317;   % 440:         la t1, CURRENT_MAP %
00000b77 : 31830313;   % 440:  %
00000b78 : 00532023;   % 441:         sw t0, 0(t1) %
00000b79 : 01800493;   % 443:         li s1, 24 %
00000b7a : 01a00913;   % 444:         li s2, 26 %
00000b7b : 00000993;   % 445:         li s3, 0 %
00000b7c : 0fc24297;   % 447:         la t0, estado_prof %
00000b7d : 75028293;   % 447:  %
00000b7e : 00100313;   % 448:         li t1, 1 %
00000b7f : 00628023;   % 449:         sb t1, 0(t0) %
00000b80 : 00000533;   % 450:         mv a0, zero %
00000b81 : 0440006f;   % 451:         j End_Gym_Battle %
00000b82 : 0fc0d517;   % 455:         la a0, dialog_box_battle %
00000b83 : 1f850513;   % 455:  %
00000b84 : 000005b3;   % 456:         mv a1, zero %
00000b85 : 0b400613;   % 457:         li a2, 180 %
00000b86 : 008006b3;   % 458:         mv a3, s0 %
00000b87 : 344020ef;   % 459:         jal DRAW_IMAGE %
00000b88 : 0fc24517;   % 462:         la a0, fuga %
00000b89 : 4bc50513;   % 462:  %
00000b8a : 01000593;   % 463:         li a1, 16 %
00000b8b : 0c800613;   % 464:         li a2, 200 %
00000b8c : 000056b7;   % 465:         li a3, 0x000051FF %
00000b8d : 1ff68693;   % 465:  %
00000b8e : 00800733;   % 466:         mv a4, s0 %
00000b8f : 699010ef;   % 467:         jal PRINT_STRING_SAVE %
00000b90 : 775010ef;   % 470:         jal CONFIRM_DIALOG   %
00000b91 : b51ff06f;   % 471:         j Loop_Gym_Battle    %
00000b92 : 01c12f83;   % 475:     lw t6, 28(sp) %
00000b93 : 01812f03;   % 476:     lw t5, 24(sp) %
00000b94 : 01412e83;   % 477:     lw t4, 20(sp) %
00000b95 : 01012e03;   % 478:     lw t3, 16(sp) %
00000b96 : 00c12383;   % 479:     lw t2, 12(sp) %
00000b97 : 00812303;   % 480:     lw t1, 8(sp) %
00000b98 : 00412283;   % 481:     lw t0, 4(sp) %
00000b99 : 00012083;   % 482:     lw ra, 0(sp) %
00000b9a : 02010113;   % 483:     addi sp, sp, 32 %
00000b9b : 00008067;   % 486:     ret %
00000b9c : ff410113;   % 495:     addi sp, sp, -12 %
00000b9d : 00112023;   % 496:     sw ra, 0(sp) %
00000b9e : 00512223;   % 497:     sw t0, 4(sp) %
00000b9f : 00612423;   % 498:     sw t1, 8(sp) %
00000ba0 : 0fc24297;   % 500:     la t0, pot_usada %
00000ba1 : 4b628293;   % 500:  %
00000ba2 : 00028283;   % 501:     lb t0, 0 (t0) %
00000ba3 : 02028863;   % 502:     beqz t0, Escolher_Ataque %
00000ba4 : 0fc24517;   % 504:     la a0, P_INIMIGO %
00000ba5 : 3cc50513;   % 504:  %
00000ba6 : 01000593;   % 505:     li a1, 0x10 %
00000ba7 : 49d000ef;   % 506:     jal GET_POKEMON_STAT %
00000ba8 : 00a002b3;   % 507:     mv t0, a0 %
00000ba9 : 0fc24517;   % 509:     la a0, P_INIMIGO %
00000baa : 3b850513;   % 509:  %
00000bab : 01200593;   % 510:     li a1, 0x12 %
00000bac : 489000ef;   % 511:     jal GET_POKEMON_STAT %
00000bad : 00155313;   % 512:     srli t1, a0, 1 %
00000bae : 00535e63;   % 514:     ble t0, t1, Use_Pot %
00000baf : 00100293;   % 517:         li t0, 1 %
00000bb0 : 00550663;   % 518:         beq a0, t0, Aplicar_Prego %
00000bb1 : 00800513;   % 519:         li a0, 8  %
00000bb2 : 0240006f;   % 521:         j End_Pokemon_Gym_Decision %
00000bb3 : 00700513;   % 524:     li a0, 7 %
00000bb4 : 01c0006f;   % 525:     j End_Pokemon_Gym_Decision %
00000bb5 : 07000513;   % 528:         li a0, 'p' %
00000bb6 : 0fc24297;   % 529:         la t0, pot_usada %
00000bb7 : 45e28293;   % 529:  %
00000bb8 : 00028303;   % 530:         lb t1, 0(t0) %
00000bb9 : 00130313;   % 531:         addi t1, t1, 1 %
00000bba : 00628023;   % 532:         sb t1, 0(t0) %
00000bbb : 00812303;   % 535:     lw t1, 8(sp) %
00000bbc : 00412283;   % 536:     lw t0, 4(sp) %
00000bbd : 00012083;   % 537:     lw ra, 0(sp) %
00000bbe : 00c10113;   % 538:     addi sp, sp, 12 %
00000bbf : 00008067;   % 539:     ret %
00000bc0 : 00900533;   % 545:     mv a0,s1 %
00000bc1 : 012005b3;   % 546: 	mv a1,s2 %
00000bc2 : ed8ff0ef;   % 547: 	jal ra, CARREGA_MAPA %
00000bc3 : 1cc020ef;   % 549:   	jal PRINT_PLAYER %
00000bc4 : 0fc24517;   % 552:     la a0, GIN10 %
00000bc5 : 07050513;   % 552:  %
00000bc6 : 008005b3;   % 553:     mv a1, s0 %
00000bc7 : 00000633;   % 554:     mv a2, zero %
00000bc8 : 43c020ef;   % 555:     jal PRINT_TEXT_BOX %
00000bc9 : 0fc24517;   % 558:     la a0, GIN12 %
00000bca : 07850513;   % 558:  %
00000bcb : 008005b3;   % 559:     mv a1, s0 %
00000bcc : 0fc24617;   % 560:     la a2, GIN13 %
00000bcd : 08960613;   % 560:  %
00000bce : 424020ef;   % 561:     jal PRINT_TEXT_BOX %
00000bcf : 798020ef;   % 563:     jal END_GAME %
00000bd0 : ff810113;   % 569:     addi sp, sp -8 %
00000bd1 : 00112023;   % 570:     sw ra, 0(sp) %
00000bd2 : 00512223;   % 571:     sw t0, 4(sp) %
00000bd3 : 00900533;   % 574:     mv a0,s1 %
00000bd4 : 012005b3;   % 575: 	mv a1,s2 %
00000bd5 : e8cff0ef;   % 576: 	jal ra, CARREGA_MAPA %
00000bd6 : 180020ef;   % 578:   	jal PRINT_PLAYER %
00000bd7 : 0fc24517;   % 581:     la a0, GIN14 %
00000bd8 : 06b50513;   % 581:  %
00000bd9 : 008005b3;   % 582:     mv a1, s0 %
00000bda : 0fc24617;   % 583:     la a2, GIN15 %
00000bdb : 07d60613;   % 583:  %
00000bdc : 3ec020ef;   % 584:     jal PRINT_TEXT_BOX %
00000bdd : 0fc24517;   % 587:     la a0, GIN16 %
00000bde : 08b50513;   % 587:  %
00000bdf : 008005b3;   % 588:     mv a1, s0 %
00000be0 : 0fc24617;   % 589:     la a2, GIN17 %
00000be1 : 0a260613;   % 589:  %
00000be2 : 3d4020ef;   % 590:     jal PRINT_TEXT_BOX %
00000be3 : 0fc24297;   % 593:     la t0, passe %
00000be4 : 3d328293;   % 593:  %
00000be5 : 00028023;   % 594:     sb zero, 0(t0)  %
00000be6 : 00412283;   % 597:     lw t0, 4(sp) %
00000be7 : 00012083;   % 598:     lw ra, 0(sp) %
00000be8 : 00810113;   % 599:     addi sp, sp, 8 %
00000be9 : 00008067;   % 602:     ret %
00000bea : fe010113;   % 17:     addi sp, sp, -32 %
00000beb : 00112023;   % 18:     sw ra, 0(sp) %
00000bec : 00512223;   % 19:     sw t0, 4(sp) %
00000bed : 00612423;   % 20:     sw t1, 8(sp) %
00000bee : 00712623;   % 21:     sw t2, 12(sp) %
00000bef : 01c12823;   % 22:     sw t3, 16(sp) %
00000bf0 : 01d12a23;   % 23:     sw t4, 20(sp) %
00000bf1 : 01e12c23;   % 24:     sw t5, 24(sp) %
00000bf2 : 01f12e23;   % 25:     sw t6, 28(sp) %
00000bf3 : 00144413;   % 28:     xori s0, s0, 1 %
00000bf4 : 0fc24617;   % 31:     la a2, P_INIMIGO %
00000bf5 : 28c60613;   % 31:  %
00000bf6 : 6fc010ef;   % 32:     jal CREATE_POKEMON %
00000bf7 : 564010ef;   % 35:     jal DRAW_BATTLE_SCREEN %
00000bf8 : 3fd010ef;   % 38:     jal DRAW_PLAYER_POKEMON_BATTLE_INFO %
00000bf9 : 2dd010ef;   % 41:     jal DRAW_ENEMY_POKEMON_BATTLE_INFO %
00000bfa : 0fc24297;   % 44:     la t0, P_PLAYER %
00000bfb : 28028293;   % 44:  %
00000bfc : 0fc24317;   % 45:     la t1, P_INIMIGO %
00000bfd : 26c30313;   % 45:  %
00000bfe : 338000ef;   % 50:         jal BATTLE_MENU %
00000bff : 00a003b3;   % 51:         mv t2, a0 %
00000c00 : 00b00e33;   % 52:         mv t3, a1 %
00000c01 : 00300e93;   % 54:         li t4, 3 %
00000c02 : 2fd38c63;   % 55:         beq t2, t4, Run_Bat %
00000c03 : 66d000ef;   % 57:         jal WILD_POKEMON_DECISION %
00000c04 : 00a00eb3;   % 58:         mv t4, a0 %
00000c05 : 0fc0d517;   % 61:         la a0, dialog_box_battle %
00000c06 : fec50513;   % 61:  %
00000c07 : 000005b3;   % 62:         mv a1, zero %
00000c08 : 0b400613;   % 63:         li a2, 180 %
00000c09 : 008006b3;   % 64:         mv a3, s0 %
00000c0a : 00000733;   % 65:         mv a4, zero %
00000c0b : 134020ef;   % 66:         jal DRAW_IMAGE %
00000c0c : 00100f13;   % 69:         li t5, 1 %
00000c0d : 17e38e63;   % 70:         beq t2, t5, Player_Use_Item %
00000c0e : 00500533;   % 74:         mv a0, t0 %
00000c0f : 01600593;   % 75:         li a1, 0x16 %
00000c10 : 2f9000ef;   % 76:         jal GET_POKEMON_STAT %
00000c11 : 00a00f33;   % 77:         mv t5, a0 %
00000c12 : 00600533;   % 80:         mv a0, t1 %
00000c13 : 01600593;   % 81:         li a1, 0x16 %
00000c14 : 2e9000ef;   % 82:         jal GET_POKEMON_STAT %
00000c15 : 00a00fb3;   % 83:         mv t6, a0 %
00000c16 : 0bff4e63;   % 86:         bgt t6, t5, Wild_Pokemon_First %
00000c17 : 01c00533;   % 90:             mv a0, t3 %
00000c18 : 005005b3;   % 91:             mv a1, t0 %
00000c19 : 00600633;   % 92:             mv a2, t1 %
00000c1a : 220010ef;   % 93:             jal RUN_ATTACK %
00000c1b : 0fc0d517;   % 96:             la a0, dialog_box_battle %
00000c1c : f9450513;   % 96:  %
00000c1d : 000005b3;   % 97:             mv a1, zero %
00000c1e : 0b400613;   % 98:             li a2, 180 %
00000c1f : 008006b3;   % 99:             mv a3, s0 %
00000c20 : 00000733;   % 100:             mv a4, zero %
00000c21 : 0dc020ef;   % 101:             jal DRAW_IMAGE %
00000c22 : 00600533;   % 105:             mv a0, t1 %
00000c23 : 08600593;   % 106:             li a1, 134 %
00000c24 : 02100613;   % 107:             li a2, 33 %
00000c25 : 000106b7;   % 108:             li a3, 0x0000FFFF %
00000c26 : fff68693;   % 108:  %
00000c27 : 0cd010ef;   % 109:             jal DRAW_POKEMON_LIFE_MAX %
00000c28 : 00600533;   % 112:             mv a0, t1 %
00000c29 : 08600593;   % 113:             li a1, 134 %
00000c2a : 02100613;   % 114:             li a2, 33 %
00000c2b : 000106b7;   % 115:             li a3, 0x0000FF00 %
00000c2c : f0068693;   % 115:  %
00000c2d : 00d010ef;   % 116:             jal DRAW_POKEMON_LIFE %
00000c2e : 00600533;   % 119:             mv a0, t1 %
00000c2f : 43d000ef;   % 120:             jal CHECK_LIFE %
00000c30 : 1c051263;   % 121:             bnez a0, Player_Won %
00000c31 : 01d00533;   % 124:             mv a0, t4 %
00000c32 : 006005b3;   % 125:             mv a1, t1 %
00000c33 : 00500633;   % 126:             mv a2, t0 %
00000c34 : 1b8010ef;   % 127:             jal RUN_ATTACK %
00000c35 : 00500533;   % 131:             mv a0, t0 %
00000c36 : 10900593;   % 132:             li a1, 265 %
00000c37 : 0a500613;   % 133:             li a2, 165 %
00000c38 : 000106b7;   % 134:             li a3, 0x0000FFFF %
00000c39 : fff68693;   % 134:  %
00000c3a : 081010ef;   % 135:             jal DRAW_POKEMON_LIFE_MAX %
00000c3b : 00500533;   % 138:             mv a0, t0 %
00000c3c : 10900593;   % 139:             li a1, 265 %
00000c3d : 0a500613;   % 140:             li a2, 165 %
00000c3e : 000106b7;   % 141:             li a3, 0x0000FF00 %
00000c3f : f0068693;   % 141:  %
00000c40 : 7c0010ef;   % 142:             jal DRAW_POKEMON_LIFE %
00000c41 : 00500533;   % 145:             mv a0, t0 %
00000c42 : 3f1000ef;   % 146:             jal CHECK_LIFE %
00000c43 : 18051263;   % 147:             bnez a0, Wild_Pokemon_Won %
00000c44 : ee9ff06f;   % 150:             j Battle_Wild_Pokemon_Loop %
00000c45 : 01d00533;   % 154:             mv a0, t4 %
00000c46 : 006005b3;   % 155:             mv a1, t1 %
00000c47 : 00500633;   % 156:             mv a2, t0 %
00000c48 : 168010ef;   % 157:             jal RUN_ATTACK %
00000c49 : 00500533;   % 161:             mv a0, t0 %
00000c4a : 10900593;   % 162:             li a1, 265 %
00000c4b : 0a500613;   % 163:             li a2, 165 %
00000c4c : 000106b7;   % 164:             li a3, 0x0000FFFF %
00000c4d : fff68693;   % 164:  %
00000c4e : 031010ef;   % 165:             jal DRAW_POKEMON_LIFE_MAX %
00000c4f : 00500533;   % 168:             mv a0, t0 %
00000c50 : 10900593;   % 169:             li a1, 265 %
00000c51 : 0a500613;   % 170:             li a2, 165 %
00000c52 : 000106b7;   % 171:             li a3, 0x0000FF00 %
00000c53 : f0068693;   % 171:  %
00000c54 : 770010ef;   % 172:             jal DRAW_POKEMON_LIFE %
00000c55 : 00500533;   % 175:             mv a0, t0 %
00000c56 : 3a1000ef;   % 176:             jal CHECK_LIFE %
00000c57 : 12051a63;   % 177:             bnez a0, Wild_Pokemon_Won %
00000c58 : 01c00533;   % 180:             mv a0, t3 %
00000c59 : 005005b3;   % 181:             mv a1, t0 %
00000c5a : 00600633;   % 182:             mv a2, t1 %
00000c5b : 11c010ef;   % 183:             jal RUN_ATTACK %
00000c5c : 00600533;   % 187:             mv a0, t1 %
00000c5d : 08600593;   % 188:             li a1, 134 %
00000c5e : 02100613;   % 189:             li a2, 33 %
00000c5f : 000106b7;   % 190:             li a3, 0x0000FFFF %
00000c60 : fff68693;   % 190:  %
00000c61 : 7e4010ef;   % 191:             jal DRAW_POKEMON_LIFE_MAX %
00000c62 : 00600533;   % 194:             mv a0, t1 %
00000c63 : 08600593;   % 195:             li a1, 134 %
00000c64 : 02100613;   % 196:             li a2, 33 %
00000c65 : 000106b7;   % 197:             li a3, 0x0000FF00 %
00000c66 : f0068693;   % 197:  %
00000c67 : 724010ef;   % 198:             jal DRAW_POKEMON_LIFE %
00000c68 : 00600533;   % 201:             mv a0, t1 %
00000c69 : 355000ef;   % 202:             jal CHECK_LIFE %
00000c6a : 0c051e63;   % 203:             bnez a0, Player_Won %
00000c6b : e4dff06f;   % 206:             j Battle_Wild_Pokemon_Loop %
00000c6c : 0fc24517;   % 210:             la a0, use_potion_dial %
00000c6d : ff950513;   % 210:  %
00000c6e : 01900593;   % 211:             li a1, 25 %
00000c6f : 0c300613;   % 212:             li a2, 195 %
00000c70 : 000056b7;   % 213:             li a3, 0x000051FF %
00000c71 : 1ff68693;   % 213:  %
00000c72 : 00800733;   % 214:             mv a4, s0 %
00000c73 : 309010ef;   % 215:             jal PRINT_STRING_SAVE %
00000c74 : 00500533;   % 218:             mv a0, t0    %
00000c75 : 01c005b3;   % 219:             mv a1, t3 %
00000c76 : 478020ef;   % 220:             jal USE_POTION %
00000c77 : 3d9010ef;   % 223:             jal CONFIRM_DIALOG  %
00000c78 : 00500533;   % 227:             mv a0, t0 %
00000c79 : 10900593;   % 228:             li a1, 265 %
00000c7a : 0a500613;   % 229:             li a2, 165 %
00000c7b : 000106b7;   % 230:             li a3, 0x0000FFFF %
00000c7c : fff68693;   % 230:  %
00000c7d : 774010ef;   % 231:             jal DRAW_POKEMON_LIFE_MAX %
00000c7e : 00500533;   % 234:             mv a0, t0 %
00000c7f : 10900593;   % 235:             li a1, 265 %
00000c80 : 0a500613;   % 236:             li a2, 165 %
00000c81 : 000106b7;   % 237:             li a3, 0x0000FF00 %
00000c82 : f0068693;   % 237:  %
00000c83 : 6b4010ef;   % 238:             jal DRAW_POKEMON_LIFE %
00000c84 : 0fc24517;   % 241:             la a0, use_potion_dial %
00000c85 : f9950513;   % 241:  %
00000c86 : 01900593;   % 242:             li a1, 25 %
00000c87 : 0c300613;   % 243:             li a2, 195 %
00000c88 : 000056b7;   % 244:             li a3, 0x00005151 %
00000c89 : 15168693;   % 244:  %
00000c8a : 00800733;   % 245:             mv a4, s0 %
00000c8b : 2a9010ef;   % 246:             jal PRINT_STRING_SAVE %
00000c8c : 385010ef;   % 249:             jal CONFIRM_DIALOG  %
00000c8d : 01d00533;   % 252:             mv a0, t4 %
00000c8e : 006005b3;   % 253:             mv a1, t1 %
00000c8f : 00500633;   % 254:             mv a2, t0 %
00000c90 : 048010ef;   % 255:             jal RUN_ATTACK %
00000c91 : 00500533;   % 259:             mv a0, t0 %
00000c92 : 10900593;   % 260:             li a1, 265 %
00000c93 : 0a500613;   % 261:             li a2, 165 %
00000c94 : 000106b7;   % 262:             li a3, 0x0000FFFF %
00000c95 : fff68693;   % 262:  %
00000c96 : 710010ef;   % 263:             jal DRAW_POKEMON_LIFE_MAX %
00000c97 : 00500533;   % 266:             mv a0, t0 %
00000c98 : 10900593;   % 267:             li a1, 265 %
00000c99 : 0a500613;   % 268:             li a2, 165 %
00000c9a : 000106b7;   % 269:             li a3, 0x0000FF00 %
00000c9b : f0068693;   % 269:  %
00000c9c : 650010ef;   % 270:             jal DRAW_POKEMON_LIFE %
00000c9d : 00500533;   % 273:             mv a0, t0 %
00000c9e : 281000ef;   % 274:             jal CHECK_LIFE %
00000c9f : 00051a63;   % 275:             bnez a0, Wild_Pokemon_Won %
00000ca0 : d79ff06f;   % 278:             j Battle_Wild_Pokemon_Loop %
00000ca1 : 4f4000ef;   % 281:         jal WILD_BATTLE_VICTORY %
00000ca2 : 00100513;   % 282:         li a0, 1 %
00000ca3 : 07c0006f;   % 283:         j End_Battle_Wild_Pokemon %
00000ca4 : 0fc0d517;   % 287:         la a0, dialog_box_battle %
00000ca5 : d7050513;   % 287:  %
00000ca6 : 000005b3;   % 288:         mv a1, zero %
00000ca7 : 0b400613;   % 289:         li a2, 180 %
00000ca8 : 008006b3;   % 290:         mv a3, s0 %
00000ca9 : 00000733;   % 291:         mv a4, zero %
00000caa : 6b9010ef;   % 292:         jal DRAW_IMAGE  %
00000cab : 0fc24517;   % 295:         la a0, P_PLAYER %
00000cac : fbc50513;   % 295:  %
00000cad : 0d5000ef;   % 296:         jal GET_POKEMON_NAME %
00000cae : 01000593;   % 298:         li a1, 16 %
00000caf : 0c800613;   % 299:         li a2, 200 %
00000cb0 : 000056b7;   % 300:         li a3, 0x000051FF %
00000cb1 : 1ff68693;   % 300:  %
00000cb2 : 00800733;   % 301:         mv a4, s0 %
00000cb3 : 209010ef;   % 302:         jal PRINT_STRING_SAVE %
00000cb4 : 0fc24517;   % 305:         la a0, dead %
00000cb5 : f5d50513;   % 305:  %
00000cb6 : 01000593;   % 306:         li a1, 16 %
00000cb7 : 0dc00613;   % 307:         li a2, 220 %
00000cb8 : 000056b7;   % 308:         li a3, 0x000051FF %
00000cb9 : 1ff68693;   % 308:  %
00000cba : 00800733;   % 309:         mv a4, s0 %
00000cbb : 1e9010ef;   % 310:         jal PRINT_STRING_SAVE %
00000cbc : 2c5010ef;   % 313:         jal CONFIRM_DIALOG %
00000cbd : 774000ef;   % 316:         jal BATTLE_DEFEAT %
00000cbe : 00000533;   % 317:         mv a0, zero %
00000cbf : 00c0006f;   % 318:         j End_Battle_Wild_Pokemon %
00000cc0 : 7c8000ef;   % 321:         jal RUN_BATTLE %
00000cc1 : 00100513;   % 322:         li a0, 1 %
00000cc2 : 01c12f83;   % 326:     lw t6, 28(sp) %
00000cc3 : 01812f03;   % 327:     lw t5, 24(sp) %
00000cc4 : 01412e83;   % 328:     lw t4, 20(sp) %
00000cc5 : 01012e03;   % 329:     lw t3, 16(sp) %
00000cc6 : 00c12383;   % 330:     lw t2, 12(sp) %
00000cc7 : 00812303;   % 331:     lw t1, 8(sp) %
00000cc8 : 00412283;   % 332:     lw t0, 4(sp) %
00000cc9 : 00012083;   % 333:     lw ra, 0(sp) %
00000cca : 02010113;   % 334:     addi sp, sp, 32 %
00000ccb : 00008067;   % 337:     ret %
00000ccc : fec10113;   % 347:     addi sp, sp, -20 %
00000ccd : 00112023;   % 348:     sw ra, 0(sp) %
00000cce : 00512223;   % 349:     sw t0, 4(sp) %
00000ccf : 00612423;   % 350:     sw t1, 8(sp) %
00000cd0 : 00712623;   % 351:     sw t2, 12(sp) %
00000cd1 : 01c12823;   % 352:     sw t3, 16(sp) %
00000cd2 : 0fc0d517;   % 355:     la a0, dialog_box_battle %
00000cd3 : cb850513;   % 355:  %
00000cd4 : 000005b3;   % 356:     mv a1, zero %
00000cd5 : 0b400613;   % 357:     li a2, 180 %
00000cd6 : 008006b3;   % 358:     mv a3, s0 %
00000cd7 : 00000733;   % 359:     mv a4, zero %
00000cd8 : 601010ef;   % 360:     jal DRAW_IMAGE %
00000cd9 : 0fc13517;   % 363:     la a0, options_battle %
00000cda : b5c50513;   % 363:  %
00000cdb : 0a000593;   % 364:     li a1, 160 %
00000cdc : 0b400613;   % 365:     li a2 180 %
00000cdd : 008006b3;   % 366:     mv a3, s0 %
00000cde : 00000733;   % 367:     mv a4, zero %
00000cdf : 5e5010ef;   % 368:     jal DRAW_IMAGE %
00000ce0 : 000002b3;   % 371:     mv t0, zero %
00000ce1 : 0aa00313;   % 372:     li t1, 170 %
00000ce2 : 0c500393;   % 373:     li t2, 197 %
00000ce3 : 00000e33;   % 374:     mv t3, zero %
00000ce4 : 00600533;   % 377:     mv a0, t1 %
00000ce5 : 007005b3;   % 378:     mv a1, t2 %
00000ce6 : 00010637;   % 379:     li a2, 0x0000FF0F %
00000ce7 : f0f60613;   % 379:  %
00000ce8 : 230010ef;   % 380:     jal DRAW_SETA %
00000ce9 : 501010ef;   % 384:         jal KEY2 %
00000cea : 07700293;   % 386:         li t0, 'w' %
00000ceb : 02550463;   % 387:         beq a0, t0, Move_Seta_Up %
00000cec : 07300293;   % 389:         li t0, 's' %
00000ced : 04550e63;   % 390:         beq a0, t0, Move_Seta_Down %
00000cee : 06100293;   % 392:         li t0, 'a' %
00000cef : 0c550663;   % 393:         beq a0, t0, Move_Seta_Left %
00000cf0 : 06400293;   % 395:         li t0, 'd' %
00000cf1 : 08550463;   % 396:         beq a0, t0, Move_Seta_Right %
00000cf2 : 07a00293;   % 398:         li t0, 'z' %
00000cf3 : 0e550c63;   % 399:         beq a0, t0, Change_Menu  %
00000cf4 : fd5ff06f;   % 401:         j Battle_Menu_Loop %
00000cf5 : 0c500293;   % 404:             li t0, 197 %
00000cf6 : fc5386e3;   % 405:             beq t2, t0, Battle_Menu_Loop %
00000cf7 : 00600533;   % 408:             mv a0, t1 %
00000cf8 : 007005b3;   % 409:             mv a1, t2 %
00000cf9 : 00010637;   % 410:             li a2, 0x0000FFFF %
00000cfa : fff60613;   % 410:  %
00000cfb : 1e4010ef;   % 411:             jal DRAW_SETA %
00000cfc : feb38393;   % 414:             addi t2, t2, -21 %
00000cfd : 00600533;   % 417:             mv a0, t1 %
00000cfe : 007005b3;   % 418:             mv a1, t2 %
00000cff : 00010637;   % 419:             li a2, 0x0000FF0F %
00000d00 : f0f60613;   % 419:  %
00000d01 : 1cc010ef;   % 420:             jal DRAW_SETA %
00000d02 : ffee0e13;   % 421:             addi t3, t3, -2 %
00000d03 : f99ff06f;   % 422:             j Battle_Menu_Loop %
00000d04 : 0da00293;   % 425:             li t0, 218 %
00000d05 : f85388e3;   % 426:             beq t2, t0, Battle_Menu_Loop %
00000d06 : 00600533;   % 429:             mv a0, t1 %
00000d07 : 007005b3;   % 430:             mv a1, t2 %
00000d08 : 00010637;   % 431:             li a2, 0x0000FFFF %
00000d09 : fff60613;   % 431:  %
00000d0a : 1a8010ef;   % 432:             jal DRAW_SETA %
00000d0b : 01538393;   % 435:             addi t2, t2, 21 %
00000d0c : 00600533;   % 438:             mv a0, t1 %
00000d0d : 007005b3;   % 439:             mv a1, t2 %
00000d0e : 00010637;   % 440:             li a2, 0x0000FF0F %
00000d0f : f0f60613;   % 440:  %
00000d10 : 190010ef;   % 441:             jal DRAW_SETA %
00000d11 : 002e0e13;   % 442:             addi t3, t3, 2 %
00000d12 : f5dff06f;   % 443:             j Battle_Menu_Loop %
00000d13 : 0f700293;   % 446:             li t0, 247 %
00000d14 : f4530ae3;   % 447:             beq t1, t0, Battle_Menu_Loop %
00000d15 : 00600533;   % 450:             mv a0, t1 %
00000d16 : 007005b3;   % 451:             mv a1, t2 %
00000d17 : 00010637;   % 452:             li a2, 0x0000FFFF %
00000d18 : fff60613;   % 452:  %
00000d19 : 16c010ef;   % 453:             jal DRAW_SETA %
00000d1a : 04d30313;   % 456:             addi t1, t1, 77 %
00000d1b : 00600533;   % 459:             mv a0, t1 %
00000d1c : 007005b3;   % 460:             mv a1, t2 %
00000d1d : 00010637;   % 461:             li a2, 0x0000FF0F %
00000d1e : f0f60613;   % 461:  %
00000d1f : 154010ef;   % 462:             jal DRAW_SETA %
00000d20 : 001e0e13;   % 463:             addi t3, t3, 1 %
00000d21 : f21ff06f;   % 464:             j Battle_Menu_Loop %
00000d22 : 0aa00293;   % 467:             li t0, 170 %
00000d23 : f0530ce3;   % 468:             beq t1, t0, Battle_Menu_Loop %
00000d24 : 00600533;   % 471:             mv a0, t1 %
00000d25 : 007005b3;   % 472:             mv a1, t2 %
00000d26 : 00010637;   % 473:             li a2, 0x0000FFFF %
00000d27 : fff60613;   % 473:  %
00000d28 : 130010ef;   % 474:             jal DRAW_SETA %
00000d29 : fb330313;   % 477:             addi t1, t1, -77 %
00000d2a : 00600533;   % 480:             mv a0, t1 %
00000d2b : 007005b3;   % 481:             mv a1, t2 %
00000d2c : 00010637;   % 482:             li a2, 0x0000FF0F %
00000d2d : f0f60613;   % 482:  %
00000d2e : 118010ef;   % 483:             jal DRAW_SETA %
00000d2f : fffe0e13;   % 484:             addi t3, t3, -1 %
00000d30 : ee5ff06f;   % 485:             j Battle_Menu_Loop %
00000d31 : 000e0c63;   % 489:             beqz t3, Go_Pokemon_Attacks_Menu %
00000d32 : 00100293;   % 491:             li t0, 1 %
00000d33 : 065e0463;   % 492:             beq t3, t0, Go_Items_Menu %
00000d34 : 00300293;   % 495:             li t0, 3 %
00000d35 : 0a5e0c63;   % 496:             beq t3, t0, End_Battle_Menu %
00000d36 : ecdff06f;   % 498:             j Battle_Menu_Loop %
00000d37 : 0d0000ef;   % 501:             jal POKEMON_ATTACKS_MENU %
00000d38 : 0a051663;   % 503:             bnez a0, End_Battle_Menu %
00000d39 : 0fc0d517;   % 505:             la a0, dialog_box_battle %
00000d3a : b1c50513;   % 505:  %
00000d3b : 000005b3;   % 506:             mv a1, zero %
00000d3c : 0b400613;   % 507:             li a2, 180 %
00000d3d : 008006b3;   % 508:             mv a3, s0 %
00000d3e : 00000733;   % 509:             mv a4, zero %
00000d3f : 465010ef;   % 510:             jal DRAW_IMAGE %
00000d40 : 0fc13517;   % 513:             la a0, options_battle %
00000d41 : 9c050513;   % 513:  %
00000d42 : 0a000593;   % 514:             li a1, 160 %
00000d43 : 0b400613;   % 515:             li a2 180 %
00000d44 : 008006b3;   % 516:             mv a3, s0 %
00000d45 : 00000733;   % 517:             mv a4, zero %
00000d46 : 449010ef;   % 518:             jal DRAW_IMAGE %
00000d47 : 00600533;   % 521:             mv a0, t1 %
00000d48 : 007005b3;   % 522:             mv a1, t2 %
00000d49 : 00010637;   % 523:             li a2, 0x0000FF0F %
00000d4a : f0f60613;   % 523:  %
00000d4b : 0a4010ef;   % 524:             jal DRAW_SETA %
00000d4c : e75ff06f;   % 526:             j Battle_Menu_Loop %
00000d4d : 444000ef;   % 529:             jal ITEMS_MENU %
00000d4e : 04051a63;   % 531:             bnez a0, End_Battle_Menu %
00000d4f : 0fc0d517;   % 533:             la a0, dialog_box_battle %
00000d50 : ac450513;   % 533:  %
00000d51 : 000005b3;   % 534:             mv a1, zero %
00000d52 : 0b400613;   % 535:             li a2, 180 %
00000d53 : 008006b3;   % 536:             mv a3, s0 %
00000d54 : 00000733;   % 537:             mv a4, zero %
00000d55 : 40d010ef;   % 538:             jal DRAW_IMAGE %
00000d56 : 0fc13517;   % 541:             la a0, options_battle %
00000d57 : 96850513;   % 541:  %
00000d58 : 0a000593;   % 542:             li a1, 160 %
00000d59 : 0b400613;   % 543:             li a2 180 %
00000d5a : 008006b3;   % 544:             mv a3, s0 %
00000d5b : 00000733;   % 545:             mv a4, zero %
00000d5c : 3f1010ef;   % 546:             jal DRAW_IMAGE %
00000d5d : 00600533;   % 549:             mv a0, t1 %
00000d5e : 007005b3;   % 550:             mv a1, t2 %
00000d5f : 00010637;   % 551:             li a2, 0x0000FF0F %
00000d60 : f0f60613;   % 551:  %
00000d61 : 04c010ef;   % 552:             jal DRAW_SETA %
00000d62 : e1dff06f;   % 554:             j Battle_Menu_Loop %
00000d63 : 01c00533;   % 557:     mv a0, t3               # a0 = t3 %
00000d64 : 01012e03;   % 559:     lw t3, 16(sp) %
00000d65 : 00c12383;   % 560:     lw t2, 12(sp) %
00000d66 : 00812303;   % 561:     lw t1, 8(sp) %
00000d67 : 00412283;   % 562:     lw t0, 4(sp) %
00000d68 : 00012083;   % 563:     lw ra, 0(sp) %
00000d69 : 01410113;   % 564:     addi sp, sp, 20 %
00000d6a : 00008067;   % 567:     ret %
00000d6b : fec10113;   % 576:     addi sp, sp -20 %
00000d6c : 00112023;   % 577:     sw ra, 0(sp) %
00000d6d : 00512223;   % 578:     sw t0, 4(sp) %
00000d6e : 00612423;   % 579:     sw t1, 8(sp) %
00000d6f : 00712623;   % 580:     sw t2, 12(sp) %
00000d70 : 01c12823;   % 581:     sw t3, 16(sp) %
00000d71 : 0fc15517;   % 584:     la a0, pokemon_attacks_menu_bg %
00000d72 : e8450513;   % 584:  %
00000d73 : 000005b3;   % 585:     mv a1, zero %
00000d74 : 0b400613;   % 586:     li a2, 180 %
00000d75 : 008006b3;   % 587:     mv a3, s0 %
00000d76 : 00000733;   % 588:     mv a4, zero %
00000d77 : 385010ef;   % 589:     jal DRAW_IMAGE %
00000d78 : 020010ef;   % 592:     jal PRINT_POKEMON_ATTACKS_NAMES %
00000d79 : 01100313;   % 595:     li t1, 17                   # Coordadena x da seta %
00000d7a : 0c300393;   % 596:     li t2, 195                  # Coordenada y da seta %
00000d7b : 01800e13;   % 597:     li t3, 24 %
00000d7c : 00600533;   % 600:     mv a0, t1 %
00000d7d : 007005b3;   % 601:     mv a1, t2 %
00000d7e : 00010637;   % 602:     li a2, 0x0000FF0F %
00000d7f : f0f60613;   % 602:  %
00000d80 : 7d1000ef;   % 603:     jal DRAW_SETA %
00000d81 : 2a1010ef;   % 607:         jal KEY2 %
00000d82 : 07700293;   % 610:         li t0, 'w' %
00000d83 : 02550863;   % 611:         beq a0, t0, Move_Seta_Up2 %
00000d84 : 07300293;   % 613:         li t0, 's' %
00000d85 : 06550263;   % 614:         beq a0, t0, Move_Seta_Down2 %
00000d86 : 06100293;   % 616:         li t0, 'a' %
00000d87 : 08550c63;   % 617:         beq a0, t0, Move_Seta_Left2 %
00000d88 : 06400293;   % 619:         li t0, 'd' %
00000d89 : 0c550663;   % 620:         beq a0, t0, Move_Seta_Right2 %
00000d8a : 07a00293;   % 622:         li t0, 'z' %
00000d8b : 10550063;   % 623:         beq a0, t0, Check_Attack  %
00000d8c : 07800293;   % 625:         li t0, 'x' %
00000d8d : 12550063;   % 626:         beq a0, t0, Back_Battle_Menu %
00000d8e : fcdff06f;   % 628:         j Pokemon_Attacks_Menu_Loop %
00000d8f : 0c300293;   % 631:             li t0, 195 %
00000d90 : fc5382e3;   % 632:             beq t2, t0, Pokemon_Attacks_Menu_Loop %
00000d91 : 00600533;   % 634:             mv a0, t1 %
00000d92 : 007005b3;   % 635:             mv a1, t2 %
00000d93 : 00010637;   % 636:             li a2, 0x0000FFFF %
00000d94 : fff60613;   % 636:  %
00000d95 : 77d000ef;   % 637:             jal DRAW_SETA %
00000d96 : fec38393;   % 640:             addi t2, t2, -20 %
00000d97 : 00600533;   % 643:             mv a0, t1 %
00000d98 : 007005b3;   % 644:             mv a1, t2 %
00000d99 : 00010637;   % 645:             li a2, 0x0000FF0F %
00000d9a : f0f60613;   % 645:  %
00000d9b : 765000ef;   % 646:             jal DRAW_SETA %
00000d9c : 010e0e13;   % 647:             addi t3, t3, 16 %
00000d9d : f91ff06f;   % 648:             j Pokemon_Attacks_Menu_Loop %
00000d9e : 0dc00293;   % 651:             li t0, 220 %
00000d9f : f85384e3;   % 652:             beq t2, t0, Pokemon_Attacks_Menu_Loop %
00000da0 : 00600533;   % 654:             mv a0, t1 %
00000da1 : 007005b3;   % 655:             mv a1, t2 %
00000da2 : 00010637;   % 656:             li a2, 0x0000FFFF %
00000da3 : fff60613;   % 656:  %
00000da4 : 741000ef;   % 657:             jal DRAW_SETA %
00000da5 : 01438393;   % 660:             addi t2, t2, 20 %
00000da6 : 00600533;   % 663:             mv a0, t1 %
00000da7 : 007005b3;   % 664:             mv a1, t2 %
00000da8 : 00010637;   % 665:             li a2, 0x0000FF0F %
00000da9 : f0f60613;   % 665:  %
00000daa : 729000ef;   % 666:             jal DRAW_SETA %
00000dab : ff0e0e13;   % 667:             addi t3, t3, -16 %
00000dac : f55ff06f;   % 668:             j Pokemon_Attacks_Menu_Loop %
00000dad : 01100293;   % 671:             li t0, 17 %
00000dae : f45306e3;   % 672:             beq t1, t0, Pokemon_Attacks_Menu_Loop %
00000daf : 00600533;   % 675:             mv a0, t1 %
00000db0 : 007005b3;   % 676:             mv a1, t2 %
00000db1 : 00010637;   % 677:             li a2, 0x0000FFFF %
00000db2 : fff60613;   % 677:  %
00000db3 : 705000ef;   % 678:             jal DRAW_SETA %
00000db4 : f9c30313;   % 681:             addi t1, t1, -100 %
00000db5 : 00600533;   % 684:             mv a0, t1 %
00000db6 : 007005b3;   % 685:             mv a1, t2 %
00000db7 : 00010637;   % 686:             li a2, 0x0000FF0F %
00000db8 : f0f60613;   % 686:  %
00000db9 : 6ed000ef;   % 687:             jal DRAW_SETA %
00000dba : 008e0e13;   % 688:             addi t3, t3, 8 %
00000dbb : f19ff06f;   % 689:             j Pokemon_Attacks_Menu_Loop %
00000dbc : 07500293;   % 692:             li t0, 117 %
00000dbd : f05308e3;   % 693:             beq t1, t0, Pokemon_Attacks_Menu_Loop %
00000dbe : 00600533;   % 696:             mv a0, t1 %
00000dbf : 007005b3;   % 697:             mv a1, t2 %
00000dc0 : 00010637;   % 698:             li a2, 0x0000FFFF %
00000dc1 : fff60613;   % 698:  %
00000dc2 : 6c9000ef;   % 699:             jal DRAW_SETA %
00000dc3 : 06430313;   % 702:             addi t1, t1, 100 %
00000dc4 : 00600533;   % 705:             mv a0, t1 %
00000dc5 : 007005b3;   % 706:             mv a1, t2 %
00000dc6 : 00010637;   % 707:             li a2, 0x0000FF0F %
00000dc7 : f0f60613;   % 707:  %
00000dc8 : 6b1000ef;   % 708:             jal DRAW_SETA %
00000dc9 : ff8e0e13;   % 709:             addi t3, t3, -8 %
00000dca : eddff06f;   % 710:             j Pokemon_Attacks_Menu_Loop %
00000dcb : 0fc24297;   % 713:             la t0, P_PLAYER %
00000dcc : b3c28293;   % 713:  %
00000dcd : 0082a283;   % 714:             lw t0, 8(t0)                        # Load na word de ataques do pokémon do jogador %
00000dce : 01c2d2b3;   % 715:             srl t0, t0, t3                      # t0 = t0 shifitado t3 bits para a direita (extrair o index do ataque selecionado) %
00000dcf : 0ff2f293;   % 716:             andi t0, t0, 0xFF  %
00000dd0 : ec0282e3;   % 717:             beqz t0, Pokemon_Attacks_Menu_Loop  # Se t0 = 0, o slot de ataque está vazio %
00000dd1 : 0042d293;   % 718:             srli t0, t0, 4 %
00000dd2 : 005005b3;   % 719:             mv a1, t0 %
00000dd3 : 00100513;   % 720:             li a0, 1 %
00000dd4 : 00c0006f;   % 721:             j End_Pokemon_Attacks_Menu %
00000dd5 : 00000533;   % 724:             mv a0, zero %
00000dd6 : 000005b3;   % 725:             mv a1, zero %
00000dd7 : 01012e03;   % 730:     lw t3, 16(sp) %
00000dd8 : 00c12383;   % 731:     lw t2, 12(sp) %
00000dd9 : 00812303;   % 732:     lw t1, 8(sp) %
00000dda : 00412283;   % 733:     lw t0, 4(sp) %
00000ddb : 00012083;   % 734:     lw ra, 0(sp) %
00000ddc : 01410113;   % 735:     addi sp, sp, 20 %
00000ddd : 00008067;   % 736:     ret %
00000dde : ff410113;   % 747:     addi sp, sp, -12 %
00000ddf : 00112023;   % 748:     sw ra, 0(sp) %
00000de0 : 00512223;   % 749:     sw t0, 4(sp) %
00000de1 : 00612423;   % 750:     sw t1, 8(sp) %
00000de2 : 0fc0d517;   % 753:     la a0, dialog_box_battle %
00000de3 : 87850513;   % 753:  %
00000de4 : 000005b3;   % 754:     mv a1, zero %
00000de5 : 0b400613;   % 755:     li a2, 180 %
00000de6 : 008006b3;   % 756:     mv a3, s0 %
00000de7 : 00000733;   % 757:     mv a4, zero %
00000de8 : 1c1010ef;   % 758:     jal DRAW_IMAGE %
00000de9 : 0fc24517;   % 762:     la a0, dead_battle %
00000dea : 97f50513;   % 762:  %
00000deb : 01000593;   % 763:     li a1, 16 %
00000dec : 0c800613;   % 764:     li a2, 200 %
00000ded : 000056b7;   % 765:     li a3, 0x000051FF %
00000dee : 1ff68693;   % 765:  %
00000def : 00800733;   % 766:     mv a4, s0 %
00000df0 : 514010ef;   % 767:     jal PRINT_STRING_SAVE %
00000df1 : 5f0010ef;   % 770:     jal CONFIRM_DIALOG %
00000df2 : 0fc24517;   % 773:     la a0, dead_battle %
00000df3 : 95b50513;   % 773:  %
00000df4 : 01000593;   % 774:     li a1, 16 %
00000df5 : 0c800613;   % 775:     li a2, 200 %
00000df6 : 000056b7;   % 776:     li a3, 0x00005151 %
00000df7 : 15168693;   % 776:  %
00000df8 : 00800733;   % 777:     mv a4, s0 %
00000df9 : 4f0010ef;   % 778:     jal PRINT_STRING_SAVE %
00000dfa : 0fc24517;   % 781:     la a0, xp_battle1 %
00000dfb : 95550513;   % 781:  %
00000dfc : 01000593;   % 782:     li a1, 16 %
00000dfd : 0c800613;   % 783:     li a2, 200 %
00000dfe : 000056b7;   % 784:     li a3, 0x000051FF %
00000dff : 1ff68693;   % 784:  %
00000e00 : 00800733;   % 785:     mv a4, s0 %
00000e01 : 4d0010ef;   % 786:     jal PRINT_STRING_SAVE %
00000e02 : 0fc24517;   % 789:     la a0, P_INIMIGO %
00000e03 : a5450513;   % 789:  %
00000e04 : 00200593;   % 790:     li a1, 0x02 %
00000e05 : 324000ef;   % 791:     jal GET_POKEMON_STAT %
00000e06 : 0c800593;   % 792:     li a1, 200 %
00000e07 : 0c800613;   % 793:     li a2, 200 %
00000e08 : 000056b7;   % 794:     li a3, 0x000051FF %
00000e09 : 1ff68693;   % 794:  %
00000e0a : 00800733;   % 795:     mv a4, s0 %
00000e0b : 518010ef;   % 796:     jal PRINT_INT_SAVE %
00000e0c : 0fc24517;   % 799:     la a0, xp_battle2 %
00000e0d : 92450513;   % 799:  %
00000e0e : 01000593;   % 800:     li a1, 16 %
00000e0f : 0dc00613;   % 801:     li a2, 220 %
00000e10 : 000056b7;   % 802:     li a3, 0x000051FF %
00000e11 : 1ff68693;   % 802:  %
00000e12 : 00800733;   % 803:     mv a4, s0 %
00000e13 : 488010ef;   % 804:     jal PRINT_STRING_SAVE %
00000e14 : 0fc24517;   % 808:     la a0, P_PLAYER %
00000e15 : a1850513;   % 808:  %
00000e16 : 00400593;   % 809:     li a1, 0x04 %
00000e17 : 2dc000ef;   % 810:     jal GET_POKEMON_STAT %
00000e18 : 00a002b3;   % 811:     mv t0, a0 %
00000e19 : 0fc24517;   % 814:     la a0, P_INIMIGO %
00000e1a : 9f850513;   % 814:  %
00000e1b : 00200593;   % 815:     li a1, 0x02             # level = xp adquirida de uma batalha com pokemon selvagem %
00000e1c : 2c8000ef;   % 816:     jal GET_POKEMON_STAT %
00000e1d : 00a28633;   % 819:     add a2, t0, a0 %
00000e1e : 0fc24517;   % 820:     la a0, P_PLAYER %
00000e1f : 9f050513;   % 820:  %
00000e20 : 00400593;   % 821:     li a1, 0x04 %
00000e21 : 414000ef;   % 822:     jal SET_POKEMON_STAT %
00000e22 : 52c010ef;   % 825:     jal CONFIRM_DIALOG   %
00000e23 : 498000ef;   % 828:     jal CHECK_LEVEL_UP %
00000e24 : 0c050063;   % 829:     beqz a0, End_Wild_Battle_Victory %
00000e25 : 4e4000ef;   % 830:     jal LEVEL_UP %
00000e26 : 0fc24517;   % 833:     la a0, xp_battle1 %
00000e27 : 8a550513;   % 833:  %
00000e28 : 00a00593;   % 834:     li a1, 10 %
00000e29 : 0c800613;   % 835:     li a2, 200 %
00000e2a : 000056b7;   % 836:     li a3, 0x00005151 %
00000e2b : 15168693;   % 836:  %
00000e2c : 00800733;   % 837:     mv a4, s0 %
00000e2d : 420010ef;   % 838:     jal PRINT_STRING_SAVE %
00000e2e : 00a00513;   % 840:     li a0, 10 %
00000e2f : 0c800593;   % 841:     li a1, 200 %
00000e30 : 0c800613;   % 842:     li a2, 200 %
00000e31 : 000056b7;   % 843:     li a3, 0x00005151 %
00000e32 : 15168693;   % 843:  %
00000e33 : 00800733;   % 844:     mv a4, s0 %
00000e34 : 474010ef;   % 845:     jal PRINT_INT_SAVE %
00000e35 : 0fc24517;   % 847:     la a0, xp_battle2 %
00000e36 : 88050513;   % 847:  %
00000e37 : 01000593;   % 848:     li a1, 16 %
00000e38 : 0dc00613;   % 849:     li a2, 220 %
00000e39 : 000056b7;   % 850:     li a3, 0x00005151 %
00000e3a : 15168693;   % 850:  %
00000e3b : 00800733;   % 851:     mv a4, s0 %
00000e3c : 3e4010ef;   % 852:     jal PRINT_STRING_SAVE %
00000e3d : 0fc24517;   % 855:     la a0, lvl_up_battle %
00000e3e : 86e50513;   % 855:  %
00000e3f : 01000593;   % 856:     li a1, 16 %
00000e40 : 0c800613;   % 857:     li a2, 200 %
00000e41 : 000056b7;   % 858:     li a3, 0x000051FF %
00000e42 : 1ff68693;   % 858:  %
00000e43 : 00800733;   % 859:     mv a4, s0 %
00000e44 : 3c4010ef;   % 860:     jal PRINT_STRING_SAVE %
00000e45 : 0fc24517;   % 862:     la a0, P_PLAYER %
00000e46 : 95450513;   % 862:  %
00000e47 : 00200593;   % 863:     li a1, 0x02 %
00000e48 : 218000ef;   % 864:     jal GET_POKEMON_STAT %
00000e49 : 12a00593;   % 865:     li a1, 298 %
00000e4a : 0c800613;   % 866:     li a2, 200 %
00000e4b : 000056b7;   % 867:     li a3, 0x000051FF %
00000e4c : 1ff68693;   % 867:  %
00000e4d : 00800733;   % 868:     mv a4, s0 %
00000e4e : 40c010ef;   % 869:     jal PRINT_INT_SAVE %
00000e4f : 478010ef;   % 872:     jal CONFIRM_DIALOG  %
00000e50 : 23c010ef;   % 875:     jal PRINT_PLAYER_POKEMON_LIFE %
00000e51 : 268010ef;   % 876:     jal PRINT_PLAYER_POKEMON_LIFE_MAX %
00000e52 : 204010ef;   % 877:     jal PRINT_PLAYER_POKEMON_LEVEL %
00000e53 : 468010ef;   % 880:     jal CONFIRM_DIALOG  %
00000e54 : 0fc24297;   % 884:     la t0, creditos %
00000e55 : 92428293;   % 884:  %
00000e56 : 0002c303;   % 885:     lbu t1, 0(t0) %
00000e57 : 00a30313;   % 886:     addi t1, t1, 10 %
00000e58 : 00628023;   % 887:     sb t1, 0(t0) %
00000e59 : 00812303;   % 890:     lw t1, 8(sp) %
00000e5a : 00412283;   % 891:     lw t0, 4(sp) %
00000e5b : 00012083;   % 892:     lw ra, 0(sp) %
00000e5c : 00c10113;   % 893:     addi sp, sp, 12 %
00000e5d : 00008067;   % 896:     ret %
00000e5e : ff810113;   % 905:     addi sp, sp -8 %
00000e5f : 00112023;   % 906:     sw ra, 0(sp) %
00000e60 : 00512223;   % 907:     sw t0, 4(sp) %
00000e61 : 0fc15517;   % 910:     la a0, pokemon_attacks_menu_bg %
00000e62 : ac450513;   % 910:  %
00000e63 : 000005b3;   % 911:     mv a1, zero %
00000e64 : 0b400613;   % 912:     li a2, 180 %
00000e65 : 008006b3;   % 913:     mv a3, s0 %
00000e66 : 00000733;   % 914:     mv a4, zero %
00000e67 : 7c4010ef;   % 915:     jal DRAW_IMAGE %
00000e68 : 0fc2c517;   % 918:     la a0, n_potion %
00000e69 : ad950513;   % 918:  %
00000e6a : 01900593;   % 919:     li a1, 25 %
00000e6b : 0c300613;   % 920:     li a2, 195 %
00000e6c : 000106b7;   % 921:     li a3, 0x0000FF00 %
00000e6d : f0068693;   % 921:  %
00000e6e : 00800733;   % 922:     mv a4, s0 %
00000e6f : 318010ef;   % 923:     jal PRINT_STRING_SAVE %
00000e70 : 0fc23517;   % 926:     la a0, x %
00000e71 : 76150513;   % 926:  %
00000e72 : 05000593;   % 927:     li a1, 80 %
00000e73 : 0c300613;   % 928:     li a2, 195 %
00000e74 : 000106b7;   % 929:     li a3, 0x0000FF00 %
00000e75 : f0068693;   % 929:  %
00000e76 : 00800733;   % 930:     mv a4, s0 %
00000e77 : 2f8010ef;   % 931:     jal PRINT_STRING_SAVE %
00000e78 : 0fc23517;   % 934:     la a0, player_bag %
00000e79 : 70850513;   % 934:  %
00000e7a : 00452503;   % 935:     lw a0, 4(a0) %
00000e7b : 05800593;   % 936:     li a1, 88 %
00000e7c : 0c300613;   % 937:     li a2, 195 %
00000e7d : 000106b7;   % 938:     li a3, 0x0000FF00 %
00000e7e : f0068693;   % 938:  %
00000e7f : 00800733;   % 939:     mv a4, s0 %
00000e80 : 344010ef;   % 940:     jal PRINT_INT_SAVE %
00000e81 : 01100513;   % 943:     li a0, 17 %
00000e82 : 0c300593;   % 944:     li a1, 195 %
00000e83 : 00010637;   % 945:     li a2, 0x0000FF0F %
00000e84 : f0f60613;   % 945:  %
00000e85 : 3bd000ef;   % 946:     jal DRAW_SETA %
00000e86 : 68c010ef;   % 950:         jal KEY2 %
00000e87 : 07a00293;   % 953:         li t0, 'z' %
00000e88 : 00550863;   % 954:         beq a0, t0, Use_Item  %
00000e89 : 07800293;   % 956:         li t0, 'x' %
00000e8a : 02550463;   % 957:         beq a0, t0, Back_Battle_Menu3 %
00000e8b : fedff06f;   % 959:         j Items_Menu_Loop %
00000e8c : 0fc23297;   % 962:             la t0, player_bag %
00000e8d : 6b828293;   % 962:  %
00000e8e : 0042a283;   % 963:             lw t0, 4(t0) %
00000e8f : fc028ee3;   % 964:             beqz t0, Items_Menu_Loop %
00000e90 : 00100513;   % 965:             li a0, 1 %
00000e91 : 0fc2c597;   % 966:             la a1, I_POTION %
00000e92 : a3458593;   % 966:  %
00000e93 : 00c0006f;   % 967:             j End_Items_Menu %
00000e94 : 00000533;   % 970:             mv a0, zero %
00000e95 : 000005b3;   % 971:             mv a1, zero %
00000e96 : 00412283;   % 976:     lw t0, 4(sp) %
00000e97 : 00012083;   % 977:     lw ra, 0(sp) %
00000e98 : 00810113;   % 978:     addi sp, sp, 8 %
00000e99 : 00008067;   % 979:     ret %
00000e9a : ffc10113;   % 985:     addi sp, sp, -4 %
00000e9b : 00112023;   % 986:     sw ra, 0(sp) %
00000e9c : 00000513;   % 989:     li a0, 0 %
00000e9d : 008005b3;   % 990:     mv a1, s0 %
00000e9e : 075010ef;   % 991:     jal COLOR_SCREEN %
00000e9f : 338010ef;   % 994:     jal CONFIRM_DIALOG %
00000ea0 : 0fc23517;   % 997:     la a0, defeat %
00000ea1 : 74950513;   % 997:  %
00000ea2 : 00000593;   % 998:     li a1, 0 %
00000ea3 : 06400613;   % 999:     li a2, 100 %
00000ea4 : 0f000693;   % 1000:     li a3, 0x000000F0 %
00000ea5 : 00800733;   % 1001:     mv a4, s0 %
00000ea6 : 23c010ef;   % 1002:     jal PRINT_STRING_SAVE %
00000ea7 : 0fc23517;   % 1005:     la a0, revive_poke %
00000ea8 : 76150513;   % 1005:  %
00000ea9 : 00000593;   % 1006:     li a1, 0 %
00000eaa : 07800613;   % 1007:     li a2, 120 %
00000eab : 00f00693;   % 1008:     li a3, 0x0000000F %
00000eac : 00800733;   % 1009:     mv a4, s0 %
00000ead : 220010ef;   % 1010:     jal PRINT_STRING_SAVE %
00000eae : 2fc010ef;   % 1013:     jal CONFIRM_DIALOG %
00000eaf : 00012083;   % 1016:     lw ra, 0(sp) %
00000eb0 : 00410113;   % 1017:     addi sp, sp, 4 %
00000eb1 : 00008067;   % 1020:     ret %
00000eb2 : ffc10113;   % 1026:     addi sp, sp, -4 %
00000eb3 : 00112023;   % 1027:     sw ra, 0(sp) %
00000eb4 : 0fc0c517;   % 1030:     la a0, dialog_box_battle %
00000eb5 : 53050513;   % 1030:  %
00000eb6 : 000005b3;   % 1031:     mv a1, zero %
00000eb7 : 0b400613;   % 1032:     li a2, 180 %
00000eb8 : 008006b3;   % 1033:     mv a3, s0 %
00000eb9 : 67c010ef;   % 1034:     jal DRAW_IMAGE %
00000eba : 0fc23517;   % 1037:     la a0, str_run %
00000ebb : 74d50513;   % 1037:  %
00000ebc : 01000593;   % 1038:     li a1, 16 %
00000ebd : 0c800613;   % 1039:     li a2, 200 %
00000ebe : 000056b7;   % 1040:     li a3, 0x000051FF %
00000ebf : 1ff68693;   % 1040:  %
00000ec0 : 00800733;   % 1041:     mv a4, s0 %
00000ec1 : 1d0010ef;   % 1042:     jal PRINT_STRING_SAVE %
00000ec2 : 0fc23517;   % 1045:     la a0, covarde %
00000ec3 : 74550513;   % 1045:  %
00000ec4 : 01000593;   % 1046:     li a1, 16 %
00000ec5 : 0dc00613;   % 1047:     li a2, 220 %
00000ec6 : 000056b7;   % 1048:     li a3, 0x000051FF %
00000ec7 : 1ff68693;   % 1048:  %
00000ec8 : 00800733;   % 1049:     mv a4, s0 %
00000ec9 : 1b0010ef;   % 1050:     jal PRINT_STRING_SAVE %
00000eca : 28c010ef;   % 1055:     jal CONFIRM_DIALOG    %
00000ecb : 00012083;   % 1058:     lw ra, 0(sp) %
00000ecc : 00410113;   % 1059:     addi sp, sp, 4 %
00000ecd : 00008067;   % 1062:     ret %
00000ece : ff410113;   % 146:     addi sp, sp, -12 %
00000ecf : 00512023;   % 147:     sw t0, 0(sp) %
00000ed0 : 00612223;   % 148:     sw t1, 4(sp) %
00000ed1 : 00712423;   % 149:     sw t2, 8(sp) %
00000ed2 : 0105a293;   % 152:     slti t0, a1, 16             # t0 = 1, se a1 < 0x010, 0 se a1 >= 0x010  %
00000ed3 : 00028663;   % 153:     beq t0, zero, Second_Word   # Se t0 = 0, pular para Second_Word %
00000ed4 : 00052283;   % 156:     lw t0, 0(a0) %
00000ed5 : 0080006f;   % 157:     j Access_Stat  %
00000ed6 : 00452283;   % 159:         lw t0, 4(a0) %
00000ed7 : 00f5f313;   % 162:         andi t1, a1, 0x00F      # t1 = a1 and 0x00F (Adquirir o dígito menos significativo de a1)  %
00000ed8 : 00231313;   % 163:         slli t1, t1, 2          # t1 = t1 * 4 (Calcular quantas bits shifitar) %
00000ed9 : 0ff00393;   % 164:         li t2, 0x000000FF       # t2 = 0x000000FF %
00000eda : 006393b3;   % 165:         sll t2, t2, t1          # t2 = t2 shifiitado t1 bits a esquerda %
00000edb : 0053f3b3;   % 166:         and t2, t2, t0          # t2 = t2 and t0 (adquirir o stat selecionado) %
00000edc : 0063d533;   % 167:         srl a0, t2, t1          # a0 = t2 shifitado t1 bits a direita (normalizando o número) %
00000edd : 00812383;   % 170:     lw t2, 8(sp) %
00000ede : 00412303;   % 171:     lw t1, 4(sp) %
00000edf : 00012283;   % 172:     lw t0, 0(sp) %
00000ee0 : 00c10113;   % 173:     addi sp, sp, 12 %
00000ee1 : 00008067;   % 174:     ret %
00000ee2 : ff410113;   % 183:     addi sp, sp, -12 %
00000ee3 : 00112023;   % 184:     sw ra, 0(sp) %
00000ee4 : 00512223;   % 185:     sw t0, 4(sp) %
00000ee5 : 00612423;   % 186:     sw t1, 8(sp) %
00000ee6 : 00600593;   % 189:     li a1, 0x06 %
00000ee7 : f9dff0ef;   % 190:     jal GET_POKEMON_STAT    # a0 = IT %
00000ee8 : 0f057293;   % 191:     andi t0, a0, 0x0F0      # t0 = a0 and 0x0F0 (extrair o I) %
00000ee9 : 0042d293;   % 192:     srli t0, t0, 4          # t0 = t0 shifitado 4 bits para a direita (normalizar o número) (t0 = I) %
00000eea : 00229293;   % 195:     slli t0, t0, 2          # t0 = t0 * 4 %
00000eeb : 0fc2b317;   % 196:     la t1, lista_nomes      # t1 = Endereço da lista de nomes %
00000eec : 7cc30313;   % 196:  %
00000eed : 006282b3;   % 197:     add t0, t0, t1          # t0 = t0 + t1 (Endereço do ponteiro do nome) %
00000eee : 0002a503;   % 198:     lw a0, 0(t0)            # a0 = Endereço do nome %
00000eef : 00812303;   % 201:     lw t1, 8(sp) %
00000ef0 : 00412283;   % 202:     lw t0, 4(sp) %
00000ef1 : 00012083;   % 203:     lw ra, 0(sp) %
00000ef2 : 00c10113;   % 204:     addi sp, sp, 12 %
00000ef3 : 00008067;   % 206:     ret   %
00000ef4 : ff410113;   % 215:     addi sp, sp, -12 %
00000ef5 : 00112023;   % 216:     sw ra, 0(sp) %
00000ef6 : 00512223;   % 217:     sw t0, 4(sp) %
00000ef7 : 00612423;   % 218:     sw t1, 8(sp) %
00000ef8 : 00600593;   % 221:     li a1, 0x06 %
00000ef9 : f55ff0ef;   % 222:     jal GET_POKEMON_STAT    # a0 = IT %
00000efa : 0f057293;   % 223:     andi t0, a0, 0x0F0      # t0 = a0 and 0x0F0 (extrair o I) %
00000efb : 0042d293;   % 224:     srli t0, t0, 4          # t0 = t0 shifitado 4 bits para a direita (normalizar o número) (t0 = I) %
00000efc : 00229293;   % 227:     slli t0, t0, 2          # t0 = t0 * 4 %
00000efd : 0fc2b317;   % 228:     la t1, lista_sprites    # t1 = Endereço da lista de sprites %
00000efe : 72830313;   % 228:  %
00000eff : 006282b3;   % 229:     add t0, t0, t1          # t0 = t0 + t1 (Endereço do ponteiro do nome) %
00000f00 : 0002a503;   % 230:     lw a0, 0(t0)            # a0 = Endereço do nome %
00000f01 : 00812303;   % 233:     lw t1, 8(sp) %
00000f02 : 00412283;   % 234:     lw t0, 4(sp) %
00000f03 : 00012083;   % 235:     lw ra, 0(sp) %
00000f04 : 00c10113;   % 236:     addi sp, sp, 12 %
00000f05 : 00008067;   % 238:     ret %
00000f06 : ffc10113;   % 247:     addi sp, sp, -4 %
00000f07 : 00112023;   % 248:     sw ra, 0(sp) %
00000f08 : 00600593;   % 251:     li a1, 0x06 %
00000f09 : f15ff0ef;   % 252:     jal GET_POKEMON_STAT    # a0 = IT %
00000f0a : 00f57513;   % 253:     andi a0, a0, 0x00F      # t0 = a0 and 0x0F0 (extrair o T) %
00000f0b : 00012083;   % 256:     lw ra, 0(sp) %
00000f0c : 00410113;   % 257:     addi sp, sp, 4 %
00000f0d : 00008067;   % 260:     ret %
00000f0e : ff010113;   % 271:     addi sp, sp, -16 %
00000f0f : 00512023;   % 272:     sw t0, 0(sp) %
00000f10 : 00612223;   % 273:     sw t1, 4(sp) %
00000f11 : 00712423;   % 274:     sw t2, 8(sp) %
00000f12 : 01c12623;   % 275:     sw t3, 12(sp) %
00000f13 : 00852283;   % 278:     lw t0, 8(a0)                        # t0 = word de ataques do pokémon %
00000f14 : ff000337;   % 279:     li t1, 0xFF000000                   # t1 = 0xFF000000 %
00000f15 : 00030313;   % 279:  %
00000f16 : 000003b3;   % 280:     mv t2, zero                         # t2 = 0 %
00000f17 : 00000533;   % 281:     mv a0, zero                         # a0 = 0 %
00000f18 : 01800e13;   % 284:         li t3, 24                       # t3 = 24 %
00000f19 : 01c38e63;   % 285:         beq t2, t3, End_Get_Num_Attacks # Se t2 = t3, acabar com o loop %
00000f1a : 00735e33;   % 286:         srl t3, t1, t2                  # t3 = t1 shifitado t2 bits para a direita %
00000f1b : 005e7e33;   % 287:         and t3, t3, t0                  # t3 = t3 and t0 %
00000f1c : 00838393;   % 288:         addi t2, t2, 8                  # t2 += 8 %
00000f1d : fe0e06e3;   % 289:         beqz t3, Loop_Get_Num_Attacks   # Se t3 = 0, o slot de ataque está vazio %
00000f1e : 00150513;   % 290:         addi a0, a0, 1                  # Se t3 != 0, o slot de ataque está preenchido %
00000f1f : fe5ff06f;   % 291:         j Loop_Get_Num_Attacks          # Voltar ao início do loop %
00000f20 : 00c12e03;   % 295:         lw t3, 12(sp) %
00000f21 : 00812383;   % 296:         lw t2, 8(sp) %
00000f22 : 00412303;   % 297:         lw t1, 4(sp) %
00000f23 : 00012283;   % 298:         lw t0, 0(sp) %
00000f24 : 01010113;   % 299:         addi sp, sp, 16 %
00000f25 : 00008067;   % 301:         ret %
00000f26 : ff410113;   % 320:     addi sp, sp, -12 %
00000f27 : 00512023;   % 321:     sw t0, 0(sp) %
00000f28 : 00612223;   % 322:     sw t1, 4(sp) %
00000f29 : 00712423;   % 323:     sw t2, 8(sp) %
00000f2a : 0105a293;   % 326:     slti t0, a1, 16             # t0 = 1, se a1 < 0x010, 0 se a1 >= 0x010  %
00000f2b : 00028663;   % 327:     beq t0, zero, Second_Word2  # Se t0 = 0, pular para Second_Word2 %
00000f2c : 00052283;   % 330:     lw t0, 0(a0) %
00000f2d : 00c0006f;   % 331:     j Access_Stat2  %
00000f2e : 00450513;   % 333:         addi a0, a0, 4 %
00000f2f : 00052283;   % 334:         lw t0, 0(a0) %
00000f30 : 00f5f313;   % 337:         andi t1, a1, 0x00F      # t1 = a1 and 0x00F (Adquirir o dígito menos significativo de a1)  %
00000f31 : 00231313;   % 338:         slli t1, t1, 2          # t1 = t1 * 4 (Calcular quantas bits shifitar) %
00000f32 : 0ff00393;   % 339:         li t2, 0x000000FF       # t2 = 0x000000FF %
00000f33 : 006393b3;   % 340:         sll t2, t2, t1          # t2 = t2 shifitado t1 bits a esquerda %
00000f34 : 0053f3b3;   % 341:         and t2, t2, t0          # t2 = t2 and t0 (adquirir o stat selecionado) %
00000f35 : 407282b3;   % 342:         sub t0, t0, t2          # t1 = word de stats - stat %
00000f36 : 006613b3;   % 343:         sll t2, a2, t1  %
00000f37 : 007282b3;   % 344:         add t0, t0, t2 %
00000f38 : 00552023;   % 345:         sw t0, 0(a0) %
00000f39 : 00812383;   % 348:     lw t2, 8(sp) %
00000f3a : 00412303;   % 349:     lw t1, 4(sp) %
00000f3b : 00012283;   % 350:     lw t0, 0(sp) %
00000f3c : 00c10113;   % 351:     addi sp, sp, 12 %
00000f3d : 00008067;   % 352:     ret %
00000f3e : ffc10113;   % 363:     addi sp, sp, -4 %
00000f3f : 00112023;   % 364:     sw ra, 0(sp) %
00000f40 : 01000593;   % 367:     li a1, 0x10 %
00000f41 : e35ff0ef;   % 368:     jal GET_POKEMON_STAT %
00000f42 : 00050663;   % 371:     beqz a0, Dead %
00000f43 : 00000533;   % 374:     mv a0, zero %
00000f44 : 0080006f;   % 375:     j End_Check_Life %
00000f45 : 00100513;   % 379:         li a0, 1 %
00000f46 : 00012083;   % 383:     lw ra, 0(sp) %
00000f47 : 00410113;   % 384:     addi sp, sp, 4 %
00000f48 : 00008067;   % 387:     ret %
00000f49 : ff810113;   % 397:     addi sp, sp, -8 %
00000f4a : 00112023;   % 398:     sw ra, 0(sp) %
00000f4b : 00512223;   % 399:     sw t0, 4(sp) %
00000f4c : 0fc23517;   % 402:     la a0, P_PLAYER %
00000f4d : 53850513;   % 402:  %
00000f4e : 00200593;   % 403:     li a1, 0x02 %
00000f4f : dfdff0ef;   % 404:     jal  GET_POKEMON_STAT %
00000f50 : 00500293;   % 405:     li t0, 5 %
00000f51 : 02a282b3;   % 406:     mul t0, t0, a0 %
00000f52 : 0fc23517;   % 409:     la a0, P_PLAYER %
00000f53 : 52050513;   % 409:  %
00000f54 : 00400593;   % 410:     li a1, 0x04 %
00000f55 : de5ff0ef;   % 411:     jal GET_POKEMON_STAT %
00000f56 : 00555663;   % 414:     bge a0, t0, Need_Level_Up %
00000f57 : 00000533;   % 417:     mv a0, zero %
00000f58 : 0080006f;   % 418:     j End_Check_Level_Up %
00000f59 : 00100513;   % 421:         li a0, 1 %
00000f5a : 00412283;   % 425:     lw t0, 4(sp) %
00000f5b : 00012083;   % 426:     lw ra, 0(sp) %
00000f5c : 00810113;   % 427:     addi sp, sp, 8 %
00000f5d : 00008067;   % 429:     ret %
00000f5e : fec10113;   % 436:     addi sp, sp, -20 %
00000f5f : 00112023;   % 437:     sw ra, 0(sp) %
00000f60 : 00512223;   % 438:     sw t0, 4(sp) %
00000f61 : 00612423;   % 439:     sw t1, 8(sp) %
00000f62 : 00712623;   % 440:     sw t2, 12(sp) %
00000f63 : 01c12823;   % 441:     sw t3, 16(sp) %
00000f64 : 0fc23297;   % 444:     la t0, P_PLAYER %
00000f65 : 4d828293;   % 444:  %
00000f66 : 00500533;   % 447:     mv a0, t0 %
00000f67 : 00200593;   % 448:     li a1, 0x02 %
00000f68 : d99ff0ef;   % 449:     jal GET_POKEMON_STAT %
00000f69 : 00a00333;   % 450:     mv t1, a0 %
00000f6a : 00500533;   % 453:     mv a0, t0 %
00000f6b : 00400593;   % 454:     li a1, 0x04 %
00000f6c : d89ff0ef;   % 455:     jal GET_POKEMON_STAT %
00000f6d : 00a003b3;   % 456:     mv t2, a0 %
00000f6e : 00038863;   % 459:     beqz t2, Setar0 %
00000f6f : 00500e13;   % 462:     li t3, 5 %
00000f70 : 026e0e33;   % 463:     mul t3, t3, t1 %
00000f71 : 41c383b3;   % 464:     sub t2, t2, t3 %
00000f72 : 00700633;   % 466:     mv a2, t2 %
00000f73 : 00500533;   % 467:     mv a0, t0 %
00000f74 : ec9ff0ef;   % 468:     jal SET_POKEMON_STAT %
00000f75 : 00500533;   % 471:     mv a0, t0 %
00000f76 : 00200593;   % 472:     li a1, 0x02 %
00000f77 : 00130613;   % 473:     addi a2, t1, 1 %
00000f78 : eb9ff0ef;   % 474:     jal SET_POKEMON_STAT %
00000f79 : 00500533;   % 478:     mv a0, t0 %
00000f7a : 01000593;   % 479:     li a1, 0x10 %
00000f7b : d4dff0ef;   % 480:     jal GET_POKEMON_STAT %
00000f7c : 00350613;   % 482:     addi a2, a0, 3 %
00000f7d : 00500533;   % 483:     mv a0, t0 %
00000f7e : ea1ff0ef;   % 484:     jal SET_POKEMON_STAT %
00000f7f : 00500533;   % 487:     mv a0, t0 %
00000f80 : 01200593;   % 488:     li a1, 0x12 %
00000f81 : d35ff0ef;   % 489:     jal GET_POKEMON_STAT %
00000f82 : 00350613;   % 491:     addi a2, a0, 3 %
00000f83 : 00500533;   % 492:     mv a0, t0 %
00000f84 : e89ff0ef;   % 493:     jal SET_POKEMON_STAT %
00000f85 : 00500533;   % 496:     mv a0, t0 %
00000f86 : 01400593;   % 497:     li a1, 0x14 %
00000f87 : d1dff0ef;   % 498:     jal GET_POKEMON_STAT %
00000f88 : 00250613;   % 500:     addi a2, a0, 2 %
00000f89 : 00500533;   % 501:     mv a0, t0 %
00000f8a : e71ff0ef;   % 502:     jal SET_POKEMON_STAT %
00000f8b : 00500533;   % 505:     mv a0, t0 %
00000f8c : 01600593;   % 506:     li a1, 0x16 %
00000f8d : d05ff0ef;   % 507:     jal GET_POKEMON_STAT %
00000f8e : 00150613;   % 509:     addi a2, a0, 1 %
00000f8f : 00500533;   % 510:     mv a0, t0 %
00000f90 : e59ff0ef;   % 511:     jal SET_POKEMON_STAT %
00000f91 : 00500533;   % 514:     mv a0, t0 %
00000f92 : 00000593;   % 515:     li a1, 0x00 %
00000f93 : cedff0ef;   % 516:     jal GET_POKEMON_STAT %
00000f94 : 00250613;   % 518:     addi a2, a0, 2 %
00000f95 : 00500533;   % 519:     mv a0, t0 %
00000f96 : e41ff0ef;   % 520:     jal SET_POKEMON_STAT %
00000f97 : 01012e03;   % 523:     lw t3, 16(sp) %
00000f98 : 00c12383;   % 524:     lw t2, 12(sp) %
00000f99 : 00812303;   % 525:     lw t1, 8(sp) %
00000f9a : 00412283;   % 526:     lw t0, 4(sp) %
00000f9b : 00012083;   % 527:     lw ra, 0(sp) %
00000f9c : 01410113;   % 528:     addi sp, sp, 20 %
00000f9d : 00008067;   % 531:     ret %
00000f9e : ff010113;   % 539:     addi sp, sp, -16 %
00000f9f : 00112023;   % 540:     sw ra, 0(sp) %
00000fa0 : 00512223;   % 541:     sw t0, 4(sp) %
00000fa1 : 00612423;   % 542:     sw t1, 8(sp) %
00000fa2 : 00712623;   % 543:     sw t2, 12(sp) %
00000fa3 : 67c010ef;   % 546:     jal RANDOM_SAVE %
00000fa4 : 00a002b3;   % 548:     mv t0, a0           # t0 = número aleatório %
00000fa5 : 0fc23517;   % 551:     la a0, P_INIMIGO %
00000fa6 : 3c850513;   % 551:  %
00000fa7 : d9dff0ef;   % 552:     jal GET_NUM_ATTACKS %
00000fa8 : fff50513;   % 555:     addi a0, a0, -1 %
00000fa9 : 02a2f2b3;   % 558:     remu t0, t0, a0 %
00000faa : 0fc23317;   % 561:     la t1, P_INIMIGO %
00000fab : 3b430313;   % 561:  %
00000fac : 00832303;   % 562:     lw t1, 8(t1) %
00000fad : 00800393;   % 563:     li t2, 8 %
00000fae : 027282b3;   % 564:     mul t0, t0, t2 %
00000faf : 01c00393;   % 565:     li t2, 28 %
00000fb0 : 405382b3;   % 566:     sub t0, t2, t0 %
00000fb1 : 00535533;   % 567:     srl a0, t1, t0 %
00000fb2 : 00f57513;   % 568:     andi a0, a0, 0x0F %
00000fb3 : 00c12383;   % 571:     lw t2, 12(sp) %
00000fb4 : 00812303;   % 572:     lw t1, 8(sp) %
00000fb5 : 00412283;   % 573:     lw t0, 4(sp) %
00000fb6 : 00012083;   % 574:     lw ra, 0(sp) %
00000fb7 : 01010113;   % 575:     addi sp, sp, 16 %
00000fb8 : 00008067;   % 578:     ret %
00000fb9 : ff010113;   % 588:     addi sp, sp, -16 %
00000fba : 00512023;   % 589:     sw t0, 0(sp) %
00000fbb : 00612223;   % 590:     sw t1, 4(sp) %
00000fbc : 00712423;   % 591:     sw t2, 8(sp) %
00000fbd : 01c12623;   % 592:     sw t3, 12(sp) %
00000fbe : 00852283;   % 595:     lw t0, 8(a0)                        # t0 = word de ataques do pokémon %
00000fbf : ff000337;   % 596:     li t1, 0xFF000000                   # t1 = 0xFF000000 %
00000fc0 : 00030313;   % 596:  %
00000fc1 : 000003b3;   % 597:     mv t2, zero                         # t2 = 0 %
00000fc2 : 00735e33;   % 599:         srl t3, t1, t2                  # t3 = t1 shifitado t2 bits para a direita %
00000fc3 : 005e7e33;   % 600:         and t3, t3, t0                  # t3 = t3 and t0 %
00000fc4 : 000e0663;   % 601:         beqz t3, End_Learn_Attack       # Se t3 = 0, o slot de ataque está vazio %
00000fc5 : 00838393;   % 602:         addi t2, t2, 8                  # t2 += 8 %
00000fc6 : ff1ff06f;   % 603:         j Loop_Learn_Attack             # Voltar ao início do loop %
00000fc7 : 01800e13;   % 606:         li t3, 24 %
00000fc8 : 407e0e33;   % 607:         sub t3, t3, t2 %
00000fc9 : 01c595b3;   % 608:         sll a1, a1, t3 %
00000fca : 00b282b3;   % 609:         add t0, t0, a1 %
00000fcb : 00552423;   % 610:         sw t0, 8(a0) %
00000fcc : 00c12e03;   % 612:         lw t3, 12(sp) %
00000fcd : 00812383;   % 613:         lw t2, 8(sp) %
00000fce : 00412303;   % 614:         lw t1, 4(sp) %
00000fcf : 00012283;   % 615:         lw t0, 0(sp) %
00000fd0 : 01010113;   % 616:         addi sp, sp, 16 %
00000fd1 : 00008067;   % 618:         ret  %
00000fd2 : fe810113;   % 95:     addi sp, sp, -24 %
00000fd3 : 00112023;   % 96:     sw ra, 0(sp) %
00000fd4 : 00512223;   % 97:     sw t0, 4(sp) %
00000fd5 : 00612423;   % 98:     sw t1, 8(sp) %
00000fd6 : 00712623;   % 99:     sw t2, 12(sp) %
00000fd7 : 01c12823;   % 100:     sw t3, 16(sp) %
00000fd8 : 01d12a23;   % 101:     sw t4, 20(sp) %
00000fd9 : 00a002b3;   % 103:     mv t0, a0                       # t0 = endereço do ataque %
00000fda : 00b00333;   % 104:     mv t1, a1                       # t1 = endereço do pokémon atacante %
00000fdb : 00c003b3;   % 105:     mv t2, a2                       # t2 = endereço do pokémon defensor %
00000fdc : 254000ef;   % 108:     jal GET_ATTACK_POWER %
00000fdd : 00a00e33;   % 109:     mv t3, a0                       # t3 = poder do ataque %
00000fde : 00500533;   % 112:     mv a0, t0 %
00000fdf : 264000ef;   % 113:     jal GET_ATTACK_TYPE %
00000fe0 : 00a00eb3;   % 114:     mv t4, a0                       # t3 = ataque do pokémon atacante  %
00000fe1 : 00600533;   % 117:     mv a0, t1 %
00000fe2 : 00200593;   % 118:     li a1, 0x02 %
00000fe3 : badff0ef;   % 119:     jal GET_POKEMON_STAT %
00000fe4 : 00a00633;   % 120:     mv a2, a0 %
00000fe5 : 00600533;   % 123:     mv a0, t1 %
00000fe6 : 01400593;   % 124:     li a1, 0x14 %
00000fe7 : b9dff0ef;   % 125:     jal GET_POKEMON_STAT %
00000fe8 : 00a006b3;   % 126:     mv a3, a0 %
00000fe9 : 00600533;   % 129:     mv a0, t1 %
00000fea : 238000ef;   % 130:     jal GET_ATTACK_TYPE %
00000feb : 00a00733;   % 131:     mv a4, a0 %
00000fec : 00700533;   % 134:     mv a0, t2 %
00000fed : 00000593;   % 135:     li a1, 0x00 %
00000fee : b81ff0ef;   % 136:     jal GET_POKEMON_STAT %
00000fef : 00a007b3;   % 137:     mv a5, a0 %
00000ff0 : 00700533;   % 140:     mv a0, t2 %
00000ff1 : c55ff0ef;   % 141:     jal GET_POKEMON_TYPE %
00000ff2 : 00a00833;   % 142:     mv a6, a0 %
00000ff3 : 01c00533;   % 145:     mv a0, t3 %
00000ff4 : 01d005b3;   % 146:     mv a1, t4 %
00000ff5 : 04c000ef;   % 149:     jal CALCULATE_DAMAGE %
00000ff6 : 00a00e33;   % 150:     mv t3, a0 %
00000ff7 : 00700533;   % 153:     mv a0, t2 %
00000ff8 : 01000593;   % 154:     li a1, 0x10 %
00000ff9 : b55ff0ef;   % 155:     jal GET_POKEMON_STAT %
00000ffa : 41c50633;   % 156:     sub a2, a0, t3 %
00000ffb : 00c04463;   % 159:     bgtz a2, Set_New_Life %
00000ffc : 00000633;   % 161:     mv a2, zero %
00000ffd : 00700533;   % 165:         mv a0, t2 %
00000ffe : 01000593;   % 166:         li a1, 0x10  %
00000fff : c9dff0ef;   % 167:         jal SET_POKEMON_STAT %
00001000 : 01412e83;   % 170:     lw t4, 20(sp) %
00001001 : 01012e03;   % 171:     lw t3, 16(sp) %
00001002 : 00c12383;   % 172:     lw t2, 12(sp) %
00001003 : 00812303;   % 173:     lw t1, 8(sp) %
00001004 : 00412283;   % 174:     lw t0, 4(sp) %
00001005 : 00012083;   % 175:     lw ra, 0(sp) %
00001006 : 01810113;   % 176:     addi sp, sp, 24 %
00001007 : 00008067;   % 177:     ret  %
00001008 : fe010113;   % 201:     addi sp, sp, -32 %
00001009 : 00112023;   % 202:     sw ra, 0(sp) %
0000100a : 00512223;   % 203:     sw t0, 4(sp) %
0000100b : 00612423;   % 204:     sw t1, 8(sp) %
0000100c : 00712623;   % 205:     sw t2, 12(sp) %
0000100d : 01c12823;   % 206:     sw t3, 16(sp) %
0000100e : 01d12a23;   % 207:     sw t4, 20(sp) %
0000100f : 01e12c23;   % 208:     sw t5, 24(sp) %
00001010 : 01f12e23;   % 209:     sw t6, 28(sp) %
00001011 : 00a002b3;   % 212:     mv t0, a0                %
00001012 : 00b00333;   % 213:     mv t1, a1 %
00001013 : 00c003b3;   % 214:     mv t2, a2 %
00001014 : 00d00e33;   % 215:     mv t3, a3 %
00001015 : 00e00eb3;   % 216:     mv t4, a4 %
00001016 : 00f00f33;   % 217:     mv t5, a5 %
00001017 : 01000fb3;   % 218:     mv t6, a6 %
00001018 : 00139393;   % 221:     slli t2, t2, 1              # t2 = 2xt2 (2xlvl) %
00001019 : 03ee4e33;   % 224:     div t3, t3, t5              # t3 = t3 / t5 (A/D) %
0000101a : 00500f13;   % 227:     li t5, 5                    # t5 = 5 %
0000101b : 03e3c3b3;   % 228:     div t2, t2, t5              # t2 = t2 / t5 (2xlvl / 5) %
0000101c : 00238393;   % 229:     addi t2, t2, 2              # t2 = t2 + 2  (2xlvl / 5 + 2) %
0000101d : 025383b3;   % 232:     mul t2, t2, t0              # t2 = t2 * t0 ((2xlvl / 5 + 2) x Power) %
0000101e : 03c383b3;   % 233:     mul t2, t2, t3              # t2 = t2 * t3 ((2xlvl / 5 + 2) x Power x A/D) %
0000101f : 03200f13;   % 236:     li t5, 50                   # t5 = 50 %
00001020 : 03e3c3b3;   % 237:     div t2, t2, t5              # t2 = t2 / t5 ((2xlvl / 5 + 2) x Power x A/D / 50) %
00001021 : 00238393;   % 238:     addi t2, t2, 2              # t2 = t2 + 2  ((2xlvl / 5 + 2) x Power x A/D / 50 + 2) %
00001022 : 00b00533;   % 241:     mv a0, a1 %
00001023 : 010005b3;   % 242:     mv a1, a6 %
00001024 : 040000ef;   % 243:     jal CALCULATE_EFFECTIVENESS %
00001025 : 00050663;   % 244:     beqz a0, Ineffective_Attack %
00001026 : 02a38533;   % 247:     mul a0, t2, a0              # a0 = t2 * a0 ([(2xlvl / 5 + 2) x Power x A/D / 50 + 2] x Type1) %
00001027 : 00c0006f;   % 248:     j End_Calculate_Damage %
00001028 : 00200313;   % 251:         li t1, 2 %
00001029 : 0263c533;   % 252:         div a0, t2, t1 %
0000102a : 01c12f83;   % 256:     lw t6, 28(sp) %
0000102b : 01812f03;   % 257:     lw t5, 24(sp) %
0000102c : 01412e83;   % 258:     lw t4, 20(sp) %
0000102d : 01012e03;   % 259:     lw t3, 16(sp) %
0000102e : 00c12383;   % 260:     lw t2, 12(sp) %
0000102f : 00812303;   % 261:     lw t1, 8(sp) %
00001030 : 00412283;   % 262:     lw t0, 4(sp) %
00001031 : 00012083;   % 263:     lw ra, 0(sp) %
00001032 : 02010113;   % 264:     addi sp, sp, 32 %
00001033 : 00008067;   % 265:     ret %
00001034 : ffc10113;   % 276:     addi sp, sp, -4 %
00001035 : 00512023;   % 277:     sw t0, 0(sp) %
00001036 : 02050e63;   % 279:     beq a0, zero, Water_Type        # Verifica se é do tipo água %
00001037 : 00100293;   % 281:     li t0, 1 %
00001038 : 04550c63;   % 282:     beq a0, t0, Grass_Type          # Verifica se é do tipo grama %
00001039 : 00200293;   % 284:     li t0, 2 %
0000103a : 06550a63;   % 285:     beq a0, t0, Fire_Type           # Verifica se é do tipo fogo %
0000103b : 00300293;   % 287:     li t0, 3 %
0000103c : 08550863;   % 288:     beq a0, t0, Normal_Type         # Verifica se é do tipo normal %
0000103d : 0ab50c63;   % 293:         beq a0, a1, Normal_Effective    # Verifica se é do tipo água %
0000103e : 00100293;   % 295:         li t0, 1 %
0000103f : 0a558863;   % 296:         beq a1, t0, Normal_Effective    # Verifica se é do tipo grama %
00001040 : 00200293;   % 298:         li t0, 2 %
00001041 : 0a558863;   % 299:         beq a1, t0, Super_Effective     # Verifica se é do tipo fogo %
00001042 : 00300293;   % 301:         li t0, 3 %
00001043 : 0a558063;   % 302:         beq a1, t0, Normal_Effective    # Verifica se é do tipo normal %
00001044 : 09c0006f;   % 305:         j Normal_Effective %
00001045 : 000002b3;   % 308:         mv t0, zero %
00001046 : 08b28663;   % 309:         beq t0, a1, Ineffective         # Verifica se é do tipo água %
00001047 : 00100293;   % 311:         li t0, 1 %
00001048 : 08558263;   % 312:         beq a1, t0, Ineffective         # Verifica se é do tipo grama %
00001049 : 00200293;   % 314:         li t0, 2 %
0000104a : 08558663;   % 315:         beq a1, t0, Super_Effective     # Verifica se é do tipo fogo %
0000104b : 00300293;   % 317:         li t0, 3 %
0000104c : 06558e63;   % 318:         beq a1, t0, Normal_Effective    # Verifica se é do tipo normal %
0000104d : 0800006f;   % 321:         j Super_Effective %
0000104e : 000002b3;   % 324:         mv t0, zero %
0000104f : 06b28c63;   % 325:         beq t0, a1, Super_Effective     # Verifica se é do tipo água %
00001050 : 00100293;   % 327:         li t0, 1 %
00001051 : 06558063;   % 328:         beq a1, t0, Ineffective         # Verifica se é do tipo grama %
00001052 : 00200293;   % 330:         li t0, 2 %
00001053 : 04558c63;   % 331:         beq a1, t0, Ineffective         # Verifica se é do tipo fogo %
00001054 : 00300293;   % 333:         li t0, 3 %
00001055 : 04558c63;   % 334:         beq a1, t0, Normal_Effective    # Verifica se é do tipo normal %
00001056 : 05c0006f;   % 337:         j Super_Effective %
00001057 : 000002b3;   % 340:         mv t0, zero %
00001058 : 04b28263;   % 341:         beq t0, a1, Ineffective         # Verifica se é do tipo água %
00001059 : 00100293;   % 343:         li t0, 1 %
0000105a : 04558663;   % 344:         beq a1, t0, Super_Effective     # Verifica se é do tipo grama %
0000105b : 00200293;   % 346:         li t0, 2 %
0000105c : 02558a63;   % 347:         beq a1, t0, Ineffective         # Verifica se é do tipo fogo %
0000105d : 00300293;   % 349:         li t0, 3 %
0000105e : 02558a63;   % 350:         beq a1, t0, Normal_Effective    # Verifica se é do tipo normal %
0000105f : 0280006f;   % 353:         j Ineffective %
00001060 : 000002b3;   % 356:         mv t0, zero %
00001061 : 02b28463;   % 357:         beq t0, a1, Normal_Effective    # Verifica se é do tipo água %
00001062 : 00100293;   % 359:         li t0, 1 %
00001063 : 02558063;   % 360:         beq a1, t0, Normal_Effective    # Verifica se é do tipo grama %
00001064 : 00200293;   % 362:         li t0, 2 %
00001065 : 00558c63;   % 363:         beq a1, t0, Normal_Effective    # Verifica se é do tipo fogo %
00001066 : 00300293;   % 365:         li t0, 3 %
00001067 : 00558863;   % 366:         beq a1, t0, Normal_Effective    # Verifica se é do tipo normal %
00001068 : 0040006f;   % 369:         j Ineffective %
00001069 : 00000533;   % 372:         mv a0, zero %
0000106a : 0100006f;   % 373:         j End_Calculate_Effectiveness %
0000106b : 00100513;   % 376:         li a0, 1 %
0000106c : 0080006f;   % 377:         j End_Calculate_Effectiveness %
0000106d : 00200513;   % 380:         li a0, 2 %
0000106e : 00012283;   % 383:         lw t0, 0(sp) %
0000106f : 00410113;   % 384:         addi sp, sp, 4 %
00001070 : 00008067;   % 385:         ret %
00001071 : ffc10113;   % 394:     addi sp, sp, -4 %
00001072 : 00512023;   % 395:     sw t0, 0(sp) %
00001073 : 00051283;   % 398:     lh t0, 0(a0)            # t0 = half word de stats do ataque %
00001074 : 0ff2f513;   % 399:     andi a0, t0, 0x0FF      # a0 = t0 and 0x0FF (extrair PP) %
00001075 : 00012283;   % 402:     lw t0, 0(sp) %
00001076 : 00410113;   % 403:     addi sp, sp, 4 %
00001077 : 00008067;   % 406:     ret %
00001078 : ff810113;   % 415:     addi sp, sp, -8 %
00001079 : 00512023;   % 416:     sw t0, 0(sp) %
0000107a : 00612223;   % 417:     sw t1, 4(sp) %
0000107b : 00051283;   % 420:     lh t0, 0(a0)            # t0 = half word de stats do ataque %
0000107c : 00001337;   % 421:     li t1, 0x00000F00       # t1 = 0x00000F00 %
0000107d : f0030313;   % 421:  %
0000107e : 0062f533;   % 422:     and a0, t0, t1          # a0 = t0 and t1 (extrair T) %
0000107f : 00855513;   % 423:     srli a0, a0, 8 %
00001080 : 00412303;   % 426:     lw t1, 4(sp) %
00001081 : 00012283;   % 427:     lw t0, 0(sp) %
00001082 : 00810113;   % 428:     addi sp, sp, 8 %
00001083 : 00008067;   % 431:     ret %
00001084 : ff810113;   % 440:     addi sp, sp, -8 %
00001085 : 00512023;   % 441:     sw t0, 0(sp) %
00001086 : 00612223;   % 442:     sw t1, 4(sp) %
00001087 : 00051283;   % 445:     lh t0, 0(a0)            # t0 = half word de stats do ataque %
00001088 : 0000f337;   % 446:     li t1, 0x0000F000 %
00001089 : 00030313;   % 446:  %
0000108a : 0062f533;   % 447:     and a0, t0, t1          # a0 = t0 and t1 (extrair I) %
0000108b : 00c55513;   % 448:     srli a0, a0, 12 %
0000108c : 00251513;   % 451:     slli a0, a0, 2          # a0 = a0 * 4 %
0000108d : 0fc2b317;   % 452:     la t1, lista_n_ataques  # t1 = Endereço da lista de nomes dos ataques %
0000108e : 1e830313;   % 452:  %
0000108f : 00650533;   % 453:     add a0, a0, t1          # t0 = t0 + t1 (Endereço do ponteiro do nome) %
00001090 : 00052503;   % 454:     lw a0, 0(a0)            # a0 = Endereço do nome %
00001091 : 00412303;   % 457:     lw t1, 4(sp) %
00001092 : 00012283;   % 458:     lw t0, 0(sp) %
00001093 : 00810113;   % 459:     addi sp, sp, 8 %
00001094 : 00008067;   % 462:     ret %
00001095 : ff810113;   % 478:     addi sp, sp, -8 %
00001096 : 00512023;   % 479:     sw t0, 0(sp) %
00001097 : 00612223;   % 480:     sw t1, 4(sp) %
00001098 : 0fc2b297;   % 483:     la t0, lista_ataques %
00001099 : 1f428293;   % 483:  %
0000109a : 00400313;   % 484:     li t1, 4 %
0000109b : 02a30333;   % 485:     mul t1, t1, a0 %
0000109c : 006282b3;   % 486:     add t0, t0, t1 %
0000109d : 0002a503;   % 487:     lw a0, 0(t0) %
0000109e : 00412303;   % 490:     lw t1, 4(sp) %
0000109f : 00012283;   % 491:     lw t0, 0(sp) %
000010a0 : 00810113;   % 492:     addi sp, sp, 8 %
000010a1 : 00008067;   % 495:     ret %
000010a2 : fec10113;   % 506:     addi sp, sp, -20 %
000010a3 : 00112023;   % 507:     sw ra, 0(sp) %
000010a4 : 00512223;   % 508:     sw t0, 4(sp) %
000010a5 : 00612423;   % 509:     sw t1, 8(sp) %
000010a6 : 00712623;   % 510:     sw t2, 12(sp) %
000010a7 : 01c12823;   % 511:     sw t3, 16(sp) %
000010a8 : 00a002b3;   % 514:     mv t0, a0 %
000010a9 : 00b00333;   % 515:     mv t1, a1 %
000010aa : 00c003b3;   % 516:     mv t2, a2 %
000010ab : 04050263;   % 522:     beqz a0, Run_Damage_Attack %
000010ac : 00100e13;   % 525:     li t3, 1 %
000010ad : 02ae0e63;   % 526:     beq t3, a0, Run_Damage_Attack %
000010ae : 00200e13;   % 529:     li t3, 2 %
000010af : 02ae0a63;   % 530:     beq t3, a0, Run_Damage_Attack %
000010b0 : 00300e13;   % 533:     li t3, 3 %
000010b1 : 02ae0663;   % 534:     beq t3, a0, Run_Damage_Attack %
000010b2 : 00400e13;   % 537:     li t3, 4 %
000010b3 : 16ae0263;   % 538:     beq t3, a0, NAP_ATTACK %
000010b4 : 00500e13;   % 541:     li t3, 5 %
000010b5 : 02ae0a63;   % 542:     beq t3, a0, Run_Look_Attack %
000010b6 : 00600e13;   % 545:     li t3, 6 %
000010b7 : 00ae0a63;   % 546:     beq t3, a0, Run_Damage_Attack %
000010b8 : 00700e13;   % 549:     li t3, 7 %
000010b9 : 04ae0663;   % 550:     beq t3, a0, Run_Prego_Attack %
000010ba : 00800e13;   % 553:     li t3, 8 %
000010bb : 00ae0263;   % 554:     beq t3, a0, Run_Damage_Attack %
000010bc : f65ff0ef;   % 557:         jal DECODE_ATTACK %
000010bd : c55ff0ef;   % 558:         jal DAMAGE_ATTACK %
000010be : 00600533;   % 561:         mv a0, t1 %
000010bf : 005005b3;   % 562:         mv a1, t0 %
000010c0 : 068000ef;   % 563:         jal PRINT_DAMAGE_ATTACK %
000010c1 : 0480006f;   % 565:     j End_Run_Attack %
000010c2 : 00700533;   % 568:         mv a0, t2 %
000010c3 : 0ec000ef;   % 569:         jal LOOK_ATTACK %
000010c4 : 00600533;   % 570:         mv a0, t1 %
000010c5 : 007005b3;   % 571:         mv a1, t2 %
000010c6 : 00000633;   % 572:         mv a2, zero %
000010c7 : 118000ef;   % 573:         jal PRINT_LOOK_ATTACK %
000010c8 : 02c0006f;   % 574:         j End_Run_Attack %
000010c9 : f31ff0ef;   % 577:         jal DECODE_ATTACK %
000010ca : 108000ef;   % 578:         jal NAP_ATTACK %
000010cb : 0200006f;   % 579:         j End_Run_Attack %
000010cc : 00700533;   % 582:         mv a0, t2 %
000010cd : 0c4000ef;   % 583:         jal LOOK_ATTACK %
000010ce : 00600533;   % 584:         mv a0, t1 %
000010cf : 007005b3;   % 585:         mv a1, t2 %
000010d0 : 00100613;   % 586:         li a2, 1 %
000010d1 : 0f0000ef;   % 587:         jal PRINT_LOOK_ATTACK %
000010d2 : 0040006f;   % 588:         j End_Run_Attack %
000010d3 : 01012e03;   % 592:         lw t3, 16(sp) %
000010d4 : 00c12383;   % 593:         lw t2, 12(sp) %
000010d5 : 00812303;   % 594:         lw t1, 8(sp) %
000010d6 : 00412283;   % 595:         lw t0, 4(sp) %
000010d7 : 00012083;   % 596:         lw ra, 0(sp) %
000010d8 : 01410113;   % 597:         addi sp, sp, 20 %
000010d9 : 00008067;   % 599:         ret %
000010da : ff410113;   % 609:     addi sp, sp, -12 %
000010db : 00112023;   % 610:     sw ra, 0(sp) %
000010dc : 00512223;   % 611:     sw t0, 4(sp) %
000010dd : 00612423;   % 612:     sw t1, 8(sp) %
000010de : 00a002b3;   % 615:     mv t0, a0 %
000010df : 00b00333;   % 616:     mv t1, a1 %
000010e0 : 809ff0ef;   % 619:     jal GET_POKEMON_NAME %
000010e1 : 01000593;   % 622:     li a1, 16 %
000010e2 : 0c800613;   % 623:     li a2, 200 %
000010e3 : 000056b7;   % 624:     li a3, 0x000051FF %
000010e4 : 1ff68693;   % 624:  %
000010e5 : 00800733;   % 625:     mv a4, s0 %
000010e6 : 13d000ef;   % 626:     jal PRINT_STRING_SAVE %
000010e7 : 0fc23517;   % 629:     la a0, attack_battle %
000010e8 : de950513;   % 629:  %
000010e9 : 01000593;   % 630:     li a1, 16 %
000010ea : 0dc00613;   % 631:     li a2, 220 %
000010eb : 000056b7;   % 632:     li a3, 0x000051FF %
000010ec : 1ff68693;   % 632:  %
000010ed : 00800733;   % 633:     mv a4, s0 %
000010ee : 11d000ef;   % 634:     jal PRINT_STRING_SAVE %
000010ef : 00600533;   % 637:     mv a0, t1 %
000010f0 : e95ff0ef;   % 638:     jal DECODE_ATTACK %
000010f1 : e4dff0ef;   % 639:     jal GET_ATTACK_NAME %
000010f2 : 07400593;   % 642:     li a1, 116 %
000010f3 : 0dc00613;   % 643:     li a2, 220 %
000010f4 : 000056b7;   % 644:     li a3, 0x000051FF %
000010f5 : 1ff68693;   % 644:  %
000010f6 : 00800733;   % 645:     mv a4, s0 %
000010f7 : 0f9000ef;   % 646:     jal PRINT_STRING_SAVE %
000010f8 : 1d5000ef;   % 649:     jal CONFIRM_DIALOG  %
000010f9 : 00812303;   % 652:     lw t1, 8(sp) %
000010fa : 00412283;   % 653:     lw t0, 4(sp) %
000010fb : 00012083;   % 654:     lw ra, 0(sp) %
000010fc : 00c10113;   % 655:     addi sp, sp, 12 %
000010fd : 00008067;   % 658:     ret %
000010fe : ff810113;   % 667:     addi sp, sp, -8 %
000010ff : 00112023;   % 668:     sw ra, 0(sp) %
00001100 : 00512223;   % 669:     sw t0, 4(sp) %
00001101 : 00a002b3;   % 672:     mv t0, a0 %
00001102 : 01400593;   % 673:     li a1, 0x14 %
00001103 : f2cff0ef;   % 674:     jal GET_POKEMON_STAT %
00001104 : fff50613;   % 677:     addi a2, a0, -1 %
00001105 : 00500533;   % 678:     mv a0, t0 %
00001106 : 01400593;   % 679:     li a1, 0x14 %
00001107 : 87dff0ef;   % 680:     jal SET_POKEMON_STAT %
00001108 : 00412283;   % 683:     lw t0, 4(sp) %
00001109 : 00012083;   % 684:     lw ra, 0(sp) %
0000110a : 00810113;   % 685:     addi sp, sp, 8 %
0000110b : 00008067;   % 688:     ret %
0000110c : 00008067;   % 692:     ret %
0000110d : ff010113;   % 704:     addi sp, sp, -16 %
0000110e : 00112023;   % 705:     sw ra, 0(sp) %
0000110f : 00512223;   % 706:     sw t0, 4(sp) %
00001110 : 00612423;   % 707:     sw t1, 8(sp) %
00001111 : 00712623;   % 708:     sw t2, 12(sp) %
00001112 : 00a002b3;   % 711:     mv t0, a0 %
00001113 : 00b00333;   % 712:     mv t1, a1 %
00001114 : 000003b3;   % 713:     mv t2, zero %
00001115 : 00c00e33;   % 714:     mv t3, a2 %
00001116 : f30ff0ef;   % 717:     jal GET_POKEMON_NAME %
00001117 : 00a003b3;   % 718:     mv t2, a0 %
00001118 : 01000593;   % 721:     li a1, 16 %
00001119 : 0c800613;   % 722:     li a2, 200 %
0000111a : 000056b7;   % 723:     li a3, 0x000051FF %
0000111b : 1ff68693;   % 723:  %
0000111c : 00800733;   % 724:     mv a4, s0 %
0000111d : 061000ef;   % 725:     jal PRINT_STRING_SAVE %
0000111e : 0fc23517;   % 728:     la a0, attack_battle %
0000111f : d0d50513;   % 728:  %
00001120 : 01000593;   % 729:     li a1, 16 %
00001121 : 0de00613;   % 730:     li a2, 222 %
00001122 : 000056b7;   % 731:     li a3, 0x000051FF %
00001123 : 1ff68693;   % 731:  %
00001124 : 00800733;   % 732:     mv a4, s0 %
00001125 : 041000ef;   % 733:     jal PRINT_STRING_SAVE %
00001126 : 000e0863;   % 736:     beqz t3, Atq_Olhada %
00001127 : 0fc2b517;   % 737:     la a0, n_prego %
00001128 : f7250513;   % 737:  %
00001129 : 00c0006f;   % 738:     j Print_Nome %
0000112a : 0fc2b517;   % 740:     la a0, n_look %
0000112b : f5750513;   % 740:  %
0000112c : 07400593;   % 743:     li a1, 116 %
0000112d : 0dc00613;   % 744:     li a2, 220 %
0000112e : 000056b7;   % 745:     li a3, 0x000051FF %
0000112f : 1ff68693;   % 745:  %
00001130 : 00800733;   % 746:     mv a4, s0 %
00001131 : 011000ef;   % 747:     jal PRINT_STRING_SAVE %
00001132 : 0ed000ef;   % 750:     jal CONFIRM_DIALOG  %
00001133 : 0fc0c517;   % 753:     la a0, dialog_box_battle %
00001134 : b3450513;   % 753:  %
00001135 : 000005b3;   % 754:     mv a1, zero %
00001136 : 0b400613;   % 755:     li a2, 180 %
00001137 : 008006b3;   % 756:     mv a3, s0 %
00001138 : 481000ef;   % 757:     jal DRAW_IMAGE %
00001139 : 00600533;   % 760:     mv a0, t1 %
0000113a : ea0ff0ef;   % 761:     jal GET_POKEMON_NAME %
0000113b : 01000593;   % 764:     li a1, 16 %
0000113c : 0c800613;   % 765:     li a2, 200 %
0000113d : 000056b7;   % 766:     li a3, 0x000051FF %
0000113e : 1ff68693;   % 766:  %
0000113f : 00800733;   % 767:     mv a4, s0 %
00001140 : 7d4000ef;   % 768:     jal PRINT_STRING_SAVE %
00001141 : 0fc23517;   % 771:     la a0, atk_down_battle %
00001142 : c8c50513;   % 771:  %
00001143 : 01000593;   % 772:     li a1, 16 %
00001144 : 0dc00613;   % 773:     li a2, 220 %
00001145 : 000056b7;   % 774:     li a3, 0x000051FF %
00001146 : 1ff68693;   % 774:  %
00001147 : 00800733;   % 775:     mv a4, s0 %
00001148 : 7b4000ef;   % 776:     jal PRINT_STRING_SAVE %
00001149 : 091000ef;   % 779:     jal CONFIRM_DIALOG  %
0000114a : 00c12383;   % 782:     lw t2, 12(sp) %
0000114b : 00812303;   % 783:     lw t1, 8(sp) %
0000114c : 00412283;   % 784:     lw t0, 4(sp) %
0000114d : 00012083;   % 785:     lw ra, 0(sp) %
0000114e : 01010113;   % 786:     addi sp, sp, 16 %
0000114f : 00008067;   % 789:     ret %
00001150 : ffc10113;   % 5:     addi sp, sp, -4 %
00001151 : 00112023;   % 6:     sw ra, 0(sp) %
00001152 : 00000533;   % 9:     mv a0, zero %
00001153 : 008005b3;   % 10:     mv a1, s0 %
00001154 : 59d000ef;   % 11:     jal COLOR_SCREEN %
00001155 : 0fc0c517;   % 14:     la a0, dialog_box_battle %
00001156 : aac50513;   % 14:  %
00001157 : 000005b3;   % 15:     mv a1, zero %
00001158 : 0b400613;   % 16:     li a2, 180 %
00001159 : 008006b3;   % 17:     mv a3, s0 %
0000115a : 00000733;   % 18:     mv a4, zero %
0000115b : 3f5000ef;   % 19:     jal DRAW_IMAGE %
0000115c : 0fc12517;   % 22:     la a0, options_battle %
0000115d : 95050513;   % 22:  %
0000115e : 0a000593;   % 23:     li a1, 160 %
0000115f : 0b400613;   % 24:     li a2 180 %
00001160 : 008006b3;   % 25:     mv a3, s0 %
00001161 : 00000733;   % 26:     mv a4, zero %
00001162 : 3d9000ef;   % 27:     jal DRAW_IMAGE %
00001163 : 0fc10517;   % 30:     la a0, battle_pokemon_stats %
00001164 : 57c50513;   % 30:  %
00001165 : 0c000593;   % 31:     li a1, 192 %
00001166 : 08800613;   % 32:     li a2, 136 %
00001167 : 008006b3;   % 33:     mv a3, s0 %
00001168 : 00000733;   % 34:     mv a4, zero %
00001169 : 3bd000ef;   % 35:     jal DRAW_IMAGE %
0000116a : 0fc10517;   % 38:     la a0, battle_pokemon_stats %
0000116b : 56050513;   % 38:  %
0000116c : 03c00593;   % 39:     li a1, 60 %
0000116d : 00400613;   % 40:     li a2, 4 %
0000116e : 008006b3;   % 41:     mv a3, s0 %
0000116f : 00000733;   % 42:     mv a4, zero %
00001170 : 3a1000ef;   % 43:     jal DRAW_IMAGE %
00001171 : 00012083;   % 45:     lw ra, 0(sp) %
00001172 : 00410113;   % 46:     addi sp, sp, 4 %
00001173 : 00008067;   % 47:     ret %
00001174 : ffc10113;   % 57:     addi sp, sp, -4 %
00001175 : 00112023;   % 58:     sw ra, 0(sp) %
00001176 : 00c006b3;   % 60:     mv a3, a2 %
00001177 : 00b00633;   % 61:     mv a2, a1 %
00001178 : 00a005b3;   % 62:     mv a1, a0 %
00001179 : 0fc23517;   % 63:     la a0, seta %
0000117a : b3950513;   % 63:  %
0000117b : 00800733;   % 64:     mv a4, s0 %
0000117c : 6e4000ef;   % 65:     jal PRINT_STRING_SAVE %
0000117d : 00012083;   % 67:     lw ra, 0(sp) %
0000117e : 00410113;   % 68:     addi sp, sp, 4 %
0000117f : 00008067;   % 69:     ret %
00001180 : fe010113;   % 76:     addi sp, sp, -32 %
00001181 : 00112023;   % 77:     sw ra, 0(sp) %
00001182 : 00512223;   % 78:     sw t0, 4(sp) %
00001183 : 00612423;   % 79:     sw t1, 8(sp) %
00001184 : 00712623;   % 80:     sw t2, 12(sp) %
00001185 : 01c12823;   % 81:     sw t3, 16(sp) %
00001186 : 01d12a23;   % 82:     sw t4, 20(sp) %
00001187 : 01e12c23;   % 83:     sw t5, 24(sp) %
00001188 : 01f12e23;   % 84:     sw t6, 28(sp) %
00001189 : 0fc23297;   % 87:     la t0, P_PLAYER %
0000118a : c4428293;   % 87:  %
0000118b : 0082a283;   % 88:     lw t0, 8(t0) %
0000118c : ff000337;   % 90:     li t1, 0xFF000000 %
0000118d : 00030313;   % 90:  %
0000118e : 000003b3;   % 91:     mv t2, zero %
0000118f : 01900f13;   % 92:     li t5, 25                   # Coordenada x %
00001190 : 0c300f93;   % 93:     li t6, 195                  # Coordenada y %
00001191 : 01800e93;   % 97:         li t4, 24 %
00001192 : 067ec263;   % 98:         bgt t2, t4, End_Print_Pokemon_Attacks_Names %
00001193 : 00735e33;   % 99:         srl t3, t1, t2     %
00001194 : 005e7e33;   % 100:         and t3, t3, t0 %
00001195 : 000e0e63;   % 101:         beqz t3, Empty_Slot     # Se t3 = 0, o slot de ataque está vazio  %
00001196 : 407e8eb3;   % 102:         sub t4, t4, t2 %
00001197 : 004e8e93;   % 103:         addi t4, t4, 4 %
00001198 : 01de5533;   % 104:         srl a0, t3, t4 %
00001199 : bf1ff0ef;   % 105:         jal DECODE_ATTACK %
0000119a : ba9ff0ef;   % 106:         jal GET_ATTACK_NAME %
0000119b : 00c0006f;   % 107:         j Print_Attack_Name %
0000119c : 0fc23517;   % 110:             la a0, traco %
0000119d : aaf50513;   % 110:  %
0000119e : 01e005b3;   % 113:             mv a1, t5 %
0000119f : 01f00633;   % 114:             mv a2, t6 %
000011a0 : 000106b7;   % 115:             li a3, 0x0000FF00 %
000011a1 : f0068693;   % 115:  %
000011a2 : 00800733;   % 116:             mv a4, s0 %
000011a3 : 648000ef;   % 117:             jal PRINT_STRING_SAVE %
000011a4 : 00838393;   % 118:             addi t2, t2, 8 %
000011a5 : 064f0f13;   % 119:             addi t5, t5, 100 %
000011a6 : 0c800e93;   % 120:             li t4, 200 %
000011a7 : fbdf44e3;   % 121:             blt t5, t4, Loop_Print_Attacks %
000011a8 : 01900f13;   % 122:             li t5, 25 %
000011a9 : 014f8f93;   % 123:             addi t6, t6, 20 %
000011aa : f9dff06f;   % 124:             j Loop_Print_Attacks %
000011ab : 01c12f83;   % 129:     lw t6, 28(sp) %
000011ac : 01812f03;   % 130:     lw t5, 24(sp) %
000011ad : 01412e83;   % 131:     lw t4, 20(sp) %
000011ae : 01012e03;   % 132:     lw t3, 16(sp) %
000011af : 00c12383;   % 133:     lw t2, 12(sp) %
000011b0 : 00812303;   % 134:     lw t1, 8(sp) %
000011b1 : 00412283;   % 135:     lw t0, 4(sp) %
000011b2 : 00012083;   % 136:     lw ra, 0(sp) %
000011b3 : 02010113;   % 137:     addi sp, sp, 32 %
000011b4 : 00008067;   % 138:     ret %
000011b5 : fe410113;   % 11:     addi sp, sp, -28 %
000011b6 : 00512023;   % 12:     sw t0, 0(sp) %
000011b7 : 00612223;   % 13:     sw t1, 4(sp) %
000011b8 : 00712423;   % 14:     sw t2, 8(sp) %
000011b9 : 01c12623;   % 15:     sw t3, 12(sp) %
000011ba : 01d12823;   % 16:     sw t4, 16(sp) %
000011bb : 01e12a23;   % 17:     sw t5, 20(sp) %
000011bc : 01f12c23;   % 18:     sw t6, 24(sp) %
000011bd : 00a002b3;   % 21:     mv t0, a0           # t0 = a0 %
000011be : 00b00333;   % 22:     mv t1, a1           # t1 = a1 %
000011bf : 00c003b3;   % 23:     mv t2, a2           # t2 = a2 %
000011c0 : 00000e33;   % 24:     mv t3, zero         # Armazena os stats para salvar %
000011c1 : 0002ae83;   % 27:     lw t4, 0(t0) %
000011c2 : f0000fb7;   % 30:     li t6, 0xF0000000 %
000011c3 : 000f8f93;   % 30:  %
000011c4 : 01fefe33;   % 31:     and t3, t4, t6 %
000011c5 : 0f000fb7;   % 34:     li t6, 0x0F000000 %
000011c6 : 000f8f93;   % 34:  %
000011c7 : 01feff33;   % 35:     and t5, t4, t6 %
000011c8 : 01ee0e33;   % 36:     add t3, t3, t5 %
000011c9 : 00831f13;   % 46:     slli t5, t1, 8 %
000011ca : 01ee0e33;   % 47:     add t3, t3, t5 %
000011cb : 0ff00f93;   % 50:     li t6, 0x000000FF %
000011cc : 01feff33;   % 51:     and t5, t4, t6 %
000011cd : 006f0f33;   % 52:     add t5, t5, t1 %
000011ce : 01ee0e33;   % 53:     add t3, t3, t5 %
000011cf : 01c3a023;   % 56:     sw t3, 0(t2) %
000011d0 : 00000e33;   % 57:     mv t3, zero %
000011d1 : 0042ae83;   % 60:     lw t4, 4(t0) %
000011d2 : ff000fb7;   % 63:     li t6, 0xFF000000 %
000011d3 : 000f8f93;   % 63:  %
000011d4 : 01feff33;   % 64:     and t5, t4, t6 %
000011d5 : 01831f93;   % 65:     slli t6, t1, 24 %
000011d6 : 01ff0f33;   % 66:     add t5, t5, t6 %
000011d7 : 01ee0e33;   % 67:     add t3, t3, t5 %
000011d8 : 00ff0fb7;   % 70:     li t6, 0x00FF0000 %
000011d9 : 000f8f93;   % 70:  %
000011da : 01feff33;   % 71:     and t5, t4, t6 %
000011db : 01031f93;   % 72:     slli t6, t1, 16 %
000011dc : 01ff0f33;   % 73:     add t5, t5, t6 %
000011dd : 01ee0e33;   % 74:     add t3, t3, t5 %
000011de : 0ff00f93;   % 77:     li t6, 0x000000FF %
000011df : 01feff33;   % 78:     and t5, t4, t6 %
000011e0 : 00131f93;   % 79:     slli t6, t1, 1 %
000011e1 : 01ff0f33;   % 80:     add t5, t5, t6 %
000011e2 : 01e00fb3;   % 81:     mv t6, t5 %
000011e3 : 008f1f13;   % 82:     slli t5, t5, 8 %
000011e4 : 01ff0f33;   % 83:     add t5, t5, t6 %
000011e5 : 01ee0e33;   % 84:     add t3, t3, t5 %
000011e6 : 01c3a223;   % 87:     sw t3, 4(t2)   %
000011e7 : 0082ae83;   % 90:     lw t4, 8(t0) %
000011e8 : 01d3a423;   % 93:     sw t4, 8(t2) %
000011e9 : 01812f83;   % 96:     lw t6, 24(sp) %
000011ea : 01412f03;   % 97:     lw t5, 20(sp) %
000011eb : 01012e83;   % 98:     lw t4, 16(sp) %
000011ec : 00c12e03;   % 99:     lw t3, 12(sp) %
000011ed : 00812383;   % 100:     lw t2, 8(sp) %
000011ee : 00412303;   % 101:     lw t1, 4(sp) %
000011ef : 00012283;   % 102:     lw t0, 0(sp) %
000011f0 : 01c10113;   % 103:     addi sp, sp, 28 %
000011f1 : 00008067;   % 106:     ret %
000011f2 : fe810113;   % 9:     addi sp, sp -24 %
000011f3 : 00112023;   % 10:     sw ra, 0(sp) %
000011f4 : 00512223;   % 11:     sw t0, 4(sp) %
000011f5 : 00612423;   % 12:     sw t1, 8(sp) %
000011f6 : 00712623;   % 13:     sw t2, 12(sp) %
000011f7 : 01c12823;   % 14:     sw t3, 16(sp) %
000011f8 : 01d12a23;   % 15:     sw t4, 20(sp) %
000011f9 : 00a002b3;   % 18:     mv t0, a0 %
000011fa : 00b00333;   % 19:     mv t1, a1 %
000011fb : 00c003b3;   % 20:     mv t2, a2 %
000011fc : be0ff0ef;   % 23:     jal GET_POKEMON_SPRITE %
000011fd : 006005b3;   % 26:     mv a1, t1 %
000011fe : 00700633;   % 27:     mv a2, t2 %
000011ff : 008006b3;   % 28:     mv a3, s0             # a3 = 0 %
00001200 : 251000ef;   % 29:     jal DRAW_IMAGE2 %
00001201 : 01412e83;   % 31:     lw t4, 20(sp) %
00001202 : 01012e03;   % 32:     lw t3, 16(sp) %
00001203 : 00c12383;   % 33:     lw t2, 12(sp) %
00001204 : 00812303;   % 34:     lw t1, 8(sp) %
00001205 : 00412283;   % 35:     lw t0, 4(sp) %
00001206 : 00012083;   % 36:     lw ra, 0(sp) %
00001207 : 01810113;   % 37:     addi sp, sp, 24 %
00001208 : 00008067;   % 38:     ret %
00001209 : ff010113;   % 50:     addi sp, sp -16 %
0000120a : 00112023;   % 51:     sw ra, 0(sp) %
0000120b : 00512223;   % 52:     sw t0, 4(sp) %
0000120c : 00612423;   % 53:     sw t1, 8(sp) %
0000120d : 00712623;   % 54:     sw t2, 12(sp) %
0000120e : 00a002b3;   % 57:     mv t0, a0 %
0000120f : 00b00333;   % 58:     mv t1, a1 %
00001210 : 00c003b3;   % 59:     mv t2, a2 %
00001211 : b44ff0ef;   % 62:     jal GET_POKEMON_NAME %
00001212 : 006005b3;   % 65:     mv a1, t1 %
00001213 : 00700633;   % 66:     mv a2, t2 %
00001214 : 00800733;   % 67:     mv a4, s0 %
00001215 : 480000ef;   % 68:     jal PRINT_STRING_SAVE %
00001216 : 00c12383;   % 71:     lw t2, 12(sp) %
00001217 : 00812303;   % 72:     lw t1, 8(sp) %
00001218 : 00412283;   % 73:     lw t0, 4(sp) %
00001219 : 00012083;   % 74:     lw ra, 0(sp) %
0000121a : 01010113;   % 75:     addi sp, sp, 16 %
0000121b : 00008067;   % 78:     ret %
0000121c : ff010113;   % 89:     addi sp, sp -16 %
0000121d : 00112023;   % 90:     sw ra, 0(sp) %
0000121e : 00512223;   % 91:     sw t0, 4(sp) %
0000121f : 00612423;   % 92:     sw t1, 8(sp) %
00001220 : 00712623;   % 93:     sw t2, 12(sp) %
00001221 : 00a002b3;   % 96:     mv t0, a0 %
00001222 : 00b00333;   % 97:     mv t1, a1 %
00001223 : 00c003b3;   % 98:     mv t2, a2 %
00001224 : 00200593;   % 101:     li a1, 0x02 %
00001225 : aa4ff0ef;   % 102:     jal GET_POKEMON_STAT %
00001226 : 006005b3;   % 105:     mv a1, t1 %
00001227 : 00700633;   % 106:     mv a2, t2 %
00001228 : 00800733;   % 107:     mv a4, s0 %
00001229 : 4a0000ef;   % 108:     jal PRINT_INT_SAVE %
0000122a : 00c12383;   % 110:     lw t2, 12(sp) %
0000122b : 00812303;   % 111:     lw t1, 8(sp) %
0000122c : 00412283;   % 112:     lw t0, 4(sp) %
0000122d : 00012083;   % 113:     lw ra, 0(sp) %
0000122e : 01010113;   % 114:     addi sp, sp, 16 %
0000122f : 00008067;   % 115:     ret %
00001230 : fe010113;   % 126:     addi sp, sp -32 %
00001231 : 00112023;   % 127:     sw ra, 0(sp) %
00001232 : 00512223;   % 128:     sw t0, 4(sp) %
00001233 : 00612423;   % 129:     sw t1, 8(sp) %
00001234 : 00712623;   % 130:     sw t2, 12(sp) %
00001235 : 01c12823;   % 131:     sw t3, 16(sp) %
00001236 : 01d12a23;   % 132:     sw t4, 20(sp) %
00001237 : 01e12c23;   % 133:     sw t5, 24(sp) %
00001238 : 01f12e23;   % 134:     sw t6, 28(sp) %
00001239 : 00a002b3;   % 137:     mv t0, a0 %
0000123a : 00b00333;   % 138:     mv t1, a1 %
0000123b : 00c003b3;   % 139:     mv t2, a2 %
0000123c : 01000593;   % 142:     li a1, 0x10 %
0000123d : a44ff0ef;   % 143:     jal GET_POKEMON_STAT  %
0000123e : 006005b3;   % 146:     mv a1, t1 %
0000123f : 00700633;   % 147:     mv a2, t2 %
00001240 : 00800733;   % 148:     mv a4, s0 %
00001241 : 440000ef;   % 149:     jal PRINT_INT_SAVE %
00001242 : 01c12f83;   % 151:     lw t6, 28(sp) %
00001243 : 01812f03;   % 152:     lw t5, 24(sp) %
00001244 : 01412e83;   % 153:     lw t4, 20(sp) %
00001245 : 01012e03;   % 154:     lw t3, 16(sp) %
00001246 : 00c12383;   % 155:     lw t2, 12(sp) %
00001247 : 00812303;   % 156:     lw t1, 8(sp) %
00001248 : 00412283;   % 157:     lw t0, 4(sp) %
00001249 : 00012083;   % 158:     lw ra, 0(sp) %
0000124a : 02010113;   % 159:     addi sp, sp, 32 %
0000124b : 00008067;   % 160:     ret %
0000124c : ffc10113;   % 169:     addi sp, sp -4 %
0000124d : 00112023;   % 170:     sw ra, 0(sp) %
0000124e : 00b00633;   % 173:     mv a2, a1 %
0000124f : 00a005b3;   % 174:     mv a1, a0 %
00001250 : 0fc22517;   % 175:     la a0, barra %
00001251 : 7db50513;   % 175:  %
00001252 : 00f58593;   % 176:     addi a1, a1, 15 %
00001253 : 000106b7;   % 177:     li a3, 0x0000FF00 %
00001254 : f0068693;   % 177:  %
00001255 : 00800733;   % 178:     mv a4, s0 %
00001256 : 37c000ef;   % 179:     jal PRINT_STRING_SAVE %
00001257 : 00012083;   % 181:     lw ra, 0(sp) %
00001258 : 00410113;   % 182:     addi sp, sp, 4 %
00001259 : 00008067;   % 183:     ret %
0000125a : fe010113;   % 194:     addi sp, sp -32 %
0000125b : 00112023;   % 195:     sw ra, 0(sp) %
0000125c : 00512223;   % 196:     sw t0, 4(sp) %
0000125d : 00612423;   % 197:     sw t1, 8(sp) %
0000125e : 00712623;   % 198:     sw t2, 12(sp) %
0000125f : 01c12823;   % 199:     sw t3, 16(sp) %
00001260 : 01d12a23;   % 200:     sw t4, 20(sp) %
00001261 : 01e12c23;   % 201:     sw t5, 24(sp) %
00001262 : 01f12e23;   % 202:     sw t6, 28(sp) %
00001263 : 00a002b3;   % 205:     mv t0, a0 %
00001264 : 00b00333;   % 206:     mv t1, a1 %
00001265 : 00c003b3;   % 207:     mv t2, a2 %
00001266 : 01200593;   % 210:     li a1, 0x12 %
00001267 : 99cff0ef;   % 211:     jal GET_POKEMON_STAT  %
00001268 : 006005b3;   % 214:     mv a1, t1 %
00001269 : 00700633;   % 215:     mv a2, t2 %
0000126a : 00800733;   % 216:     mv a4, s0 %
0000126b : 398000ef;   % 217:     jal PRINT_INT_SAVE %
0000126c : 01c12f83;   % 219:     lw t6, 28(sp) %
0000126d : 01812f03;   % 220:     lw t5, 24(sp) %
0000126e : 01412e83;   % 221:     lw t4, 20(sp) %
0000126f : 01012e03;   % 222:     lw t3, 16(sp) %
00001270 : 00c12383;   % 223:     lw t2, 12(sp) %
00001271 : 00812303;   % 224:     lw t1, 8(sp) %
00001272 : 00412283;   % 225:     lw t0, 4(sp) %
00001273 : 00012083;   % 226:     lw ra, 0(sp) %
00001274 : 02010113;   % 227:     addi sp, sp, 32 %
00001275 : 00008067;   % 228:     ret %
00001276 : ffc10113;   % 3:     addi sp, sp, -4 %
00001277 : 00112023;   % 4:     sw ra, 0(sp) %
00001278 : 0fc23517;   % 7:     la a0, P_INIMIGO %
00001279 : 87c50513;   % 7:  %
0000127a : 0c800593;   % 8:     li a1, 200 %
0000127b : 03400613;   % 9:     li a2, 52 %
0000127c : dd9ff0ef;   % 10:     jal DRAW_POKEMON %
0000127d : 00012083;   % 12:     lw ra, 0(sp) %
0000127e : 00410113;   % 13:     addi sp, sp, 4 %
0000127f : 00008067;   % 14:     ret %
00001280 : ffc10113;   % 18:     addi sp, sp, -4 %
00001281 : 00112023;   % 19:     sw ra, 0(sp) %
00001282 : 0fc23517;   % 22:     la a0, P_INIMIGO %
00001283 : 85450513;   % 22:  %
00001284 : 04500593;   % 23:     li a1, 69 %
00001285 : 00900613;   % 24:     li a2, 9 %
00001286 : 000106b7;   % 25:     li a3, 0x0000FF00 %
00001287 : f0068693;   % 25:  %
00001288 : e05ff0ef;   % 26:     jal DRAW_POKEMON_NAME %
00001289 : 00012083;   % 28:     lw ra, 0(sp) %
0000128a : 00410113;   % 29:     addi sp, sp, 4 %
0000128b : 00008067;   % 30:     ret %
0000128c : ffc10113;   % 34:     addi sp, sp, -4 %
0000128d : 00112023;   % 35:     sw ra, 0(sp) %
0000128e : 0fc23517;   % 38:     la a0, P_INIMIGO %
0000128f : 82450513;   % 38:  %
00001290 : 05200593;   % 39:     li a1, 82 %
00001291 : 02100613;   % 40:     li a2, 33 %
00001292 : 000106b7;   % 41:     li a3, 0x0000FF00 %
00001293 : f0068693;   % 41:  %
00001294 : e21ff0ef;   % 42:     jal DRAW_POKEMON_LVL %
00001295 : 00012083;   % 44:     lw ra, 0(sp) %
00001296 : 00410113;   % 45:     addi sp, sp, 4 %
00001297 : 00008067;   % 46:     ret %
00001298 : ffc10113;   % 50:     addi sp, sp, -4 %
00001299 : 00112023;   % 51:     sw ra, 0(sp) %
0000129a : 0fc22517;   % 54:     la a0, P_INIMIGO %
0000129b : 7f450513;   % 54:  %
0000129c : 08600593;   % 55:     li a1, 134 %
0000129d : 02100613;   % 56:     li a2, 33 %
0000129e : 000106b7;   % 57:     li a3, 0x0000FF00 %
0000129f : f0068693;   % 57:  %
000012a0 : e41ff0ef;   % 58:     jal DRAW_POKEMON_LIFE %
000012a1 : 00012083;   % 60:     lw ra, 0(sp) %
000012a2 : 00410113;   % 61:     addi sp, sp, 4 %
000012a3 : 00008067;   % 62:     ret %
000012a4 : ffc10113;   % 66:     addi sp, sp, -4 %
000012a5 : 00112023;   % 67:     sw ra, 0(sp) %
000012a6 : 0fc22517;   % 70:     la a0, P_INIMIGO %
000012a7 : 7c450513;   % 70:  %
000012a8 : 09a00593;   % 71:     li a1, 154 %
000012a9 : 02100613;   % 72:     li a2, 33 %
000012aa : 000106b7;   % 73:     li a3, 0x0000FF00 %
000012ab : f0068693;   % 73:  %
000012ac : eb9ff0ef;   % 74:     jal DRAW_POKEMON_LIFE_MAX %
000012ad : 00012083;   % 76:     lw ra, 0(sp) %
000012ae : 00410113;   % 77:     addi sp, sp, 4 %
000012af : 00008067;   % 78:     ret %
000012b0 : ffc10113;   % 82:     addi sp, sp, -4 %
000012b1 : 00112023;   % 83:     sw ra, 0(sp) %
000012b2 : f11ff0ef;   % 85:     jal DRAW_ENEMY_POKEMON_SPRITE %
000012b3 : f35ff0ef;   % 87:     jal PRINT_ENEMY_POKEMON_NAME %
000012b4 : f61ff0ef;   % 89:     jal PRINT_ENEMY_POKEMON_LEVEL %
000012b5 : f8dff0ef;   % 91:     jal PRINT_ENEMY_POKEMON_LIFE %
000012b6 : 08600513;   % 94:     li a0, 134 %
000012b7 : 02100593;   % 95:     li a1, 33 %
000012b8 : e51ff0ef;   % 96:     jal DRAW_BARRA %
000012b9 : fadff0ef;   % 98:     jal PRINT_ENEMY_POKEMON_LIFE_MAX %
000012ba : 00012083;   % 100:     lw ra, 0(sp) %
000012bb : 00410113;   % 101:     addi sp, sp, 4 %
000012bc : 00008067;   % 102:     ret %
000012bd : ffc10113;   % 3:     addi sp, sp, -4 %
000012be : 00112023;   % 4:     sw ra, 0(sp) %
000012bf : 0fc22517;   % 7:     la a0, P_PLAYER %
000012c0 : 76c50513;   % 7:  %
000012c1 : 03400593;   % 8:     li a1, 52 %
000012c2 : 07c00613;   % 9:     li a2, 124 %
000012c3 : cbdff0ef;   % 10:     jal DRAW_POKEMON %
000012c4 : 00012083;   % 12:     lw ra, 0(sp) %
000012c5 : 00410113;   % 13:     addi sp, sp, 4 %
000012c6 : 00008067;   % 14:     ret %
000012c7 : ffc10113;   % 18:     addi sp, sp, -4 %
000012c8 : 00112023;   % 19:     sw ra, 0(sp) %
000012c9 : 0fc22517;   % 22:     la a0, P_PLAYER %
000012ca : 74450513;   % 22:  %
000012cb : 0c800593;   % 23:     li a1, 200 %
000012cc : 08e00613;   % 24:     li a2, 142 %
000012cd : 000106b7;   % 25:     li a3, 0x0000FF00 %
000012ce : f0068693;   % 25:  %
000012cf : ce9ff0ef;   % 26:     jal DRAW_POKEMON_NAME %
000012d0 : 00012083;   % 28:     lw ra, 0(sp) %
000012d1 : 00410113;   % 29:     addi sp, sp, 4 %
000012d2 : 00008067;   % 30:     ret %
000012d3 : ffc10113;   % 34:     addi sp, sp, -4 %
000012d4 : 00112023;   % 35:     sw ra, 0(sp) %
000012d5 : 0fc22517;   % 38:     la a0, P_PLAYER %
000012d6 : 71450513;   % 38:  %
000012d7 : 0d500593;   % 39:     li a1, 213 %
000012d8 : 0a500613;   % 40:     li a2, 165 %
000012d9 : 000106b7;   % 41:     li a3, 0x0000FF00 %
000012da : f0068693;   % 41:  %
000012db : d05ff0ef;   % 42:     jal DRAW_POKEMON_LVL %
000012dc : 00012083;   % 44:     lw ra, 0(sp) %
000012dd : 00410113;   % 45:     addi sp, sp, 4 %
000012de : 00008067;   % 46:     ret %
000012df : ffc10113;   % 50:     addi sp, sp, -4 %
000012e0 : 00112023;   % 51:     sw ra, 0(sp) %
000012e1 : 0fc22517;   % 54:     la a0, P_PLAYER %
000012e2 : 6e450513;   % 54:  %
000012e3 : 10900593;   % 55:     li a1, 265 %
000012e4 : 0a500613;   % 56:     li a2, 165 %
000012e5 : 000106b7;   % 57:     li a3, 0x0000FF00 %
000012e6 : f0068693;   % 57:  %
000012e7 : d25ff0ef;   % 58:     jal DRAW_POKEMON_LIFE %
000012e8 : 00012083;   % 60:     lw ra, 0(sp) %
000012e9 : 00410113;   % 61:     addi sp, sp, 4 %
000012ea : 00008067;   % 62:     ret %
000012eb : ffc10113;   % 66:     addi sp, sp, -4 %
000012ec : 00112023;   % 67:     sw ra, 0(sp) %
000012ed : 0fc22517;   % 70:     la a0, P_PLAYER %
000012ee : 6b450513;   % 70:  %
000012ef : 11d00593;   % 71:     li a1, 285 %
000012f0 : 0a500613;   % 72:     li a2, 165 %
000012f1 : 000106b7;   % 73:     li a3, 0x0000FF00 %
000012f2 : f0068693;   % 73:  %
000012f3 : d9dff0ef;   % 74:     jal DRAW_POKEMON_LIFE_MAX %
000012f4 : 00012083;   % 76:     lw ra, 0(sp) %
000012f5 : 00410113;   % 77:     addi sp, sp, 4 %
000012f6 : 00008067;   % 78:     ret %
000012f7 : ffc10113;   % 82:     addi sp, sp, -4 %
000012f8 : 00112023;   % 83:     sw ra, 0(sp) %
000012f9 : f11ff0ef;   % 85:     jal DRAW_PLAYER_POKEMON_SPRITE %
000012fa : f35ff0ef;   % 87:     jal PRINT_PLAYER_POKEMON_NAME %
000012fb : f61ff0ef;   % 89:     jal PRINT_PLAYER_POKEMON_LEVEL %
000012fc : f8dff0ef;   % 91:     jal PRINT_PLAYER_POKEMON_LIFE %
000012fd : 10900513;   % 94:     li a0, 265 %
000012fe : 0a500593;   % 95:     li a1, 165 %
000012ff : d35ff0ef;   % 96:     jal DRAW_BARRA %
00001300 : fadff0ef;   % 98:     jal PRINT_PLAYER_POKEMON_LIFE_MAX %
00001301 : 00012083;   % 100:     lw ra, 0(sp) %
00001302 : 00410113;   % 101:     addi sp, sp, 4 %
00001303 : 00008067;   % 102:     ret %
00001304 : fcc10113;   % 3:     addi sp, sp, -52 %
00001305 : 00112023;   % 4:     sw ra, 0(sp) %
00001306 : 00512223;   % 5:     sw t0, 4(sp) %
00001307 : 00612423;   % 6:     sw t1, 8(sp) %
00001308 : 00712623;   % 7:     sw t2, 12(sp) %
00001309 : 01c12823;   % 8:     sw t3, 16(sp) %
0000130a : 01d12a23;   % 9:     sw t4, 20(sp) %
0000130b : 01e12c23;   % 10:     sw t5, 24(sp) %
0000130c : 01f12e23;   % 11:     sw t6, 28(sp) %
0000130d : 02812023;   % 12:     sw s0, 32(sp) %
0000130e : 02912223;   % 13:     sw s1, 36(sp) %
0000130f : 03212423;   % 14:     sw s2, 40(sp) %
00001310 : 03312623;   % 15:     sw s3, 44(sp) %
00001311 : 03412823;   % 16:     sw s4,48(sp) %
00001312 : e49fc0ef;   % 18:     jal midiOutDE2  %
00001313 : 03012a03;   % 21:     lw s4, 48(sp) %
00001314 : 02c12983;   % 22:     lw s3, 44(sp) %
00001315 : 02812903;   % 23:     lw s2, 40(sp) %
00001316 : 02412483;   % 24:     lw s1, 36(sp) %
00001317 : 02012403;   % 25:     lw s0, 32(sp) %
00001318 : 01c12f83;   % 26:     lw t6, 28(sp) %
00001319 : 01812f03;   % 27:     lw t5, 24(sp) %
0000131a : 01412e83;   % 28:     lw t4, 20(sp) %
0000131b : 01012e03;   % 29:     lw t3, 16(sp) %
0000131c : 00c12383;   % 30:     lw t2, 12(sp) %
0000131d : 00812303;   % 31:     lw t1, 8(sp) %
0000131e : 00412283;   % 32:     lw t0, 4(sp) %
0000131f : 00012083;   % 33:     lw ra, 0(sp) %
00001320 : 03410113;   % 34:     addi sp, sp, 52 %
00001321 : 00008067;   % 35:     ret %
00001322 : ffc10113;   % 7:     addi sp, sp, -4 %
00001323 : 00112023;   % 8:     sw ra, 0(sp) %
00001324 : 00500593;   % 10:     li a1, 5 %
00001325 : 0fc22617;   % 11:     la a2, P_PLAYER %
00001326 : 5d460613;   % 11:  %
00001327 : a39ff0ef;   % 12:     jal CREATE_POKEMON %
00001328 : 00012083;   % 14:     lw ra, 0(sp) %
00001329 : 00410113;   % 15:     addi sp, sp, 4 %
0000132a : 00008067;   % 16:     ret %
0000132b : ff810113;   % 9:     addi sp, sp, -8 %
0000132c : 00512023;   % 10:     sw t0, 0(sp) %
0000132d : 00612223;   % 11:     sw t1, 4(sp) %
0000132e : c0102373;   % 15:         csrr t1, 3073           # Adquiri o tempo atual %
0000132f : 40b302b3;   % 16:         sub t0, t1, a1          # Calcula a variação do tempo %
00001330 : fea34ce3;   % 17:         blt t1, a0, Loop_Sleep  # Se a variação de tempo for menor que a0, repetir o processo %
00001331 : 00412303;   % 20:     lw t1, 4(sp) %
00001332 : 00012283;   % 21:     lw t0, 0(sp) %
00001333 : 00810113;   % 22:     addi sp, sp, 8 %
00001334 : 00008067;   % 25:     ret %
00001335 : fd010113;   % 12:     addi sp, sp, -48 %
00001336 : 00112023;   % 13:     sw ra, 0(sp) %
00001337 : 00512223;   % 14:     sw t0, 4(sp) %
00001338 : 00612423;   % 15:     sw t1, 8(sp) %
00001339 : 00712623;   % 16:     sw t2, 12(sp) %
0000133a : 01c12823;   % 17:     sw t3, 16(sp) %
0000133b : 01d12a23;   % 18:     sw t4, 20(sp) %
0000133c : 01e12c23;   % 19:     sw t5, 24(sp) %
0000133d : 01f12e23;   % 20:     sw t6, 28(sp) %
0000133e : 02812023;   % 21:     sw s0, 32(sp) %
0000133f : 02912223;   % 22:     sw s1, 36(sp) %
00001340 : 03212423;   % 23:     sw s2, 40(sp) %
00001341 : 03312623;   % 24:     sw s3, 44(sp) %
00001342 : 9adfc0ef;   % 26:     jal printString %
00001343 : 02c12983;   % 29:     lw s3, 44(sp) %
00001344 : 02812903;   % 30:     lw s2, 40(sp) %
00001345 : 02412483;   % 31:     lw s1, 36(sp) %
00001346 : 02012403;   % 32:     lw s0, 32(sp) %
00001347 : 01c12f83;   % 33:     lw t6, 28(sp) %
00001348 : 01812f03;   % 34:     lw t5, 24(sp) %
00001349 : 01412e83;   % 35:     lw t4, 20(sp) %
0000134a : 01012e03;   % 36:     lw t3, 16(sp) %
0000134b : 00c12383;   % 37:     lw t2, 12(sp) %
0000134c : 00812303;   % 38:     lw t1, 8(sp) %
0000134d : 00412283;   % 39:     lw t0, 4(sp) %
0000134e : 00012083;   % 40:     lw ra, 0(sp) %
0000134f : 03010113;   % 41:     addi sp, sp, 48 %
00001350 : 00008067;   % 42:     ret %
00001351 : fd010113;   % 54:     addi sp, sp, -48 %
00001352 : 00112023;   % 55:     sw ra, 0(sp) %
00001353 : 00512223;   % 56:     sw t0, 4(sp) %
00001354 : 00612423;   % 57:     sw t1, 8(sp) %
00001355 : 00712623;   % 58:     sw t2, 12(sp) %
00001356 : 01c12823;   % 59:     sw t3, 16(sp) %
00001357 : 01d12a23;   % 60:     sw t4, 20(sp) %
00001358 : 01e12c23;   % 61:     sw t5, 24(sp) %
00001359 : 01f12e23;   % 62:     sw t6, 28(sp) %
0000135a : 02812023;   % 63:     sw s0, 32(sp) %
0000135b : 02912223;   % 64:     sw s1, 36(sp) %
0000135c : 03212423;   % 65:     sw s2, 40(sp) %
0000135d : 03312623;   % 66:     sw s3, 44(sp) %
0000135e : d00fd0ef;   % 68:     jal printIntUnsigned %
0000135f : 02c12983;   % 71:     lw s3, 44(sp) %
00001360 : 02812903;   % 72:     lw s2, 40(sp) %
00001361 : 02412483;   % 73:     lw s1, 36(sp) %
00001362 : 02012403;   % 74:     lw s0, 32(sp) %
00001363 : 01c12f83;   % 75:     lw t6, 28(sp) %
00001364 : 01812f03;   % 76:     lw t5, 24(sp) %
00001365 : 01412e83;   % 77:     lw t4, 20(sp) %
00001366 : 01012e03;   % 78:     lw t3, 16(sp) %
00001367 : 00c12383;   % 79:     lw t2, 12(sp) %
00001368 : 00812303;   % 80:     lw t1, 8(sp) %
00001369 : 00412283;   % 81:     lw t0, 4(sp) %
0000136a : 00012083;   % 82:     lw ra, 0(sp) %
0000136b : 03010113;   % 83:     addi sp, sp, 48 %
0000136c : 00008067;   % 84:     ret %
0000136d : ff810113;   % 3:     addi sp, sp, -8 %
0000136e : 00112023;   % 4:     sw ra, 0(sp) %
0000136f : 00512223;   % 5:     sw t0, 4(sp) %
00001370 : 2e4000ef;   % 8:         jal KEY2 %
00001371 : 07a00293;   % 9:         li t0, 'z' %
00001372 : 00550463;   % 10:         beq a0, t0, End_Confirm_Dialog %
00001373 : ff5ff06f;   % 11:         j Loop_Confirm_Dialog %
00001374 : 00412283;   % 14:     lw t0, 4(sp) %
00001375 : 00012083;   % 15:     lw ra, 0(sp) %
00001376 : 00810113;   % 16:     addi sp, sp, 8 %
00001377 : 00008067;   % 17:     ret %
00001378 : fec10113;   % 10: 	addi sp, sp, -20 %
00001379 : 00112823;   % 11: 	sw ra, 16(sp) %
0000137a : 01c12623;   % 12: 	sw t3, 12(sp) %
0000137b : 00712423;   % 13: 	sw t2, 8(sp) %
0000137c : 00612223;   % 14: 	sw t1, 4(sp) %
0000137d : 00512023;   % 15: 	sw t0, 0(sp) %
0000137e : 00a002b3;   % 17: 	mv t0, a0 %
0000137f : 00b00333;   % 18: 	mv t1, a1 %
00001380 : 07700393;   % 20:   	li t2,'w' %
00001381 : 04768c63;   % 21: 	beq a3,t2,MOVE_CIMA %
00001382 : 06100393;   % 22: 	li t2,'a' %
00001383 : 06768463;   % 23: 	beq a3,t2,MOVE_ESQ %
00001384 : 07300393;   % 24: 	li t2,'s' %
00001385 : 06768e63;   % 25: 	beq a3,t2,MOVE_BAIXO %
00001386 : 06400393;   % 26: 	li t2,'d' %
00001387 : 08768e63;   % 27: 	beq a3,t2,MOVE_DIR %
00001388 : 00008067;   % 28: 	ret %
00001389 : 00500533;   % 31: 	mv a0, t0 %
0000138a : 006005b3;   % 32: 	mv a1, t1 %
0000138b : 0bc000ef;   % 33: 	jal ra, CHECK_TILE %
0000138c : 00050863;   % 36: 	beqz a0,FIM_MOVE %
0000138d : 00059663;   % 39:   	bne a1, zero, FIM_MOVE %
0000138e : 005004b3;   % 41: 	mv s1,t0 %
0000138f : 00600933;   % 42: 	mv s2,t1 %
00001390 : 00012283;   % 47: 	lw t0, 0(sp) %
00001391 : 00412303;   % 48: 	lw t1, 4(sp) %
00001392 : 00812383;   % 49: 	lw t2, 8(sp) %
00001393 : 00c12e03;   % 50: 	lw t3, 12(sp) %
00001394 : 01012083;   % 51: 	lw ra, 16(sp) %
00001395 : 01410113;   % 52: 	addi sp, sp, 20 %
00001396 : 00008067;   % 54: 	ret %
00001397 : 00000e13;   % 57: 	li t3, 0 # direçao para cima %
00001398 : 01c99663;   % 59: 	bne s3, t3, MUDA_DIRECAO_CIMA # checa se a direcao ja esta certa. se nao so muda a direçao %
00001399 : fc028ee3;   % 61: 	beqz t0,FIM_MOVE # se estiver na primeira linha nao pode subir mais %
0000139a : fff28293;   % 62: 	addi t0,t0,-1 %
0000139b : 00000993;   % 65: 	li s3, 0 %
0000139c : fb5ff06f;   % 67: 	jal zero, VOLTA_MOVE %
0000139d : 00300e13;   % 70: 	li t3, 3 # direçao esquerda %
0000139e : 01c99863;   % 72: 	bne s3, t3, MUDA_DIRECAO_ESQ %
0000139f : fc0302e3;   % 74: 	beqz t1,FIM_MOVE %
000013a0 : fff30313;   % 75: 	addi t1,t1,-1 %
000013a1 : fa1ff06f;   % 76: 	jal zero, VOLTA_MOVE %
000013a2 : 00300993;   % 79: 	li s3, 3 %
000013a3 : f99ff06f;   % 81: 	jal zero, VOLTA_MOVE %
000013a4 : 00100e13;   % 84: 	li t3, 1 # direçao baixo %
000013a5 : 01c99e63;   % 86: 	bne s3, t3, MUDA_DIRECAO_BAIXO %
000013a6 : 0fc22e17;   % 88: 	la t3,CURRENT_MAP %
000013a7 : 258e0e13;   % 88:  %
000013a8 : 000e2383;   % 89:   	lw t2, 0(t3) %
000013a9 : 0043a383;   % 90: 	lw t2,4(t2) %
000013aa : f8728ce3;   % 91: 	beq t0,t2,FIM_MOVE %
000013ab : 00128293;   % 92: 	addi t0,t0,1 %
000013ac : 00100993;   % 95: 	li s3, 1 %
000013ad : f71ff06f;   % 97: 	jal zero, VOLTA_MOVE %
000013ae : 00200e13;   % 100: 	li t3, 2 # direçao baixo %
000013af : 03c99263;   % 102: 	bne s3, t3, MUDA_DIRECAO_DIR %
000013b0 : 0fc22e17;   % 104: 	la t3,CURRENT_MAP %
000013b1 : 230e0e13;   % 104:  %
000013b2 : 000e2383;   % 105:   	lw t2, 0(t3) %
000013b3 : 0fc21397;   % 106: 	la t2,MAPA %
000013b4 : 47038393;   % 106:  %
000013b5 : 0003a383;   % 107: 	lw t2,0(t2) %
000013b6 : f66384e3;   % 108: 	beq t2,t1,FIM_MOVE %
000013b7 : 00130313;   % 109: 	addi t1,t1,1 %
000013b8 : 00200993;   % 112: 	li s3, 2 %
000013b9 : f41ff06f;   % 114: 	jal zero, VOLTA_MOVE %
000013ba : ff010113;   % 126: 	addi sp,sp,-16 %
000013bb : 00112623;   % 127: 	sw ra,12(sp) %
000013bc : 00712423;   % 128:   	sw t2,8(sp) %
000013bd : 00612223;   % 129: 	sw t1,4(sp) %
000013be : 00512023;   % 130: 	sw t0,0(sp) %
000013bf : 00a002b3;   % 132: 	mv t0,a0 %
000013c0 : 00b00333;   % 133: 	mv t1,a1 %
000013c1 : 0fc22397;   % 135:   	la t2, CURRENT_MAP %
000013c2 : 1ec38393;   % 135:  %
000013c3 : 0003a503;   % 136: 	lw a0,0(t2) %
000013c4 : 005005b3;   % 137: 	mv a1,t0 %
000013c5 : 00600633;   % 138: 	mv a2,t1 %
000013c6 : 00100693;   % 139: 	li a3,1 %
000013c7 : facfd0ef;   % 140: 	jal ra, AJUSTA_XY %
000013c8 : 00054283;   % 142: 	lbu t0,0(a0) # t0 = codigo do objeto %
000013c9 : 0fc21397;   % 143: 	la t2,OBJETOS %
000013ca : e3c38393;   % 143:  %
000013cb : 00400313;   % 145: 	addi t1,zero,4 %
000013cc : 02530333;   % 146: 	mul t1,t1,t0 #quantidade de bytes que serao adicionados ao endereco objetos %
000013cd : 00638333;   % 147: 	add t1,t2,t1 #t1 recebe o endereco do objeto requisitado %
000013ce : 00032303;   % 148: 	lw t1,0(t1) # t1 recebe o endereco do objeto %
000013cf : 00430503;   % 150: 	lb a0, 4(t1) # a0 recebe se o tile e andavel ou nao %
000013d0 : 00630283;   % 151: 	lb t0, 6(t1) # t0 recebe se o tile tem alguma acao %
000013d1 : 00100393;   % 154: 	li t2, 1 %
000013d2 : 00728e63;   % 155: 	beq t0, t2, CHECK_TILE.CHANGE %
000013d3 : 00200393;   % 158: 	li t2, 2 %
000013d4 : 04728463;   % 159: 	beq t0, t2, CHECK_TILE.SET_BATTLE %
000013d5 : 00400393;   % 161: 	li t2,4 %
000013d6 : 02728063;   % 162: 	beq t0, t2,CHECK_TILE.GYM_ENTER %
000013d7 : 00000593;   % 164: 	li a1, 0 %
000013d8 : 07c0006f;   % 165: 	j CHECK_TILE.FIM %
000013d9 : 00832503;   % 169:     lw a0, 8(t1) %
000013da : 08c000ef;   % 170:     jal CHANGE_MAP %
000013db : 00100513;   % 172:     li a0, 1 %
000013dc : 00100593;   % 173:     li a1, 1 %
000013dd : 0680006f;   % 175:     j CHECK_TILE.FIM %
000013de : 0dc000ef;   % 178: 	jal VERIFICA_PASSE %
000013df : 00000593;   % 180: 	li a1, 0 %
000013e0 : 04050e63;   % 181: 	beqz a0, CHECK_TILE.FIM %
000013e1 : 00832503;   % 183: 	lw a0, 8(t1) %
000013e2 : 06c000ef;   % 184:     jal CHANGE_MAP %
000013e3 : 00100513;   % 186:     li a0, 1 %
000013e4 : 00100593;   % 187:     li a1, 1 %
000013e5 : 048000ef;   % 189: 	jal CHECK_TILE.FIM %
000013e6 : 0fc22297;   % 194: 	la t0, P_PLAYER %
000013e7 : 2d028293;   % 194:  %
000013e8 : 0002a283;   % 195: 	lw t0, 0(t0) %
000013e9 : 00100513;   % 197: 	li a0, 1 %
000013ea : 00000593;   % 198:     li a1, 0 %
000013eb : 02028863;   % 199: 	beqz t0, CHECK_TILE.FIM %
000013ec : 0fc22297;   % 201:     la t0, WILL_BATTLE %
000013ed : 16a28293;   % 201:  %
000013ee : 550000ef;   % 203:     jal RANDOM_SAVE %
000013ef : 00700313;   % 205:     li t1, 7 %
000013f0 : 00a37333;   % 206:     and t1, t1, a0 %
000013f1 : 00100513;   % 208:     li a0, 1 %
000013f2 : 00000593;   % 209:     li a1, 0 %
000013f3 : 00030463;   % 210:     beqz t1, CHECK_TILE.CONFIRM_BATTLE %
000013f4 : 00c000ef;   % 212:     jal CHECK_TILE.FIM %
000013f5 : 00100313;   % 216:       li t1, 1  %
000013f6 : 00628023;   % 217:       sb t1, 0(t0) %
000013f7 : 00012283;   % 221: 	lw t0,0(sp) %
000013f8 : 00412303;   % 222: 	lw t1,4(sp) %
000013f9 : 00812383;   % 223:   	lw t2,8(sp) %
000013fa : 00c12083;   % 224: 	lw ra,12(sp) %
000013fb : 01010113;   % 225: 	addi sp,sp,16 %
000013fc : 00008067;   % 226: 	ret %
000013fd : ff010113;   % 234: 	addi sp, sp, -16 %
000013fe : 00112623;   % 235: 	sw ra, 12(sp) %
000013ff : 00712423;   % 236: 	sw t2, 8(sp) %
00001400 : 00612223;   % 237: 	sw t1, 4(sp) %
00001401 : 00512023;   % 238: 	sw t0, 0(sp) %
00001402 : 0fc22297;   % 240:   la t0, CURRENT_MAP %
00001403 : 0e828293;   % 240:  %
00001404 : 00052303;   % 241:   lw t1, 0(a0) %
00001405 : 0062a023;   % 242:   sw t1, 0(t0) %
00001406 : 0fc21297;   % 244:   la t0, MAPA %
00001407 : 32428293;   % 244:  %
00001408 : 00628a63;   % 245:   beq t0, t1, CHANGE_MAP.FIM   %
00001409 : 0fc22297;   % 247:   la t0, MAPA_OBJ %
0000140a : 0e028293;   % 247:  %
0000140b : 00928223;   % 248:   sb s1, 4(t0) %
0000140c : 012282a3;   % 249:   sb s2, 5(t0) %
0000140d : 00450483;   % 252:     lb s1, 4(a0) %
0000140e : 00550903;   % 253:     lb s2, 5(a0) %
0000140f : 00012283;   % 255:     lw t0,0(sp) %
00001410 : 00412303;   % 256:     lw t1,4(sp) %
00001411 : 00812383;   % 257:     lw t2,8(sp) %
00001412 : 00c12083;   % 258:     lw ra,12(sp) %
00001413 : 01010113;   % 259:     addi sp,sp,16 %
00001414 : 00008067;   % 261:     ret %
00001415 : ff810113;   % 264: 	addi sp, sp, -8 %
00001416 : 00112023;   % 265:     sw ra, 0(sp) %
00001417 : 00512223;   % 266:     sw t0, 4(sp) %
00001418 : 0fc22297;   % 268: 	la t0, passe %
00001419 : 2ff28293;   % 268:  %
0000141a : 00028283;   % 269: 	lb t0, 0(t0) %
0000141b : 00100513;   % 271: 	li a0, 1 %
0000141c : 02029263;   % 272: 	bne t0, zero, VERIFICA_PASSE.FIM %
0000141d : 00144413;   % 274: 	xori s0, s0, 1 %
0000141e : 0fc22517;   % 276: 	la a0,  GIN0 %
0000141f : e1450513;   % 276:  %
00001420 : 008005b3;   % 277: 	mv a1, s0 %
00001421 : 0fc22617;   % 278: 	la a2, GIN1 %
00001422 : e2c60613;   % 278:  %
00001423 : 2d0000ef;   % 279: 	jal PRINT_TEXT_BOX %
00001424 : 00000513;   % 281: 	li a0, 0 %
00001425 : 00412283;   % 284:     lw t0, 4(sp) %
00001426 : 00012083;   % 285:     lw ra, 0(sp) %
00001427 : 00810113;   % 286: 	addi sp, sp, 8 %
00001428 : 00008067;   % 287: 	ret %
00001429 : ff810113;   % 291:     addi sp, sp, -8 %
0000142a : 00512023;   % 292:     sw t0, 0(sp) %
0000142b : 00612223;   % 293:     sw t1, 4(sp) %
0000142c : ff200337;   % 295:     li t1,0xFF200000		# carrega o endereço de controle do KDMMIO %
0000142d : 00030313;   % 295:  %
0000142e : 00032283;   % 296: 	lw t0,0(t1)			    # Le bit de Controle Teclado %
0000142f : 0012f293;   % 297: 	andi t0,t0,0x0001		# mascara o bit menos significativo %
00001430 : 00028463;   % 298:     beq t0,zero,FIM  	   	# Se não há tecla pressionada então vai para FIM %
00001431 : 00432503;   % 299:     lw a0,4(t1)  			# le o valor da tecla tecla %
00001432 : 00412303;   % 301:     lw t1, 4(sp) %
00001433 : 00012283;   % 302:     lw t0, 0(sp) %
00001434 : 00810113;   % 303:     addi sp, sp, 8 %
00001435 : 00008067;   % 304:     ret				    # retorna %
00001436 : ff810113;   % 6:     addi sp, sp, -8 %
00001437 : 00112223;   % 7:     sw ra, 4(sp) %
00001438 : 00512023;   % 8:     sw t0, 0(sp) %
00001439 : 0a000593;   % 10:     li a1,160 # posiçao x  %
0000143a : 06d00613;   % 11:     li a2,109 # posiçao y %
0000143b : 008006b3;   % 12:     mv a3, s0 # frame %
0000143c : 00000293;   % 14:     li t0, 0 %
0000143d : 01328e63;   % 15:     beq t0, s3, PRINT_PLAYER.CIMA %
0000143e : 00100293;   % 16:     li t0, 1 %
0000143f : 03328263;   % 17:     beq t0, s3, PRINT_PLAYER.BAIXO %
00001440 : 00200293;   % 18:     li t0, 2 %
00001441 : 03328663;   % 19:     beq t0, s3, PRINT_PLAYER.DIR %
00001442 : 00300293;   % 20:     li t0, 3 %
00001443 : 03328a63;   % 21:     beq t0, s3, PRINT_PLAYER.ESQ %
00001444 : 0fc19517;   % 24:       la a0, hero4 %
00001445 : 44450513;   % 24:  %
00001446 : 00000733;   % 25:       mv a4, zero %
00001447 : 0300006f;   % 26:       jal zero, PRINT_PLAYER.PRINT %
00001448 : 0fc19517;   % 29:       la a0, hero1 %
00001449 : 08c50513;   % 29:  %
0000144a : 00000733;   % 30:       mv a4, zero %
0000144b : 0200006f;   % 31:       jal zero, PRINT_PLAYER.PRINT %
0000144c : 0fc19517;   % 34:       la a0, hero7 %
0000144d : 7cc50513;   % 34:  %
0000144e : 00100713;   % 35:       li a4, 1 %
0000144f : 0100006f;   % 36:       jal zero, PRINT_PLAYER.PRINT %
00001450 : 00000733;   % 39:       mv a4, zero %
00001451 : 0fc19517;   % 40:       la a0, hero7 %
00001452 : 7b850513;   % 40:  %
00001453 : 014000ef;   % 43:       jal DRAW_IMAGE %
00001454 : 00012283;   % 45:     lw t0, 0(sp) %
00001455 : 00412083;   % 46:     lw ra, 4(sp) %
00001456 : 00810113;   % 47:     addi sp, sp, 8 %
00001457 : 00008067;   % 49:     ret %
00001458 : fe010113;   % 19:   addi sp, sp, -32 %
00001459 : 00112e23;   % 20:   sw ra, 28(sp) %
0000145a : 01f12c23;   % 21:   sw t6, 24(sp) %
0000145b : 01e12a23;   % 22:   sw t5, 20(sp) %
0000145c : 01d12823;   % 23:   sw t4, 16(sp) %
0000145d : 01c12623;   % 24:   sw t3, 12(sp) %
0000145e : 00712423;   % 25:   sw t2, 8(sp) %
0000145f : 00612223;   % 26:   sw t1, 4(sp) %
00001460 : 00512023;   % 27:   sw t0, 0(sp) %
00001461 : 000012b7;   % 30:   li t0, 0xFF0                    # Inicializando t0 = 0xFF0 %
00001462 : ff028293;   % 30:  %
00001463 : 00d282b3;   % 31:   add t0, t0, a3                  # t0 = t0 + a3 %
00001464 : 01429293;   % 32:   slli t0, t0, 20                 # Shiftando 20 bits a esquerda de t0 %
00001465 : 00b282b3;   % 35:   add t0, t0, a1                  # t0 = t0 + a1 (Movendo o endereço para a posição x) %
00001466 : 14000313;   % 36:   li t1, 320                      # t1 = 320 %
00001467 : 02c30333;   % 37:   mul t1, t1, a2                  # t1 = t1 x a2 %
00001468 : 006282b3;   % 38:   add t0, t0, t1                  # t0 = t0 + t1 %
00001469 : 00850313;   % 41:   addi t1, a0, 8                  # t1 = a0 + 8 (Pular largura e comprimento da imagem) %
0000146a : 000003b3;   % 42:   mv t2, zero                     # t2 = 0 (Contador começa no 0) %
0000146b : 00000e33;   % 43:   mv t3, zero                     # t3 = 0 (Contador começa no 0) %
0000146c : 00052e83;   % 44:   lw t4, 0(a0)                    # t4 = a0 (Os primeiros 4 bytes do arquivo .data representam a largura da imagem) %
0000146d : 00452f03;   % 45:   lw t5, 4(a0)                    # t5 = a0 (Os bytes das posições 4 a 7 do arquivo .data representam a largura da imagem) %
0000146e : 04070263;   % 47:   beqz a4, Print_Line             # Printar sem espelhar %
0000146f : 01d30333;   % 49:   add t1, t1, t4                 # t1 = ultimo byte da primeira linha da imagem + 1 %
00001470 : fff30313;   % 50:   addi t1, t1, -1                # t4 = t4 - 1 (ultimo byte da linha)  %
00001471 : 00030f83;   % 54:     lb t6, 0(t1)                     # Le 1 byte da imagem e armazena em t6 %
00001472 : 01f28023;   % 55:     sb t6, 0(t0)                     # Armazena o byte lido no endereco do frame %
00001473 : 00128293;   % 57:     addi t0, t0, 1                   # t0 = t0 + 1 %
00001474 : fff30313;   % 58:     addi t1, t1, -1                  # t1 = t1 + 1 %
00001475 : 001e0e13;   % 60:     addi t3, t3, 1                   # t3 = t3 + 1 %
00001476 : ffde46e3;   % 61:     blt t3, t4, Print_Inverted_Line  # se t3 < t4, ir para Print_Inverted_Line %
00001477 : 14028293;   % 63:     addi t0, t0, 320                 # t0 = t0 + 320 (pular para a proxima linha) %
00001478 : 41d282b3;   % 64:     sub t0, t0, t4                   # t0 = t0 - t4 (voltar para o inicio da linha) %
00001479 : 00000e33;   % 66:     mv t3, zero                      # t3 = 0 (Resetar o contador) %
0000147a : 00138393;   % 67:     addi t2, t2, 1                   # t2 = t2 + 1 (incrementar o contador) %
0000147b : 01d30333;   % 69:     add t1, t1, t4                  # Volta ao ultimo byte da linha %
0000147c : 01d30333;   % 70:     add t1, t1, t4                  # Pula uma linha (ultimo byte da proxima linha) %
0000147d : fde3c8e3;   % 72:     bgt t5, t2, Print_Inverted_Line  # Se t5 > t2, ir para Print_Inverted_Line %
0000147e : 0300006f;   % 74:     jal zero, DRAW_IMAGE.FIM         # Ir para o fim do procedimento %
0000147f : 00032f83;   % 78:     lw t6, 0(t1)                # Lê 4 bytes da imagem e armazena em t6 %
00001480 : 01f2a023;   % 79:     sw t6, 0(t0)                # Armazena os 4 bytes lidos no endereço do Frame %
00001481 : 00428293;   % 81:     addi t0, t0, 4              # t0 = t0 + 4 %
00001482 : 00430313;   % 82:     addi t1, t1, 4              # t0 = t0 + 4 %
00001483 : 004e0e13;   % 84:     addi t3, t3, 4              # t3 = t3 + 4 %
00001484 : ffde46e3;   % 85:     blt t3, t4, Print_Line      # Se t3 < t4, ir para Print_Line %
00001485 : 14028293;   % 87:     addi t0, t0, 320            # t0 = t0 + 320 (pular para a próxima linha) %
00001486 : 41d282b3;   % 88:     sub t0, t0, t4              # t0 = t0 - t4 (voltar para o início da linha) %
00001487 : 00000e33;   % 90:     mv t3, zero                 # t3 = 0 (Resetar o contador t3) %
00001488 : 00138393;   % 91:     addi t2, t2, 1              # t2 = t2 + 1  %
00001489 : fde3cce3;   % 92:     bgt t5, t2, Print_Line      # Se t5 > t2, ir para Print_Line %
0000148a : 00012283;   % 95:     lw t0, 0(sp) %
0000148b : 00412303;   % 96:     lw t1, 4(sp) %
0000148c : 00812383;   % 97:     lw t2, 8(sp) %
0000148d : 00c12e03;   % 98:     lw t3, 12(sp) %
0000148e : 01012e83;   % 99:     lw t4, 16(sp) %
0000148f : 01412f03;   % 100:     lw t5, 20(sp) %
00001490 : 01812f83;   % 101:     lw t6, 24(sp) %
00001491 : 01c12083;   % 102:     lw ra, 28(sp) %
00001492 : 02010113;   % 103:     addi sp, sp, 32 %
00001493 : 00008067;   % 105:     ret %
00001494 : fe810113;   % 123:     addi sp, sp, -24 %
00001495 : 00512a23;   % 124:     sw t0, 20(sp) %
00001496 : 00612823;   % 125:     sw t1, 16(sp) %
00001497 : 00712623;   % 126:     sw t2, 12(sp) %
00001498 : 01c12423;   % 127:     sw t3, 8(sp) %
00001499 : 01d12223;   % 128:     sw t4, 4(sp) %
0000149a : 01e12023;   % 129:     sw t5, 0(sp) %
0000149b : 000012b7;   % 131:     li t0, 0xFF0                    # Inicializando t0 = 0xFF0 %
0000149c : ff028293;   % 131:  %
0000149d : 00d282b3;   % 132:     add t0, t0, a3                  # t0 = t0 + a3 %
0000149e : 01429293;   % 133:     slli t0, t0, 20                 # Shiftando 20 bits a esquerda de t0 %
0000149f : 00b282b3;   % 136:     add t0, t0, a1                  # t0 = t0 + a1 (Movendo o endereço para a posição x) %
000014a0 : 14000313;   % 137:     li t1, 320                      # t1 = 320 %
000014a1 : 02c30333;   % 138:     mul t1, t1, a2                  # t1 = t1 x a2 %
000014a2 : 006282b3;   % 139:     add t0, t0, t1                  # t0 = t0 + t1 %
000014a3 : 00850313;   % 142:     addi t1, a0, 8                  # t1 = a0 + 8 (Pular largura e comprimento da imagem) %
000014a4 : 000003b3;   % 143:     mv t2, zero                     # t2 = 0 (Contador começa no 0) %
000014a5 : 00000e33;   % 144:     mv t3, zero                     # t3 = 0 (Contador começa no 0) %
000014a6 : 00052e83;   % 145:     lw t4, 0(a0)                    # t4 = a0 (Os primeiros 4 bytes do arquivo .data representam a largura da imagem) %
000014a7 : 00452f03;   % 146:     lw t5, 4(a0)                    # t5 = a0 (Os bytes das posições 4 a 7 do arquivo .data representam a largura da imagem) %
000014a8 : 00030f83;   % 150:         lb t6, 0(t1)                # Lê 4 bytes da imagem e armazena em t6 %
000014a9 : 01f28023;   % 151:         sb t6, 0(t0)                # Armazena os 4 bytes lidos no endereço do Frame %
000014aa : 00128293;   % 153:         addi t0, t0, 1              # t0 = t0 + 4 %
000014ab : 00130313;   % 154:         addi t1, t1, 1              # t0 = t0 + 4 %
000014ac : 001e0e13;   % 156:         addi t3, t3, 1              # t3 = t3 + 4 %
000014ad : ffde46e3;   % 157:         blt t3, t4, Print_Line2      # Se t3 < t4, ir para Print_Line %
000014ae : 14028293;   % 159:         addi t0, t0, 320            # t0 = t0 + 320 (pular para a próxima linha) %
000014af : 41d282b3;   % 160:         sub t0, t0, t4              # t0 = t0 - t4 (voltar para o início da linha) %
000014b0 : 00000e33;   % 162:         mv t3, zero                 # t3 = 0 (Resetar o contador t3) %
000014b1 : 00138393;   % 163:         addi t2, t2, 1              # t2 = t2 + 1  %
000014b2 : fde3cce3;   % 164:         bgt t5, t2, Print_Line2      # Se t5 > t2, ir para Print_Line %
000014b3 : 00012f03;   % 167:         lw t5, 0(sp) %
000014b4 : 00412e83;   % 168:         lw t4, 4(sp) %
000014b5 : 00812e03;   % 169:         lw t3, 8(sp) %
000014b6 : 00c12383;   % 170:         lw t2, 12(sp) %
000014b7 : 01012303;   % 171:         lw t1, 16(sp) %
000014b8 : 01412283;   % 172:         lw t0, 20(sp) %
000014b9 : 01810113;   % 173:         addi sp, sp, 24 %
000014ba : 00008067;   % 174:         ret %
000014bb : fe410113;   % 184:     addi sp, sp, -28 %
000014bc : 00512023;   % 185:     sw t0, 0(sp) %
000014bd : 00612223;   % 186:     sw t1, 4(sp) %
000014be : 00712423;   % 187:     sw t2, 8(sp) %
000014bf : 01c12623;   % 188:     sw t3, 12(sp) %
000014c0 : 01d12823;   % 189:     sw t4, 16(sp) %
000014c1 : 01e12a23;   % 190:     sw t5, 20(sp) %
000014c2 : 01f12c23;   % 191:     sw t6, 24(sp) %
000014c3 : 000012b7;   % 193:     li t0, 0xFF0                    # Inicializando t0 = 0xFF0 %
000014c4 : ff028293;   % 193:  %
000014c5 : 00b282b3;   % 194:     add t0, t0, a1                  # t0 = t0 + a1 %
000014c6 : 01429293;   % 195:     slli t0, t0, 20                 # Shiftando 20 bits a esquerda de t0 %
000014c7 : 00013337;   % 196:     li t1, 0x12C00 %
000014c8 : c0030313;   % 196:  %
000014c9 : 00628333;   % 197:     add t1, t0, t1 %
000014ca : 00a003b3;   % 200:     mv t2, a0               # t2 = a0 %
000014cb : 0072a023;   % 204:         sw t2, 0(t0)                # Armazena os 4 bytes lidos no endereço do Frame %
000014cc : 00428293;   % 205:         addi t0, t0, 4              # t0 = t0 + 4 %
000014cd : fe629ce3;   % 206:         bne t0, t1, Print_Line3 %
000014ce : 01812f83;   % 208:         lw t6, 24(sp) %
000014cf : 01412f03;   % 209:         lw t5, 20(sp) %
000014d0 : 01012e83;   % 210:         lw t4, 16(sp) %
000014d1 : 00c12e03;   % 211:         lw t3, 12(sp) %
000014d2 : 00812383;   % 212:         lw t2, 8(sp) %
000014d3 : 00412303;   % 213:         lw t1, 4(sp) %
000014d4 : 00012283;   % 214:         lw t0, 0(sp) %
000014d5 : 01c10113;   % 215:         addi sp, sp, 28 %
000014d6 : 00008067;   % 216:         ret %
000014d7 : ff010113;   % 6:   addi sp, sp, -16 %
000014d8 : 00112023;   % 7:   sw ra, 0(sp) %
000014d9 : 00512223;   % 8:   sw t0, 4(sp) %
000014da : 00612423;   % 9:   sw t1, 8(sp) %
000014db : 00712623;   % 10:   sw t2, 12(sp) %
000014dc : 00a002b3;   % 12:   mv t0, a0 %
000014dd : 00b00333;   % 13:   mv t1, a1 %
000014de : 00c003b3;   % 14:   mv t2, a2 %
000014df : 00600533;   % 16:   mv a0, t1 %
000014e0 : 08c000ef;   % 17:   jal PRINT_BOX %
000014e1 : 00500533;   % 19:   mv a0, t0 %
000014e2 : 00e00593;   % 20:   li a1, 14 %
000014e3 : 0cc00613;   % 21:   li a2, 204 %
000014e4 : 000106b7;   % 22:   li a3, 0x0000FF00 %
000014e5 : f0068693;   % 22:  %
000014e6 : 00800733;   % 23:   mv a4, s0 %
000014e7 : 939ff0ef;   % 24:   jal PRINT_STRING_SAVE %
000014e8 : 00038863;   % 26:   beqz t2, PRINT_TEXT_BOX.FIM %
000014e9 : 00700533;   % 28:   mv a0, t2 %
000014ea : 006005b3;   % 29:   mv a1, t1 %
000014eb : 020000ef;   % 30:   jal PRINT_TEXT_BOX2 %
000014ec : a05ff0ef;   % 33:     jal CONFIRM_DIALOG %
000014ed : 00c12383;   % 35:     lw t2, 12(sp) %
000014ee : 00812303;   % 36:     lw t1, 8(sp) %
000014ef : 00412283;   % 37:     lw t0, 4(sp) %
000014f0 : 00012083;   % 38:     lw ra, 0(sp) %
000014f1 : 01010113;   % 39:     addi sp, sp, 16 %
000014f2 : 00008067;   % 40:     ret %
000014f3 : ff810113;   % 47:   addi sp, sp, -8 %
000014f4 : 00112023;   % 48:   sw ra, 0(sp) %
000014f5 : 00512223;   % 49:   sw t0, 4(sp) %
000014f6 : 00a002b3;   % 51:   mv t0, a0 %
000014f7 : 00b00333;   % 52:   mv t1, a1 %
000014f8 : 00500533;   % 54:   mv a0, t0 %
000014f9 : 00e00593;   % 55:   li a1, 14 %
000014fa : 0dc00613;   % 56:   li a2, 220 %
000014fb : 000106b7;   % 57:   li a3, 0x0000FF00 %
000014fc : f0068693;   % 57:  %
000014fd : 00800733;   % 58:   mv a4, s0 %
000014fe : 8ddff0ef;   % 59:   jal PRINT_STRING_SAVE %
000014ff : 00412283;   % 61:   lw t0, 4(sp) %
00001500 : 00012083;   % 62:   lw ra, 0(sp) %
00001501 : 00810113;   % 63:   addi sp, sp, 8 %
00001502 : 00008067;   % 64:   ret %
00001503 : fec10113;   % 73:   addi sp, sp, -20 %
00001504 : 00112823;   % 74:   sw ra, 16(sp) %
00001505 : 01c12623;   % 75:   sw t3, 12(sp) %
00001506 : 00712423;   % 76:   sw t2, 8(sp) %
00001507 : 00612223;   % 77:   sw t1, 4(sp) %
00001508 : 00512023;   % 78:   sw t0, 0(sp) %
00001509 : 00a00e33;   % 80: 	mv t3, a0 %
0000150a : 0fc1e517;   % 83:   la a0, tbx1 %
0000150b : 18450513;   % 83:  %
0000150c : 00000593;   % 84:   li a1, 0 %
0000150d : 0c200613;   % 85:   li a2, 194 %
0000150e : 01c006b3;   % 86:   mv a3, t3 %
0000150f : 00000713;   % 87:   li a4, 0 %
00001510 : d21ff0ef;   % 88:   jal DRAW_IMAGE %
00001511 : 0fc1e517;   % 91:   la a0, tbx2 %
00001512 : 29050513;   % 91:  %
00001513 : 00000593;   % 92:   li a1, 0 %
00001514 : 0da00613;   % 93:   li a2, 218 %
00001515 : 01c006b3;   % 94:   mv a3, t3 %
00001516 : 00000713;   % 95:   li a4, 0 %
00001517 : d05ff0ef;   % 96:   jal DRAW_IMAGE %
00001518 : 00000293;   % 98:   li t0, 0 %
00001519 : 01900313;   % 99:   li t1, 25 %
0000151a : 00c00393;   % 103:     li t2, 12 %
0000151b : 025383b3;   % 104:     mul t2, t2, t0 %
0000151c : 00c38393;   % 105:     addi t2, t2, 12 %
0000151d : 0fc1e517;   % 107:     la a0, tbx3 %
0000151e : 38850513;   % 107:  %
0000151f : 007005b3;   % 108:     mv a1, t2 %
00001520 : 0c200613;   % 109:     li a2, 194 %
00001521 : 01c006b3;   % 110:     mv a3, t3 %
00001522 : 00000713;   % 111:     li a4, 0 %
00001523 : cd5ff0ef;   % 113:     jal DRAW_IMAGE %
00001524 : 0fc1e517;   % 115:     la a0, tbx4 %
00001525 : 49450513;   % 115:  %
00001526 : 007005b3;   % 116:     mv a1, t2 %
00001527 : 0da00613;   % 117:      li a2, 218 %
00001528 : 01c006b3;   % 118:      mv a3, t3 %
00001529 : 00000713;   % 119:      li a4, 0 %
0000152a : cb9ff0ef;   % 121:      jal DRAW_IMAGE %
0000152b : 00128293;   % 123:      addi t0, t0, 1 %
0000152c : fa62cce3;   % 124:      blt t0, t1, PRINT_TEXT_BOX.LOOP %
0000152d : 0fc1e517;   % 127:   la a0, tbx1 %
0000152e : 0f850513;   % 127:  %
0000152f : 13400593;   % 128:   li a1, 308 %
00001530 : 0c200613;   % 129:   li a2, 194 %
00001531 : 01c006b3;   % 130:   mv a3, t3 %
00001532 : 00100713;   % 131:   li a4, 1 %
00001533 : c95ff0ef;   % 133:   jal DRAW_IMAGE %
00001534 : 0fc1e517;   % 136:   la a0, tbx2 %
00001535 : 20450513;   % 136:  %
00001536 : 13400593;   % 137:   li a1, 308 %
00001537 : 0da00613;   % 138:   li a2, 218 %
00001538 : 01c006b3;   % 139:   mv a3, t3 %
00001539 : 00100713;   % 140:   li a4, 1 %
0000153a : c79ff0ef;   % 141:   jal DRAW_IMAGE %
0000153b : 00012283;   % 143:   lw t0, 0(sp) %
0000153c : 00412303;   % 144:   lw t1, 4(sp) %
0000153d : 00812383;   % 145:   lw t2, 8(sp) %
0000153e : 00c12e03;   % 146:   lw t3, 12(sp) %
0000153f : 01012083;   % 147:   lw ra, 16(sp) %
00001540 : 01410113;   % 148:   addi sp, sp, 20 %
00001541 : 00008067;   % 149:   ret %
00001542 : fd010113;   % 3:     addi sp, sp, -48 %
00001543 : 00112023;   % 4:     sw ra, 0(sp) %
00001544 : 00512223;   % 5:     sw t0, 4(sp) %
00001545 : 00612423;   % 6:     sw t1, 8(sp) %
00001546 : 00712623;   % 7:     sw t2, 12(sp) %
00001547 : 01c12823;   % 8:     sw t3, 16(sp) %
00001548 : 01d12a23;   % 9:     sw t4, 20(sp) %
00001549 : 01e12c23;   % 10:     sw t5, 24(sp) %
0000154a : 01f12e23;   % 11:     sw t6, 28(sp) %
0000154b : 02812023;   % 12:     sw s0, 32(sp) %
0000154c : 02912223;   % 13:     sw s1, 36(sp) %
0000154d : 03212423;   % 14:     sw s2, 40(sp) %
0000154e : 03312623;   % 15:     sw s3, 44(sp) %
0000154f : afdfc0ef;   % 18:     jal Random %
00001550 : 02c12983;   % 20:     lw s3, 44(sp) %
00001551 : 02812903;   % 21:     lw s2, 40(sp) %
00001552 : 02412483;   % 22:     lw s1, 36(sp) %
00001553 : 02012403;   % 23:     lw s0, 32(sp) %
00001554 : 01c12f83;   % 24:     lw t6, 28(sp) %
00001555 : 01812f03;   % 25:     lw t5, 24(sp) %
00001556 : 01412e83;   % 26:     lw t4, 20(sp) %
00001557 : 01012e03;   % 27:     lw t3, 16(sp) %
00001558 : 00c12383;   % 28:     lw t2, 12(sp) %
00001559 : 00812303;   % 29:     lw t1, 8(sp) %
0000155a : 00412283;   % 30:     lw t0, 4(sp) %
0000155b : 00012083;   % 31:     lw ra, 0(sp) %
0000155c : 03010113;   % 32:     addi sp, sp, 48 %
0000155d : 00008067;   % 33:     ret %
0000155e : ff010113;   % 3:   addi sp, sp, -16 %
0000155f : 00112023;   % 4:   sw ra, 0(sp) %
00001560 : 00512223;   % 5:   sw t0, 4(sp) %
00001561 : 00612423;   % 6:   sw t1, 8(sp) %
00001562 : 00712623;   % 7:   sw t2, 12(sp) %
00001563 : 0fc22297;   % 9:   la t0, WILL_BATTLE %
00001564 : b8e28293;   % 9:  %
00001565 : 00028303;   % 11:   lb t1, 0(t0) %
00001566 : 0a030063;   % 12:   beqz t1, CHECK_BATTLE.FIM %
00001567 : f6dff0ef;   % 14:   jal RANDOM_SAVE %
00001568 : 00500313;   % 16:   li t1, 5 %
00001569 : 02656333;   % 17:   rem t1, a0, t1 %
0000156a : 00000393;   % 19:   li t2, 0 %
0000156b : 02730063;   % 20:   beq t1, t2, CHOOSE_CARAMELO %
0000156c : 00100393;   % 22:   li t2, 1 %
0000156d : 02730263;   % 23:   beq t1, t2, CHOOSE_SARUE %
0000156e : 00200393;   % 25:   li t2, 2 %
0000156f : 02730463;   % 26:   beq t1, t2, CHOOSE_POMBO %
00001570 : 00300393;   % 28:   li t2, 3 %
00001571 : 02730663;   % 29:   beq t1, t2, CHOOSE_GATO %
00001572 : 0340006f;   % 31:   j CHOOSE_LARVA %
00001573 : 0fc2a517;   % 34:     la a0, P_CARAMELO %
00001574 : dd050513;   % 34:  %
00001575 : 0340006f;   % 35:     j GO_BATTLE %
00001576 : 0fc2a517;   % 38:     la a0, P_SARUE %
00001577 : db850513;   % 38:  %
00001578 : 0280006f;   % 39:     j GO_BATTLE %
00001579 : 0fc2a517;   % 42:     la a0, P_POMBO %
0000157a : dd050513;   % 42:  %
0000157b : 01c0006f;   % 43:     j GO_BATTLE %
0000157c : 0fc2a517;   % 46:     la a0, P_GATO %
0000157d : dd050513;   % 46:  %
0000157e : 0100006f;   % 47:     j GO_BATTLE %
0000157f : 0fc2a517;   % 50:     la a0, P_LARVA %
00001580 : dac50513;   % 50:  %
00001581 : 0040006f;   % 51:     j GO_BATTLE %
00001582 : 00300593;   % 54:     li a1, 3 %
00001583 : 99dfd0ef;   % 55:     jal BATTLE_WILD_POKEMON %
00001584 : 02051463;   % 57:     bne a0, zero, CHECK_BATTLE.FIM %
00001585 : 0fc22297;   % 59:     la t0, MAPA_OBJ %
00001586 : af028293;   % 59:  %
00001587 : 0002a283;   % 60:     lw t0, 0(t0) %
00001588 : 0fc22317;   % 62:     la t1, CURRENT_MAP %
00001589 : ad030313;   % 62:  %
0000158a : 00532023;   % 63:     sw t0, 0(t1) %
0000158b : 01800493;   % 65:     li s1, 24 %
0000158c : 01a00913;   % 66:     li s2, 26 %
0000158d : 00000993;   % 67:     li s3, 0 %
0000158e : 00012083;   % 71:   lw ra, 0(sp) %
0000158f : 00412283;   % 72:   lw t0, 4(sp) %
00001590 : 00812303;   % 73:   lw t1, 8(sp) %
00001591 : 00c12383;   % 74:   lw t2, 12(sp) %
00001592 : 01010113;   % 75:   addi sp, sp, 16 %
00001593 : 00008067;   % 76:   ret %
00001594 : ff010113;   % 15:     addi sp, sp, -16 %
00001595 : 00112023;   % 16:     sw ra, 0(sp) %
00001596 : 00512223;   % 17:     sw t0, 4(sp) %
00001597 : 00612423;   % 18:     sw t1, 8(sp) %
00001598 : 00712623;   % 19:     sw t2, 12(sp) %
00001599 : 00a002b3;   % 22:     mv t0, a0 %
0000159a : 00b00333;   % 23:     mv t1, a1 %
0000159b : 01000593;   % 26:     li a1, 0x10 %
0000159c : cc8fe0ef;   % 27:     jal GET_POKEMON_STAT %
0000159d : 00a003b3;   % 28:     mv t2, a0 %
0000159e : 00030303;   % 31:     lb t1, 0(t1) %
0000159f : 007303b3;   % 34:     add t2, t1, t2 %
000015a0 : 00500533;   % 37:     mv a0, t0 %
000015a1 : 01200593;   % 38:     li a1, 0x12 %
000015a2 : cb0fe0ef;   % 39:     jal GET_POKEMON_STAT %
000015a3 : 00754463;   % 41:     bgt t2, a0, Set_To_MaxLife %
000015a4 : 0080006f;   % 42:     j End_Use_Potion %
000015a5 : 00a003b3;   % 45:         mv t2, a0 %
000015a6 : 00500533;   % 49:     mv a0, t0 %
000015a7 : 01000593;   % 50:     li a1, 0x10 %
000015a8 : 00700633;   % 51:     mv a2, t2 %
000015a9 : df4fe0ef;   % 52:     jal SET_POKEMON_STAT %
000015aa : 0fc22297;   % 55:     la t0, player_bag %
000015ab : a4028293;   % 55:  %
000015ac : 0042a303;   % 56:     lw t1, 4(t0) %
000015ad : fff30313;   % 57:     addi t1, t1, -1 %
000015ae : 0062a223;   % 58:     sw t1, 4(t0) %
000015af : 00c12383;   % 61:     lw t2, 12(sp) %
000015b0 : 00812303;   % 62:     lw t1, 8(sp) %
000015b1 : 00412283;   % 63:     lw t0, 4(sp) %
000015b2 : 00012083;   % 64:     lw ra, 0(sp) %
000015b3 : 01010113;   % 65:     addi sp, sp, 16 %
000015b4 : 00008067;   % 67:     ret %
000015b5 : 00000533;   % 3:     mv a0, zero %
000015b6 : 008005b3;   % 4:     mv a1, s0 %
000015b7 : c11ff0ef;   % 5:     jal COLOR_SCREEN %
000015b8 : 0000006f;   % 8:     j infinity_loop %
000015b9 : ff810113;   % 4:     addi sp, sp, -8 %
000015ba : 00512023;   % 5:     sw t0, 0(sp) %
000015bb : 00612223;   % 6:     sw t1, 4(sp) %
000015bc : 0fc22297;   % 9:     la t0, creditos %
000015bd : b8428293;   % 9:  %
000015be : 0ff00313;   % 10:     li t1, 255 %
000015bf : 00628023;   % 11:     sb t1, 0(t0) %
000015c0 : 00412303;   % 14:     lw t1, 4(sp) %
000015c1 : 00012283;   % 15:     lw t0, 0(sp) %
000015c2 : 00810113;   % 16:     addi sp, sp, 8 %
000015c3 : 00008067;   % 19:     ret %
000015c4 : ffc10113;   % 23:     addi sp, sp, -4 %
000015c5 : 00112023;   % 24:     sw ra, 0(sp) %
000015c6 : e60fe0ef;   % 27:     jal LEVEL_UP %
000015c7 : 00012083;   % 30:     lw ra, 0(sp) %
000015c8 : 00410113;   % 31:     addi sp, sp, 4 %
000015c9 : 00008067;   % 34:     ret  %
END;
